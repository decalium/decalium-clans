--- a/net/minecraft/nbt/CompoundTag.java
+++ b/net/minecraft/nbt/CompoundTag.java
@@ -28,12 +28,13 @@
     private static final int SELF_SIZE_IN_BITS = 384;
     private static final int MAP_ENTRY_SIZE_IN_BITS = 256;
     public static final TagType<CompoundTag> TYPE = new TagType<CompoundTag>() {
+        @Override
         public CompoundTag load(DataInput dataInput, int i, NbtAccounter nbtAccounter) throws IOException {
             nbtAccounter.accountBits(384L);
             if (i > 512) {
                 throw new RuntimeException("Tried to read NBT tag with too high complexity, depth > 512");
             } else {
-                Map<String, Tag> map = Maps.newHashMap();
+                it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap<String, Tag> map = new it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap<>(8, 0.8f); // Paper - reduce memory footprint of NBTTagCompound
 
                 byte b;
                 while((b = CompoundTag.readNamedTagType(dataInput, nbtAccounter)) != 0) {
@@ -49,24 +50,27 @@
             }
         }
 
+        @Override
         public String getName() {
             return "COMPOUND";
         }
 
+        @Override
         public String getPrettyName() {
             return "TAG_Compound";
         }
     };
-    private final Map<String, Tag> tags;
+    public final Map<String, Tag> tags; // Paper
 
     protected CompoundTag(Map<String, Tag> entries) {
         this.tags = entries;
     }
 
     public CompoundTag() {
-        this(Maps.newHashMap());
+        this(new it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap<>(8, 0.8f)); // Paper - reduce memory footprint of NBTTagCompound
     }
 
+    @Override
     public void write(DataOutput output) throws IOException {
         for(String string : this.tags.keySet()) {
             Tag tag = this.tags.get(string);
@@ -80,10 +84,12 @@
         return this.tags.keySet();
     }
 
+    @Override
     public byte getId() {
         return 10;
     }
 
+    @Override
     public TagType<CompoundTag> getType() {
         return TYPE;
     }
@@ -114,14 +120,34 @@
     }
 
     public void putUUID(String key, UUID value) {
+        // Paper start - support old format
+        if (this.contains(key + "Most", 99) && this.contains(key + "Least", 99)) {
+            this.tags.remove(key + "Most");
+            this.tags.remove(key + "Least");
+        }
+        // Paper end
         this.tags.put(key, NbtUtils.createUUID(value));
     }
 
+
+    /**
+     * You must use {@link #hasUUID(String)} before or else it <b>will</b> throw an NPE.
+     */
     public UUID getUUID(String key) {
+        // Paper start - support old format
+        if (!contains(key, 11) && this.contains(key + "Most", 99) && this.contains(key + "Least", 99)) {
+            return new UUID(this.getLong(key + "Most"), this.getLong(key + "Least"));
+        }
+        // Paper end
         return NbtUtils.loadUUID(this.get(key));
     }
 
     public boolean hasUUID(String key) {
+        // Paper start - support old format
+        if (this.contains(key + "Most", 99) && this.contains(key + "Least", 99)) {
+            return true;
+        }
+        // Paper end
         Tag tag = this.get(key);
         return tag != null && tag.getType() == IntArrayTag.TYPE && ((IntArrayTag)tag).getAsIntArray().length == 4;
     }
@@ -341,6 +367,7 @@
         this.tags.remove(key);
     }
 
+    @Override
     public String toString() {
         return this.getAsString();
     }
@@ -360,11 +387,21 @@
         return crashReport;
     }
 
+    @Override
     public CompoundTag copy() {
-        Map<String, Tag> map = Maps.newHashMap(Maps.transformValues(this.tags, Tag::copy));
-        return new CompoundTag(map);
+        // Paper start - reduce memory footprint of NBTTagCompound
+        it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap<String, Tag> ret = new it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap<>(this.tags.size(), 0.8f);
+        java.util.Iterator<java.util.Map.Entry<String, Tag>> iterator = (this.tags instanceof it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap) ? ((it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap)this.tags).object2ObjectEntrySet().fastIterator() : this.tags.entrySet().iterator();
+        while (iterator.hasNext()) {
+            Map.Entry<String, Tag> entry = iterator.next();
+            ret.put(entry.getKey(), entry.getValue().copy());
+        }
+
+        return new CompoundTag(ret);
+        // Paper end - reduce memory footprint of NBTTagCompound
     }
 
+    @Override
     public boolean equals(Object object) {
         if (this == object) {
             return true;
@@ -373,6 +410,7 @@
         }
     }
 
+    @Override
     public int hashCode() {
         return this.tags.hashCode();
     }
@@ -423,6 +461,7 @@
         return this;
     }
 
+    @Override
     public void accept(TagVisitor visitor) {
         visitor.visitCompound(this);
     }
