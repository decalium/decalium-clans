--- a/net/minecraft/nbt/ByteArrayTag.java
+++ b/net/minecraft/nbt/ByteArrayTag.java
@@ -1,3 +1,4 @@
+// mc-dev import
 package net.minecraft.nbt;
 
 import java.io.DataInput;
@@ -5,24 +6,31 @@
 import java.io.IOException;
 import java.util.Arrays;
 import java.util.List;
-import org.apache.commons.lang3.ArrayUtils;
+import org.bukkit.craftbukkit.libs.org.apache.commons.lang3.ArrayUtils;
 
 public class ByteArrayTag extends CollectionTag<ByteTag> {
+
     private static final int SELF_SIZE_IN_BITS = 192;
     public static final TagType<ByteArrayTag> TYPE = new TagType<ByteArrayTag>() {
-        public ByteArrayTag load(DataInput dataInput, int i, NbtAccounter nbtAccounter) throws IOException {
-            nbtAccounter.accountBits(192L);
-            int j = dataInput.readInt();
-            nbtAccounter.accountBits(8L * (long)j);
-            byte[] bs = new byte[j];
-            dataInput.readFully(bs);
-            return new ByteArrayTag(bs);
+        @Override
+        public ByteArrayTag load(DataInput datainput, int i, NbtAccounter nbtreadlimiter) throws IOException {
+            nbtreadlimiter.accountBits(192L);
+            int j = datainput.readInt();
+            com.google.common.base.Preconditions.checkArgument( j < 1 << 24); // Spigot
+
+            nbtreadlimiter.accountBits(8L * (long) j);
+            byte[] abyte = new byte[j];
+
+            datainput.readFully(abyte);
+            return new ByteArrayTag(abyte);
         }
 
+        @Override
         public String getName() {
             return "BYTE[]";
         }
 
+        @Override
         public String getPrettyName() {
             return "TAG_Byte_Array";
         }
@@ -34,55 +42,59 @@
     }
 
     public ByteArrayTag(List<Byte> value) {
-        this(toArray(value));
+        this(ByteArrayTag.toArray(value));
     }
 
     private static byte[] toArray(List<Byte> list) {
-        byte[] bs = new byte[list.size()];
+        byte[] abyte = new byte[list.size()];
 
-        for(int i = 0; i < list.size(); ++i) {
-            Byte byte_ = list.get(i);
-            bs[i] = byte_ == null ? 0 : byte_;
+        for (int i = 0; i < list.size(); ++i) {
+            Byte obyte = (Byte) list.get(i);
+
+            abyte[i] = obyte == null ? 0 : obyte;
         }
 
-        return bs;
+        return abyte;
     }
 
+    @Override
     public void write(DataOutput output) throws IOException {
         output.writeInt(this.data.length);
         output.write(this.data);
     }
 
+    @Override
     public byte getId() {
         return 7;
     }
 
+    @Override
     public TagType<ByteArrayTag> getType() {
-        return TYPE;
+        return ByteArrayTag.TYPE;
     }
 
+    @Override
     public String toString() {
         return this.getAsString();
     }
 
+    @Override
     public Tag copy() {
-        byte[] bs = new byte[this.data.length];
-        System.arraycopy(this.data, 0, bs, 0, this.data.length);
-        return new ByteArrayTag(bs);
+        byte[] abyte = new byte[this.data.length];
+
+        System.arraycopy(this.data, 0, abyte, 0, this.data.length);
+        return new ByteArrayTag(abyte);
     }
 
     public boolean equals(Object object) {
-        if (this == object) {
-            return true;
-        } else {
-            return object instanceof ByteArrayTag && Arrays.equals(this.data, ((ByteArrayTag)object).data);
-        }
+        return this == object ? true : object instanceof ByteArrayTag && Arrays.equals(this.data, ((ByteArrayTag) object).data);
     }
 
     public int hashCode() {
         return Arrays.hashCode(this.data);
     }
 
+    @Override
     public void accept(TagVisitor visitor) {
         visitor.visitByteArray(this);
     }
@@ -99,40 +111,46 @@
         return ByteTag.valueOf(this.data[i]);
     }
 
-    public ByteTag set(int i, ByteTag byteTag) {
-        byte b = this.data[i];
-        this.data[i] = byteTag.getAsByte();
-        return ByteTag.valueOf(b);
+    public ByteTag set(int i, ByteTag nbttagbyte) {
+        byte b0 = this.data[i];
+
+        this.data[i] = nbttagbyte.getAsByte();
+        return ByteTag.valueOf(b0);
     }
 
-    public void add(int i, ByteTag byteTag) {
-        this.data = ArrayUtils.add(this.data, i, byteTag.getAsByte());
+    public void add(int i, ByteTag nbttagbyte) {
+        this.data = ArrayUtils.add(this.data, i, nbttagbyte.getAsByte());
     }
 
+    @Override
     public boolean setTag(int index, Tag element) {
         if (element instanceof NumericTag) {
-            this.data[index] = ((NumericTag)element).getAsByte();
+            this.data[index] = ((NumericTag) element).getAsByte();
             return true;
         } else {
             return false;
         }
     }
 
+    @Override
     public boolean addTag(int index, Tag element) {
         if (element instanceof NumericTag) {
-            this.data = ArrayUtils.add(this.data, index, ((NumericTag)element).getAsByte());
+            this.data = ArrayUtils.add(this.data, index, ((NumericTag) element).getAsByte());
             return true;
         } else {
             return false;
         }
     }
 
+    @Override
     public ByteTag remove(int i) {
-        byte b = this.data[i];
+        byte b0 = this.data[i];
+
         this.data = ArrayUtils.remove(this.data, i);
-        return ByteTag.valueOf(b);
+        return ByteTag.valueOf(b0);
     }
 
+    @Override
     public byte getElementType() {
         return 1;
     }
