--- a/net/minecraft/world/entity/animal/Parrot.java
+++ b/net/minecraft/world/entity/animal/Parrot.java
@@ -11,6 +11,7 @@
 import javax.annotation.Nullable;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.Position;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
@@ -20,6 +21,7 @@
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.tags.BlockTags;
+import net.minecraft.tags.Tag;
 import net.minecraft.util.Mth;
 import net.minecraft.world.Difficulty;
 import net.minecraft.world.DifficultyInstance;
@@ -32,6 +34,7 @@
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.Pose;
@@ -62,49 +65,50 @@
 import net.minecraft.world.phys.Vec3;
 
 public class Parrot extends ShoulderRidingEntity implements FlyingAnimal {
+
     private static final EntityDataAccessor<Integer> DATA_VARIANT_ID = SynchedEntityData.defineId(Parrot.class, EntityDataSerializers.INT);
     private static final Predicate<Mob> NOT_PARROT_PREDICATE = new Predicate<Mob>() {
-        public boolean test(@Nullable Mob mob) {
-            return mob != null && Parrot.MOB_SOUND_MAP.containsKey(mob.getType());
+        public boolean test(@Nullable Mob entityinsentient) {
+            return entityinsentient != null && Parrot.MOB_SOUND_MAP.containsKey(entityinsentient.getType());
         }
     };
     private static final Item POISONOUS_FOOD = Items.COOKIE;
-    private static final Set<Item> TAME_FOOD = Sets.newHashSet(Items.WHEAT_SEEDS, Items.MELON_SEEDS, Items.PUMPKIN_SEEDS, Items.BEETROOT_SEEDS);
+    private static final Set<Item> TAME_FOOD = Sets.newHashSet(new Item[]{Items.WHEAT_SEEDS, Items.MELON_SEEDS, Items.PUMPKIN_SEEDS, Items.BEETROOT_SEEDS});
     private static final int VARIANTS = 5;
-    static final Map<EntityType<?>, SoundEvent> MOB_SOUND_MAP = Util.make(Maps.newHashMap(), (map) -> {
-        map.put(EntityType.BLAZE, SoundEvents.PARROT_IMITATE_BLAZE);
-        map.put(EntityType.CAVE_SPIDER, SoundEvents.PARROT_IMITATE_SPIDER);
-        map.put(EntityType.CREEPER, SoundEvents.PARROT_IMITATE_CREEPER);
-        map.put(EntityType.DROWNED, SoundEvents.PARROT_IMITATE_DROWNED);
-        map.put(EntityType.ELDER_GUARDIAN, SoundEvents.PARROT_IMITATE_ELDER_GUARDIAN);
-        map.put(EntityType.ENDER_DRAGON, SoundEvents.PARROT_IMITATE_ENDER_DRAGON);
-        map.put(EntityType.ENDERMITE, SoundEvents.PARROT_IMITATE_ENDERMITE);
-        map.put(EntityType.EVOKER, SoundEvents.PARROT_IMITATE_EVOKER);
-        map.put(EntityType.GHAST, SoundEvents.PARROT_IMITATE_GHAST);
-        map.put(EntityType.GUARDIAN, SoundEvents.PARROT_IMITATE_GUARDIAN);
-        map.put(EntityType.HOGLIN, SoundEvents.PARROT_IMITATE_HOGLIN);
-        map.put(EntityType.HUSK, SoundEvents.PARROT_IMITATE_HUSK);
-        map.put(EntityType.ILLUSIONER, SoundEvents.PARROT_IMITATE_ILLUSIONER);
-        map.put(EntityType.MAGMA_CUBE, SoundEvents.PARROT_IMITATE_MAGMA_CUBE);
-        map.put(EntityType.PHANTOM, SoundEvents.PARROT_IMITATE_PHANTOM);
-        map.put(EntityType.PIGLIN, SoundEvents.PARROT_IMITATE_PIGLIN);
-        map.put(EntityType.PIGLIN_BRUTE, SoundEvents.PARROT_IMITATE_PIGLIN_BRUTE);
-        map.put(EntityType.PILLAGER, SoundEvents.PARROT_IMITATE_PILLAGER);
-        map.put(EntityType.RAVAGER, SoundEvents.PARROT_IMITATE_RAVAGER);
-        map.put(EntityType.SHULKER, SoundEvents.PARROT_IMITATE_SHULKER);
-        map.put(EntityType.SILVERFISH, SoundEvents.PARROT_IMITATE_SILVERFISH);
-        map.put(EntityType.SKELETON, SoundEvents.PARROT_IMITATE_SKELETON);
-        map.put(EntityType.SLIME, SoundEvents.PARROT_IMITATE_SLIME);
-        map.put(EntityType.SPIDER, SoundEvents.PARROT_IMITATE_SPIDER);
-        map.put(EntityType.STRAY, SoundEvents.PARROT_IMITATE_STRAY);
-        map.put(EntityType.VEX, SoundEvents.PARROT_IMITATE_VEX);
-        map.put(EntityType.VINDICATOR, SoundEvents.PARROT_IMITATE_VINDICATOR);
-        map.put(EntityType.WITCH, SoundEvents.PARROT_IMITATE_WITCH);
-        map.put(EntityType.WITHER, SoundEvents.PARROT_IMITATE_WITHER);
-        map.put(EntityType.WITHER_SKELETON, SoundEvents.PARROT_IMITATE_WITHER_SKELETON);
-        map.put(EntityType.ZOGLIN, SoundEvents.PARROT_IMITATE_ZOGLIN);
-        map.put(EntityType.ZOMBIE, SoundEvents.PARROT_IMITATE_ZOMBIE);
-        map.put(EntityType.ZOMBIE_VILLAGER, SoundEvents.PARROT_IMITATE_ZOMBIE_VILLAGER);
+    static final Map<EntityType<?>, SoundEvent> MOB_SOUND_MAP = (Map) Util.make(Maps.newHashMap(), (hashmap) -> { // CraftBukkit - decompile error
+        hashmap.put(EntityType.BLAZE, SoundEvents.PARROT_IMITATE_BLAZE);
+        hashmap.put(EntityType.CAVE_SPIDER, SoundEvents.PARROT_IMITATE_SPIDER);
+        hashmap.put(EntityType.CREEPER, SoundEvents.PARROT_IMITATE_CREEPER);
+        hashmap.put(EntityType.DROWNED, SoundEvents.PARROT_IMITATE_DROWNED);
+        hashmap.put(EntityType.ELDER_GUARDIAN, SoundEvents.PARROT_IMITATE_ELDER_GUARDIAN);
+        hashmap.put(EntityType.ENDER_DRAGON, SoundEvents.PARROT_IMITATE_ENDER_DRAGON);
+        hashmap.put(EntityType.ENDERMITE, SoundEvents.PARROT_IMITATE_ENDERMITE);
+        hashmap.put(EntityType.EVOKER, SoundEvents.PARROT_IMITATE_EVOKER);
+        hashmap.put(EntityType.GHAST, SoundEvents.PARROT_IMITATE_GHAST);
+        hashmap.put(EntityType.GUARDIAN, SoundEvents.PARROT_IMITATE_GUARDIAN);
+        hashmap.put(EntityType.HOGLIN, SoundEvents.PARROT_IMITATE_HOGLIN);
+        hashmap.put(EntityType.HUSK, SoundEvents.PARROT_IMITATE_HUSK);
+        hashmap.put(EntityType.ILLUSIONER, SoundEvents.PARROT_IMITATE_ILLUSIONER);
+        hashmap.put(EntityType.MAGMA_CUBE, SoundEvents.PARROT_IMITATE_MAGMA_CUBE);
+        hashmap.put(EntityType.PHANTOM, SoundEvents.PARROT_IMITATE_PHANTOM);
+        hashmap.put(EntityType.PIGLIN, SoundEvents.PARROT_IMITATE_PIGLIN);
+        hashmap.put(EntityType.PIGLIN_BRUTE, SoundEvents.PARROT_IMITATE_PIGLIN_BRUTE);
+        hashmap.put(EntityType.PILLAGER, SoundEvents.PARROT_IMITATE_PILLAGER);
+        hashmap.put(EntityType.RAVAGER, SoundEvents.PARROT_IMITATE_RAVAGER);
+        hashmap.put(EntityType.SHULKER, SoundEvents.PARROT_IMITATE_SHULKER);
+        hashmap.put(EntityType.SILVERFISH, SoundEvents.PARROT_IMITATE_SILVERFISH);
+        hashmap.put(EntityType.SKELETON, SoundEvents.PARROT_IMITATE_SKELETON);
+        hashmap.put(EntityType.SLIME, SoundEvents.PARROT_IMITATE_SLIME);
+        hashmap.put(EntityType.SPIDER, SoundEvents.PARROT_IMITATE_SPIDER);
+        hashmap.put(EntityType.STRAY, SoundEvents.PARROT_IMITATE_STRAY);
+        hashmap.put(EntityType.VEX, SoundEvents.PARROT_IMITATE_VEX);
+        hashmap.put(EntityType.VINDICATOR, SoundEvents.PARROT_IMITATE_VINDICATOR);
+        hashmap.put(EntityType.WITCH, SoundEvents.PARROT_IMITATE_WITCH);
+        hashmap.put(EntityType.WITHER, SoundEvents.PARROT_IMITATE_WITHER);
+        hashmap.put(EntityType.WITHER_SKELETON, SoundEvents.PARROT_IMITATE_WITHER_SKELETON);
+        hashmap.put(EntityType.ZOGLIN, SoundEvents.PARROT_IMITATE_ZOGLIN);
+        hashmap.put(EntityType.ZOMBIE, SoundEvents.PARROT_IMITATE_ZOMBIE);
+        hashmap.put(EntityType.ZOMBIE_VILLAGER, SoundEvents.PARROT_IMITATE_ZOMBIE_VILLAGER);
     });
     public float flap;
     public float flapSpeed;
@@ -124,19 +128,22 @@
     }
 
     @Nullable
+    @Override
     public SpawnGroupData finalizeSpawn(ServerLevelAccessor world, DifficultyInstance difficulty, MobSpawnType spawnReason, @Nullable SpawnGroupData entityData, @Nullable CompoundTag entityNbt) {
         this.setVariant(this.random.nextInt(5));
         if (entityData == null) {
             entityData = new AgeableMob.AgeableMobGroupData(false);
         }
 
-        return super.finalizeSpawn(world, difficulty, spawnReason, entityData, entityNbt);
+        return super.finalizeSpawn(world, difficulty, spawnReason, (SpawnGroupData) entityData, entityNbt);
     }
 
+    @Override
     public boolean isBaby() {
         return false;
     }
 
+    @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new PanicGoal(this, 1.25D));
         this.goalSelector.addGoal(0, new FloatGoal(this));
@@ -149,35 +156,40 @@
     }
 
     public static AttributeSupplier.Builder createAttributes() {
-        return Mob.createMobAttributes().add(Attributes.MAX_HEALTH, 6.0D).add(Attributes.FLYING_SPEED, (double)0.4F).add(Attributes.MOVEMENT_SPEED, (double)0.2F);
+        return Mob.createMobAttributes().add(Attributes.MAX_HEALTH, 6.0D).add(Attributes.FLYING_SPEED, 0.4000000059604645D).add(Attributes.MOVEMENT_SPEED, 0.20000000298023224D);
     }
 
+    @Override
     protected PathNavigation createNavigation(Level world) {
-        FlyingPathNavigation flyingPathNavigation = new FlyingPathNavigation(this, world);
-        flyingPathNavigation.setCanOpenDoors(false);
-        flyingPathNavigation.setCanFloat(true);
-        flyingPathNavigation.setCanPassDoors(true);
-        return flyingPathNavigation;
+        FlyingPathNavigation navigationflying = new FlyingPathNavigation(this, world);
+
+        navigationflying.setCanOpenDoors(false);
+        navigationflying.setCanFloat(true);
+        navigationflying.setCanPassDoors(true);
+        return navigationflying;
     }
 
+    @Override
     protected float getStandingEyeHeight(Pose pose, EntityDimensions dimensions) {
         return dimensions.height * 0.6F;
     }
 
+    @Override
     public void aiStep() {
-        if (this.jukebox == null || !this.jukebox.closerThan(this.position(), 3.46D) || !this.level.getBlockState(this.jukebox).is(Blocks.JUKEBOX)) {
+        if (this.jukebox == null || !this.jukebox.closerThan((Position) this.position(), 3.46D) || !this.level.getBlockState(this.jukebox).is(Blocks.JUKEBOX)) {
             this.partyParrot = false;
             this.jukebox = null;
         }
 
         if (this.level.random.nextInt(400) == 0) {
-            imitateNearbyMobs(this.level, this);
+            Parrot.imitateNearbyMobs(this.level, (Entity) this);
         }
 
         super.aiStep();
         this.calculateFlapping();
     }
 
+    @Override
     public void setRecordPlayingNearby(BlockPos songPosition, boolean playing) {
         this.jukebox = songPosition;
         this.partyParrot = playing;
@@ -190,16 +202,17 @@
     private void calculateFlapping() {
         this.oFlap = this.flap;
         this.oFlapSpeed = this.flapSpeed;
-        this.flapSpeed = (float)((double)this.flapSpeed + (double)(!this.onGround && !this.isPassenger() ? 4 : -1) * 0.3D);
+        this.flapSpeed = (float) ((double) this.flapSpeed + (double) (!this.onGround && !this.isPassenger() ? 4 : -1) * 0.3D);
         this.flapSpeed = Mth.clamp(this.flapSpeed, 0.0F, 1.0F);
         if (!this.onGround && this.flapping < 1.0F) {
             this.flapping = 1.0F;
         }
 
-        this.flapping = (float)((double)this.flapping * 0.9D);
-        Vec3 vec3 = this.getDeltaMovement();
-        if (!this.onGround && vec3.y < 0.0D) {
-            this.setDeltaMovement(vec3.multiply(1.0D, 0.6D, 1.0D));
+        this.flapping = (float) ((double) this.flapping * 0.9D);
+        Vec3 vec3d = this.getDeltaMovement();
+
+        if (!this.onGround && vec3d.y < 0.0D) {
+            this.setDeltaMovement(vec3d.multiply(1.0D, 0.6D, 1.0D));
         }
 
         this.flap += this.flapping * 2.0F;
@@ -207,12 +220,15 @@
 
     public static boolean imitateNearbyMobs(Level world, Entity parrot) {
         if (parrot.isAlive() && !parrot.isSilent() && world.random.nextInt(2) == 0) {
-            List<Mob> list = world.getEntitiesOfClass(Mob.class, parrot.getBoundingBox().inflate(20.0D), NOT_PARROT_PREDICATE);
+            List<Mob> list = world.getEntitiesOfClass(Mob.class, parrot.getBoundingBox().inflate(20.0D), Parrot.NOT_PARROT_PREDICATE);
+
             if (!list.isEmpty()) {
-                Mob mob = list.get(world.random.nextInt(list.size()));
-                if (!mob.isSilent()) {
-                    SoundEvent soundEvent = getImitatedSound(mob.getType());
-                    world.playSound((Player)null, parrot.getX(), parrot.getY(), parrot.getZ(), soundEvent, parrot.getSoundSource(), 0.7F, getPitch(world.random));
+                Mob entityinsentient = (Mob) list.get(world.random.nextInt(list.size()));
+
+                if (!entityinsentient.isSilent()) {
+                    SoundEvent soundeffect = Parrot.getImitatedSound(entityinsentient.getType());
+
+                    world.playSound((Player) null, parrot.getX(), parrot.getY(), parrot.getZ(), soundeffect, parrot.getSoundSource(), 0.7F, Parrot.getPitch(world.random));
                     return true;
                 }
             }
@@ -223,39 +239,41 @@
         }
     }
 
+    @Override
     public InteractionResult mobInteract(Player player, InteractionHand hand) {
-        ItemStack itemStack = player.getItemInHand(hand);
-        if (!this.isTame() && TAME_FOOD.contains(itemStack.getItem())) {
+        ItemStack itemstack = player.getItemInHand(hand);
+
+        if (!this.isTame() && Parrot.TAME_FOOD.contains(itemstack.getItem())) {
             if (!player.getAbilities().instabuild) {
-                itemStack.shrink(1);
+                itemstack.shrink(1);
             }
 
             if (!this.isSilent()) {
-                this.level.playSound((Player)null, this.getX(), this.getY(), this.getZ(), SoundEvents.PARROT_EAT, this.getSoundSource(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
+                this.level.playSound((Player) null, this.getX(), this.getY(), this.getZ(), SoundEvents.PARROT_EAT, this.getSoundSource(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
             }
 
             if (!this.level.isClientSide) {
-                if (this.random.nextInt(10) == 0) {
+                if (this.random.nextInt(10) == 0 && !org.bukkit.craftbukkit.v1_17_R1.event.CraftEventFactory.callEntityTameEvent(this, player).isCancelled()) { // CraftBukkit
                     this.tame(player);
-                    this.level.broadcastEntityEvent(this, (byte)7);
+                    this.level.broadcastEntityEvent(this, (byte) 7);
                 } else {
-                    this.level.broadcastEntityEvent(this, (byte)6);
+                    this.level.broadcastEntityEvent(this, (byte) 6);
                 }
             }
 
             return InteractionResult.sidedSuccess(this.level.isClientSide);
-        } else if (itemStack.is(POISONOUS_FOOD)) {
+        } else if (itemstack.is(Parrot.POISONOUS_FOOD)) {
             if (!player.getAbilities().instabuild) {
-                itemStack.shrink(1);
+                itemstack.shrink(1);
             }
 
-            this.addEffect(new MobEffectInstance(MobEffects.POISON, 900));
+            this.addEffect(new MobEffectInstance(MobEffects.POISON, 900), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.FOOD); // CraftBukkit
             if (player.isCreative() || !this.isInvulnerable()) {
                 this.hurt(DamageSource.playerAttack(player), Float.MAX_VALUE);
             }
 
             return InteractionResult.sidedSuccess(this.level.isClientSide);
-        } else if (!this.isFlying() && this.isTame() && this.isOwnedBy(player)) {
+        } else if (!this.isFlying() && this.isTame() && this.isOwnedBy((LivingEntity) player)) {
             if (!this.level.isClientSide) {
                 this.setOrderedToSit(!this.isOrderedToSit());
             }
@@ -266,133 +284,156 @@
         }
     }
 
+    @Override
     public boolean isFood(ItemStack stack) {
         return false;
     }
 
     public static boolean checkParrotSpawnRules(EntityType<Parrot> type, LevelAccessor world, MobSpawnType spawnReason, BlockPos pos, Random random) {
-        BlockState blockState = world.getBlockState(pos.below());
-        return (blockState.is(BlockTags.LEAVES) || blockState.is(Blocks.GRASS_BLOCK) || blockState.is(BlockTags.LOGS) || blockState.is(Blocks.AIR)) && world.getRawBrightness(pos, 0) > 8;
+        BlockState iblockdata = world.getBlockState(pos.below());
+
+        return (iblockdata.is((Tag) BlockTags.LEAVES) || iblockdata.is(Blocks.GRASS_BLOCK) || iblockdata.is((Tag) BlockTags.LOGS) || iblockdata.is(Blocks.AIR)) && world.getRawBrightness(pos, 0) > 8;
     }
 
+    @Override
     public boolean causeFallDamage(float fallDistance, float damageMultiplier, DamageSource damageSource) {
         return false;
     }
 
-    protected void checkFallDamage(double heightDifference, boolean onGround, BlockState landedState, BlockPos landedPosition) {
-    }
+    @Override
+    protected void checkFallDamage(double heightDifference, boolean onGround, BlockState landedState, BlockPos landedPosition) {}
 
+    @Override
     public boolean canMate(Animal other) {
         return false;
     }
 
     @Nullable
+    @Override
     public AgeableMob getBreedOffspring(ServerLevel world, AgeableMob entity) {
         return null;
     }
 
+    @Override
     public boolean doHurtTarget(Entity target) {
         return target.hurt(DamageSource.mobAttack(this), 3.0F);
     }
 
     @Nullable
+    @Override
     public SoundEvent getAmbientSound() {
-        return getAmbient(this.level, this.level.random);
+        return Parrot.getAmbient(this.level, this.level.random);
     }
 
     public static SoundEvent getAmbient(Level world, Random random) {
         if (world.getDifficulty() != Difficulty.PEACEFUL && random.nextInt(1000) == 0) {
-            List<EntityType<?>> list = Lists.newArrayList(MOB_SOUND_MAP.keySet());
-            return getImitatedSound(list.get(random.nextInt(list.size())));
+            List<EntityType<?>> list = Lists.newArrayList(Parrot.MOB_SOUND_MAP.keySet());
+
+            return Parrot.getImitatedSound((EntityType) list.get(random.nextInt(list.size())));
         } else {
             return SoundEvents.PARROT_AMBIENT;
         }
     }
 
     private static SoundEvent getImitatedSound(EntityType<?> imitate) {
-        return MOB_SOUND_MAP.getOrDefault(imitate, SoundEvents.PARROT_AMBIENT);
+        return (SoundEvent) Parrot.MOB_SOUND_MAP.getOrDefault(imitate, SoundEvents.PARROT_AMBIENT);
     }
 
+    @Override
     protected SoundEvent getHurtSound(DamageSource source) {
         return SoundEvents.PARROT_HURT;
     }
 
+    @Override
     protected SoundEvent getDeathSound() {
         return SoundEvents.PARROT_DEATH;
     }
 
+    @Override
     protected void playStepSound(BlockPos pos, BlockState state) {
         this.playSound(SoundEvents.PARROT_STEP, 0.15F, 1.0F);
     }
 
+    @Override
     protected boolean isFlapping() {
         return this.flyDist > this.nextFlap;
     }
 
+    @Override
     protected void onFlap() {
         this.playSound(SoundEvents.PARROT_FLY, 0.15F, 1.0F);
         this.nextFlap = this.flyDist + this.flapSpeed / 2.0F;
     }
 
+    @Override
     public float getVoicePitch() {
-        return getPitch(this.random);
+        return Parrot.getPitch(this.random);
     }
 
     public static float getPitch(Random random) {
         return (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F;
     }
 
+    @Override
     public SoundSource getSoundSource() {
         return SoundSource.NEUTRAL;
     }
 
-    public boolean isPushable() {
-        return true;
+    @Override
+    public boolean isCollidable(boolean ignoreClimbing) { // Paper
+        return super.isCollidable(ignoreClimbing); // CraftBukkit - collidable API // Paper
     }
 
+    @Override
     protected void doPush(Entity entity) {
         if (!(entity instanceof Player)) {
             super.doPush(entity);
         }
     }
 
+    @Override
     public boolean hurt(DamageSource source, float amount) {
         if (this.isInvulnerableTo(source)) {
             return false;
         } else {
-            this.setOrderedToSit(false);
+            // this.setWillSit(false); // CraftBukkit - moved into EntityLiving.damageEntity(DamageSource, float)
             return super.hurt(source, amount);
         }
     }
 
     public int getVariant() {
-        return Mth.clamp(this.entityData.get(DATA_VARIANT_ID), 0, 4);
+        return Mth.clamp((Integer) this.entityData.get(Parrot.DATA_VARIANT_ID), 0, 4);
     }
 
     public void setVariant(int variant) {
-        this.entityData.set(DATA_VARIANT_ID, variant);
+        this.entityData.set(Parrot.DATA_VARIANT_ID, variant);
     }
 
+    @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(DATA_VARIANT_ID, 0);
+        this.entityData.define(Parrot.DATA_VARIANT_ID, 0);
     }
 
+    @Override
     public void addAdditionalSaveData(CompoundTag nbt) {
         super.addAdditionalSaveData(nbt);
         nbt.putInt("Variant", this.getVariant());
     }
 
+    @Override
     public void readAdditionalSaveData(CompoundTag nbt) {
         super.readAdditionalSaveData(nbt);
         this.setVariant(nbt.getInt("Variant"));
     }
 
+    @Override
     public boolean isFlying() {
         return !this.onGround;
     }
 
+    @Override
     public Vec3 getLeashOffset() {
-        return new Vec3(0.0D, (double)(0.5F * this.getEyeHeight()), (double)(this.getBbWidth() * 0.4F));
+        return new Vec3(0.0D, (double) (0.5F * this.getEyeHeight()), (double) (this.getBbWidth() * 0.4F));
     }
 }
