--- a/net/minecraft/world/level/block/state/properties/EnumProperty.java
+++ b/net/minecraft/world/level/block/state/properties/EnumProperty.java
@@ -6,6 +6,7 @@
 import com.google.common.collect.Maps;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.Iterator;
 import java.util.Map;
 import java.util.Optional;
 import java.util.function.Predicate;
@@ -19,6 +20,7 @@
     protected EnumProperty(String name, Class<T> type, Collection<T> values) {
         super(name, type);
         this.values = ImmutableSet.copyOf(values);
+        Iterator<T> iterator = values.iterator(); // Paper - decompile fix
 
         for(T enum_ : values) {
             String string = enum_.getSerializedName();
@@ -31,19 +33,22 @@
 
     }
 
+    @Override
     public Collection<T> getPossibleValues() {
         return this.values;
     }
 
+    @Override
     public Optional<T> getValue(String name) {
         return Optional.ofNullable(this.names.get(name));
     }
 
+    @Override
     public String getName(T value) {
         return value.getSerializedName();
     }
 
-    public boolean equals(Object object) {
+    public boolean equals_unused(Object object) { // Paper
         if (this == object) {
             return true;
         } else if (object instanceof EnumProperty && super.equals(object)) {
@@ -54,6 +59,7 @@
         }
     }
 
+    @Override
     public int generateHashCode() {
         int i = super.generateHashCode();
         i = 31 * i + this.values.hashCode();
