--- a/net/minecraft/commands/CommandSourceStack.java
+++ b/net/minecraft/commands/CommandSourceStack.java
@@ -8,6 +8,7 @@
 import com.mojang.brigadier.suggestion.Suggestions;
 import com.mojang.brigadier.suggestion.SuggestionsBuilder;
 import java.util.Collection;
+import java.util.Iterator;
 import java.util.Set;
 import java.util.concurrent.CompletableFuture;
 import java.util.function.BinaryOperator;
@@ -19,6 +20,7 @@
 import net.minecraft.core.Registry;
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.chat.TextComponent;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.resources.ResourceKey;
@@ -33,11 +35,13 @@
 import net.minecraft.world.level.dimension.DimensionType;
 import net.minecraft.world.phys.Vec2;
 import net.minecraft.world.phys.Vec3;
+import com.mojang.brigadier.tree.CommandNode; // CraftBukkit
+
+public class CommandSourceStack implements SharedSuggestionProvider, com.destroystokyo.paper.brigadier.BukkitBrigadierCommandSource { // Paper
 
-public class CommandSourceStack implements SharedSuggestionProvider {
     public static final SimpleCommandExceptionType ERROR_NOT_PLAYER = new SimpleCommandExceptionType(new TranslatableComponent("permissions.requires.player"));
     public static final SimpleCommandExceptionType ERROR_NOT_ENTITY = new SimpleCommandExceptionType(new TranslatableComponent("permissions.requires.entity"));
-    private final CommandSource source;
+    public final CommandSource source;
     private final Vec3 worldPosition;
     private final ServerLevel level;
     private final int permissionLevel;
@@ -50,9 +54,10 @@
     private final ResultConsumer<CommandSourceStack> consumer;
     private final EntityAnchorArgument.Anchor anchor;
     private final Vec2 rotation;
+    public ThreadLocal<CommandNode> currentCommand = new ThreadLocal<>(); // CraftBukkit // Paper
 
     public CommandSourceStack(CommandSource output, Vec3 pos, Vec2 rot, ServerLevel world, int level, String name, Component displayName, MinecraftServer server, @Nullable Entity entity) {
-        this(output, pos, rot, world, level, name, displayName, server, entity, false, (context, success, result) -> {
+        this(output, pos, rot, world, level, name, displayName, server, entity, false, (commandcontext, flag, j) -> {
         }, EntityAnchorArgument.Anchor.FEET);
     }
 
@@ -92,8 +97,9 @@
     }
 
     public CommandSourceStack withCallback(ResultConsumer<CommandSourceStack> consumer, BinaryOperator<ResultConsumer<CommandSourceStack>> merger) {
-        ResultConsumer<CommandSourceStack> resultConsumer = merger.apply(this.consumer, consumer);
-        return this.withCallback(resultConsumer);
+        ResultConsumer<CommandSourceStack> resultconsumer1 = (ResultConsumer) merger.apply(this.consumer, consumer);
+
+        return this.withCallback(resultconsumer1);
     }
 
     public CommandSourceStack withSuppressedOutput() {
@@ -116,9 +122,10 @@
         if (world == this.level) {
             return this;
         } else {
-            double d = DimensionType.getTeleportationScale(this.level.dimensionType(), world.dimensionType());
-            Vec3 vec3 = new Vec3(this.worldPosition.x * d, this.worldPosition.y, this.worldPosition.z * d);
-            return new CommandSourceStack(this.source, vec3, this.rotation, world, this.permissionLevel, this.textName, this.displayName, this.server, this.entity, this.silent, this.consumer, this.anchor);
+            double d0 = DimensionType.getTeleportationScale(this.level.dimensionType(), world.dimensionType());
+            Vec3 vec3d = new Vec3(this.worldPosition.x * d0, this.worldPosition.y, this.worldPosition.z * d0);
+
+            return new CommandSourceStack(this.source, vec3d, this.rotation, world, this.permissionLevel, this.textName, this.displayName, this.server, this.entity, this.silent, this.consumer, this.anchor);
         }
     }
 
@@ -127,14 +134,15 @@
     }
 
     public CommandSourceStack facing(Vec3 position) {
-        Vec3 vec3 = this.anchor.apply(this);
-        double d = position.x - vec3.x;
-        double e = position.y - vec3.y;
-        double f = position.z - vec3.z;
-        double g = Math.sqrt(d * d + f * f);
-        float h = Mth.wrapDegrees((float)(-(Mth.atan2(e, g) * (double)(180F / (float)Math.PI))));
-        float i = Mth.wrapDegrees((float)(Mth.atan2(f, d) * (double)(180F / (float)Math.PI)) - 90.0F);
-        return this.withRotation(new Vec2(h, i));
+        Vec3 vec3d1 = this.anchor.apply(this);
+        double d0 = position.x - vec3d1.x;
+        double d1 = position.y - vec3d1.y;
+        double d2 = position.z - vec3d1.z;
+        double d3 = Math.sqrt(d0 * d0 + d2 * d2);
+        float f = Mth.wrapDegrees((float) (-(Mth.atan2(d1, d3) * 57.2957763671875D)));
+        float f1 = Mth.wrapDegrees((float) (Mth.atan2(d2, d0) * 57.2957763671875D) - 90.0F);
+
+        return this.withRotation(new Vec2(f, f1));
     }
 
     public Component getDisplayName() {
@@ -145,10 +153,46 @@
         return this.textName;
     }
 
+    // Paper start
+    @Override
+    public org.bukkit.entity.Entity getBukkitEntity() {
+        return getEntity() != null ? getEntity().getBukkitEntity() : null;
+    }
+
+    @Override
+    public org.bukkit.World getBukkitWorld() {
+        return getLevel() != null ? getLevel().getWorld() : null;
+    }
+
+    @Override
+    public org.bukkit.Location getBukkitLocation() {
+        Vec3 pos = getPosition();
+        org.bukkit.World world = getBukkitWorld();
+        return world != null && pos != null ? new org.bukkit.Location(world, pos.x, pos.y, pos.z) : null;
+    }
+    // Paper end
+
+    @Override
     public boolean hasPermission(int level) {
+        // CraftBukkit start
+        // Paper start - fix concurrency issue
+        CommandNode currentCommand = this.currentCommand.get();
+        if (currentCommand != null) {
+            return this.hasPermission(level, org.bukkit.craftbukkit.v1_17_R1.command.VanillaCommandWrapper.getPermission(currentCommand));
+            // Paper end
+        }
+        // CraftBukkit end
+
         return this.permissionLevel >= level;
     }
 
+    // CraftBukkit start
+    public boolean hasPermission(int i, String bukkitPermission) {
+        // World is null when loading functions
+        return ((this.getLevel() == null || !this.getLevel().getCraftServer().ignoreVanillaPermissions) && this.permissionLevel >= i) || this.getBukkitSender().hasPermission(bukkitPermission);
+    }
+    // CraftBukkit end
+
     public Vec3 getPosition() {
         return this.worldPosition;
     }
@@ -164,7 +208,7 @@
 
     public Entity getEntityOrException() throws CommandSyntaxException {
         if (this.entity == null) {
-            throw ERROR_NOT_ENTITY.create();
+            throw CommandSourceStack.ERROR_NOT_ENTITY.create();
         } else {
             return this.entity;
         }
@@ -172,9 +216,9 @@
 
     public ServerPlayer getPlayerOrException() throws CommandSyntaxException {
         if (!(this.entity instanceof ServerPlayer)) {
-            throw ERROR_NOT_PLAYER.create();
+            throw CommandSourceStack.ERROR_NOT_PLAYER.create();
         } else {
-            return (ServerPlayer)this.entity;
+            return (ServerPlayer) this.entity;
         }
     }
 
@@ -202,17 +246,22 @@
     }
 
     private void broadcastToAdmins(Component message) {
-        Component component = (new TranslatableComponent("chat.type.admin", this.getDisplayName(), message)).withStyle(new ChatFormatting[]{ChatFormatting.GRAY, ChatFormatting.ITALIC});
+        MutableComponent ichatmutablecomponent = (new TranslatableComponent("chat.type.admin", new Object[]{this.getDisplayName(), message})).withStyle(new ChatFormatting[]{ChatFormatting.GRAY, ChatFormatting.ITALIC});
+
         if (this.server.getGameRules().getBoolean(GameRules.RULE_SENDCOMMANDFEEDBACK)) {
-            for(ServerPlayer serverPlayer : this.server.getPlayerList().getPlayers()) {
-                if (serverPlayer != this.source && this.server.getPlayerList().isOp(serverPlayer.getGameProfile())) {
-                    serverPlayer.sendMessage(component, Util.NIL_UUID);
+            Iterator iterator = this.server.getPlayerList().getPlayers().iterator();
+
+            while (iterator.hasNext()) {
+                ServerPlayer entityplayer = (ServerPlayer) iterator.next();
+
+                if (entityplayer != this.source && entityplayer.getBukkitEntity().hasPermission("minecraft.admin.command_feedback")) { // CraftBukkit
+                    entityplayer.sendMessage(ichatmutablecomponent, Util.NIL_UUID);
                 }
             }
         }
 
-        if (this.source != this.server && this.server.getGameRules().getBoolean(GameRules.RULE_LOGADMINCOMMANDS)) {
-            this.server.sendMessage(component, Util.NIL_UUID);
+        if (this.source != this.server && this.server.getGameRules().getBoolean(GameRules.RULE_LOGADMINCOMMANDS) && !org.spigotmc.SpigotConfig.silentCommandBlocks) { // Spigot
+            this.server.sendMessage(ichatmutablecomponent, Util.NIL_UUID);
         }
 
     }
@@ -231,31 +280,44 @@
 
     }
 
+    @Override
     public Collection<String> getOnlinePlayerNames() {
         return Lists.newArrayList(this.server.getPlayerNames());
     }
 
+    @Override
     public Collection<String> getAllTeams() {
         return this.server.getScoreboard().getTeamNames();
     }
 
+    @Override
     public Collection<ResourceLocation> getAvailableSoundEvents() {
         return Registry.SOUND_EVENT.keySet();
     }
 
+    @Override
     public Stream<ResourceLocation> getRecipeNames() {
         return this.server.getRecipeManager().getRecipeIds();
     }
 
+    @Override
     public CompletableFuture<Suggestions> customSuggestion(CommandContext<SharedSuggestionProvider> context, SuggestionsBuilder builder) {
         return null;
     }
 
+    @Override
     public Set<ResourceKey<Level>> levels() {
         return this.server.levelKeys();
     }
 
+    @Override
     public RegistryAccess registryAccess() {
         return this.server.registryAccess();
     }
+
+    // CraftBukkit start
+    public org.bukkit.command.CommandSender getBukkitSender() {
+        return this.source.getBukkitSender(this);
+    }
+    // CraftBukkit end
 }
