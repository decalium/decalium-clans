--- a/net/minecraft/world/entity/ai/village/poi/PoiManager.java
+++ b/net/minecraft/world/entity/ai/village/poi/PoiManager.java
@@ -37,9 +37,11 @@
     public static final int VILLAGE_SECTION_SIZE = 1;
     private final PoiManager.DistanceTracker distanceTracker;
     private final LongSet loadedChunks = new LongOpenHashSet();
+    private final net.minecraft.server.level.ServerLevel world; // Paper
 
     public PoiManager(File directory, DataFixer dataFixer, boolean dsync, LevelHeightAccessor world) {
         super(directory, PoiSection::codec, PoiSection::new, dataFixer, DataFixTypes.POI_CHUNK, dsync, world);
+        this.world = (net.minecraft.server.level.ServerLevel)world; // Paper
         this.distanceTracker = new PoiManager.DistanceTracker();
     }
 
@@ -170,16 +172,30 @@
         }).orElse(false);
     }
 
+    @Override
     public void tick(BooleanSupplier shouldKeepTicking) {
-        super.tick(shouldKeepTicking);
+        // Paper start - async chunk io
+        while (!this.dirty.isEmpty() && shouldKeepTicking.getAsBoolean()) {
+            ChunkPos chunkcoordintpair = SectionPos.of(this.dirty.firstLong()).chunk();
+
+            net.minecraft.nbt.CompoundTag data;
+            try (co.aikar.timings.Timing ignored1 = this.world.timings.poiSaveDataSerialization.startTiming()) {
+                data = this.getData(chunkcoordintpair);
+            }
+            com.destroystokyo.paper.io.PaperFileIOThread.Holder.INSTANCE.scheduleSave(this.world,
+                chunkcoordintpair.x, chunkcoordintpair.z, data, null, com.destroystokyo.paper.io.PrioritizedTaskQueue.LOW_PRIORITY);
+        }
+        // Paper end
         this.distanceTracker.runAllUpdates();
     }
 
+    @Override
     protected void setDirty(long pos) {
         super.setDirty(pos);
         this.distanceTracker.update(pos, this.distanceTracker.getLevelFromSource(pos), false);
     }
 
+    @Override
     protected void onSectionLoad(long pos) {
         this.distanceTracker.update(pos, this.distanceTracker.getLevelFromSource(pos), false);
     }
@@ -237,14 +253,17 @@
             this.levels.defaultReturnValue((byte)7);
         }
 
+        @Override
         protected int getLevelFromSource(long id) {
             return PoiManager.this.isVillageCenter(id) ? 0 : 7;
         }
 
+        @Override
         protected int getLevel(long id) {
             return this.levels.get(id);
         }
 
+        @Override
         protected void setLevel(long id, int level) {
             if (level > 6) {
                 this.levels.remove(id);
@@ -259,6 +278,35 @@
         }
     }
 
+    // Paper start - Asynchronous chunk io
+    @javax.annotation.Nullable
+    @Override
+    public net.minecraft.nbt.CompoundTag read(ChunkPos chunkcoordintpair) throws java.io.IOException {
+        if (this.world != null && Thread.currentThread() != com.destroystokyo.paper.io.PaperFileIOThread.Holder.INSTANCE) {
+            net.minecraft.nbt.CompoundTag ret = com.destroystokyo.paper.io.PaperFileIOThread.Holder.INSTANCE
+                .loadChunkDataAsyncFuture(this.world, chunkcoordintpair.x, chunkcoordintpair.z, com.destroystokyo.paper.io.IOUtil.getPriorityForCurrentThread(),
+                    true, false, true).join().poiData;
+
+            if (ret == com.destroystokyo.paper.io.PaperFileIOThread.FAILURE_VALUE) {
+                throw new java.io.IOException("See logs for further detail");
+            }
+            return ret;
+        }
+        return super.read(chunkcoordintpair);
+    }
+
+    @Override
+    public void write(ChunkPos chunkcoordintpair, net.minecraft.nbt.CompoundTag nbttagcompound) throws java.io.IOException {
+        if (this.world != null && Thread.currentThread() != com.destroystokyo.paper.io.PaperFileIOThread.Holder.INSTANCE) {
+            com.destroystokyo.paper.io.PaperFileIOThread.Holder.INSTANCE.scheduleSave(
+                this.world, chunkcoordintpair.x, chunkcoordintpair.z, nbttagcompound, null,
+                com.destroystokyo.paper.io.IOUtil.getPriorityForCurrentThread());
+            return;
+        }
+        super.write(chunkcoordintpair, nbttagcompound);
+    }
+    // Paper end
+
     public static enum Occupancy {
         HAS_SPACE(PoiRecord::hasSpace),
         IS_OCCUPIED(PoiRecord::isOccupied),
