--- a/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/net/minecraft/server/dedicated/DedicatedServer.java
@@ -7,9 +7,9 @@
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.datafixers.DataFixer;
 import java.io.BufferedReader;
+import java.io.BufferedWriter;
 import java.io.IOException;
 import java.io.InputStreamReader;
-import java.io.Writer;
 import java.net.InetAddress;
 import java.net.Proxy;
 import java.nio.charset.StandardCharsets;
@@ -19,6 +19,7 @@
 import java.util.List;
 import java.util.Locale;
 import java.util.Optional;
+import java.util.concurrent.Executor;
 import java.util.function.BooleanSupplier;
 import java.util.regex.Pattern;
 import javax.annotation.Nullable;
@@ -45,6 +46,7 @@
 import net.minecraft.server.packs.repository.PackRepository;
 import net.minecraft.server.players.GameProfileCache;
 import net.minecraft.server.players.OldUsersConverter;
+import net.minecraft.server.players.PlayerList;
 import net.minecraft.server.rcon.RconConsoleSource;
 import net.minecraft.server.rcon.thread.QueryThreadGs4;
 import net.minecraft.server.rcon.thread.RconThread;
@@ -54,25 +56,34 @@
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.CreativeModeTab;
 import net.minecraft.world.item.Items;
+import net.minecraft.world.level.DataPackConfig;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.GameType;
-import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.entity.SkullBlockEntity;
 import net.minecraft.world.level.storage.LevelStorageSource;
 import net.minecraft.world.level.storage.WorldData;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.apache.logging.log4j.Level;
+import org.apache.logging.log4j.io.IoBuilder;
+import org.bukkit.command.CommandSender;
+import co.aikar.timings.MinecraftTimings; // Paper
+import org.bukkit.event.server.ServerCommandEvent;
+import org.bukkit.craftbukkit.v1_17_R1.util.Waitable;
+import org.bukkit.event.server.RemoteServerCommandEvent;
+// CraftBukkit end
 
 public class DedicatedServer extends MinecraftServer implements ServerInterface {
+
     static final Logger LOGGER = LogManager.getLogger();
     private static final int CONVERSION_RETRY_DELAY_MS = 5000;
     private static final int CONVERSION_RETRIES = 2;
     private static final Pattern SHA1 = Pattern.compile("^[a-fA-F0-9]{40}$");
-    private final List<ConsoleInput> consoleInput = Collections.synchronizedList(Lists.newArrayList());
+    private final java.util.Queue<ConsoleInput> serverCommandQueue = new java.util.concurrent.ConcurrentLinkedQueue<>(); // Paper - use a proper queue
     private QueryThreadGs4 queryThreadGs4;
-    private final RconConsoleSource rconConsoleSource;
+    public final RconConsoleSource rconConsoleSource;
     private RconThread rconThread;
-    private final DedicatedServerSettings settings;
+    public DedicatedServerSettings settings;
     @Nullable
     private MinecraftServerGui gui;
     @Nullable
@@ -80,187 +91,318 @@
     @Nullable
     private final Component resourcePackPrompt;
 
-    public DedicatedServer(Thread serverThread, RegistryAccess.RegistryHolder registryManager, LevelStorageSource.LevelStorageAccess session, PackRepository dataPackManager, ServerResources serverResourceManager, WorldData saveProperties, DedicatedServerSettings propertiesLoader, DataFixer dataFixer, MinecraftSessionService sessionService, GameProfileRepository gameProfileRepo, GameProfileCache userCache, ChunkProgressListenerFactory worldGenerationProgressListenerFactory) {
-        super(serverThread, registryManager, session, saveProperties, dataPackManager, Proxy.NO_PROXY, dataFixer, serverResourceManager, sessionService, gameProfileRepo, userCache, worldGenerationProgressListenerFactory);
-        this.settings = propertiesLoader;
+    // CraftBukkit start - Signature changed
+    public DedicatedServer(joptsimple.OptionSet options, DataPackConfig datapackconfiguration, Thread thread, RegistryAccess.RegistryHolder iregistrycustom_dimension, LevelStorageSource.LevelStorageAccess convertable_conversionsession, PackRepository resourcepackrepository, ServerResources datapackresources, WorldData savedata, DedicatedServerSettings dedicatedserversettings, DataFixer datafixer, MinecraftSessionService minecraftsessionservice, GameProfileRepository gameprofilerepository, GameProfileCache usercache, ChunkProgressListenerFactory worldloadlistenerfactory) {
+        super(options, datapackconfiguration, thread, iregistrycustom_dimension, convertable_conversionsession, savedata, resourcepackrepository, Proxy.NO_PROXY, datafixer, datapackresources, minecraftsessionservice, gameprofilerepository, usercache, worldloadlistenerfactory);
+        // CraftBukkit end
+        this.settings = dedicatedserversettings;
         this.rconConsoleSource = new RconConsoleSource(this);
-        this.textFilterClient = TextFilterClient.createFromConfig(propertiesLoader.getProperties().textFilteringConfig);
-        this.resourcePackPrompt = parseResourcePackPrompt(propertiesLoader);
+        this.textFilterClient = TextFilterClient.createFromConfig(dedicatedserversettings.getProperties().textFilteringConfig);
+        this.resourcePackPrompt = DedicatedServer.parseResourcePackPrompt(dedicatedserversettings);
     }
 
+    @Override
     public boolean initServer() throws IOException {
         Thread thread = new Thread("Server console handler") {
             public void run() {
-                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));
+                // CraftBukkit start
+                if (!org.bukkit.craftbukkit.v1_17_R1.Main.useConsole) {
+                    return;
+                }
+                // Paper start - Use TerminalConsoleAppender
+                new com.destroystokyo.paper.console.PaperConsole(DedicatedServer.this).start();
+                /*
+                org.bukkit.craftbukkit.libs.jline.console.ConsoleReader bufferedreader = reader;
 
-                String string;
+                // MC-33041, SPIGOT-5538: if System.in is not valid due to javaw, then return
                 try {
-                    while(!DedicatedServer.this.isStopped() && DedicatedServer.this.isRunning() && (string = bufferedReader.readLine()) != null) {
-                        DedicatedServer.this.handleConsoleInput(string, DedicatedServer.this.createCommandSourceStack());
+                    System.in.available();
+                } catch (IOException ex) {
+                    return;
+                }
+                // CraftBukkit end
+
+                String s;
+
+                try {
+                    // CraftBukkit start - JLine disabling compatibility
+                    while (!DedicatedServer.this.isStopped() && DedicatedServer.this.isRunning()) {
+                        if (org.bukkit.craftbukkit.v1_17_R1.Main.useJline) {
+                            s = bufferedreader.readLine(">", null);
+                        } else {
+                            s = bufferedreader.readLine();
+                        }
+
+                        // SPIGOT-5220: Throttle if EOF (ctrl^d) or stdin is /dev/null
+                        if (s == null) {
+                            try {
+                                Thread.sleep(50L);
+                            } catch (InterruptedException ex) {
+                                Thread.currentThread().interrupt();
+                            }
+                            continue;
+                        }
+                        if (s.trim().length() > 0) { // Trim to filter lines which are just spaces
+                            DedicatedServer.this.issueCommand(s, DedicatedServer.this.getServerCommandListener());
+                        }
+                        // CraftBukkit end
                     }
-                } catch (IOException var4) {
-                    DedicatedServer.LOGGER.error("Exception handling console input", (Throwable)var4);
+                } catch (IOException ioexception) {
+                    DedicatedServer.LOGGER.error("Exception handling console input", ioexception);
                 }
 
+                */
+                // Paper end
             }
         };
+
+        // CraftBukkit start - TODO: handle command-line logging arguments
+        java.util.logging.Logger global = java.util.logging.Logger.getLogger("");
+        global.setUseParentHandlers(false);
+        for (java.util.logging.Handler handler : global.getHandlers()) {
+            global.removeHandler(handler);
+        }
+        global.addHandler(new org.bukkit.craftbukkit.v1_17_R1.util.ForwardLogHandler());
+
+        // Paper start - Not needed with TerminalConsoleAppender
+        final org.apache.logging.log4j.Logger logger = LogManager.getRootLogger();
+        /*
+        final org.apache.logging.log4j.core.Logger logger = ((org.apache.logging.log4j.core.Logger) LogManager.getRootLogger());
+        for (org.apache.logging.log4j.core.Appender appender : logger.getAppenders().values()) {
+            if (appender instanceof org.apache.logging.log4j.core.appender.ConsoleAppender) {
+                logger.removeAppender(appender);
+            }
+        }
+
+        new org.bukkit.craftbukkit.v1_17_R1.util.TerminalConsoleWriterThread(System.out, this.reader).start();
+        */
+        // Paper end
+
+        System.setOut(IoBuilder.forLogger(logger).setLevel(Level.INFO).buildPrintStream());
+        System.setErr(IoBuilder.forLogger(logger).setLevel(Level.WARN).buildPrintStream());
+        // CraftBukkit end
+
         thread.setDaemon(true);
-        thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
+        thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(DedicatedServer.LOGGER));
         thread.start();
-        LOGGER.info("Starting minecraft server version {}", (Object)SharedConstants.getCurrentVersion().getName());
+        DedicatedServer.LOGGER.info("Starting minecraft server version {}", SharedConstants.getCurrentVersion().getName());
         if (Runtime.getRuntime().maxMemory() / 1024L / 1024L < 512L) {
-            LOGGER.warn("To start the server with more ram, launch it as \"java -Xmx1024M -Xms1024M -jar minecraft_server.jar\"");
+            DedicatedServer.LOGGER.warn("To start the server with more ram, launch it as \"java -Xmx1024M -Xms1024M -jar minecraft_server.jar\"");
         }
 
-        LOGGER.info("Loading properties");
-        DedicatedServerProperties dedicatedServerProperties = this.settings.getProperties();
+        DedicatedServer.LOGGER.info("Loading properties");
+        DedicatedServerProperties dedicatedserverproperties = this.settings.getProperties();
+
         if (this.isSingleplayer()) {
             this.setLocalIp("127.0.0.1");
         } else {
-            this.setUsesAuthentication(dedicatedServerProperties.onlineMode);
-            this.setPreventProxyConnections(dedicatedServerProperties.preventProxyConnections);
-            this.setLocalIp(dedicatedServerProperties.serverIp);
+            this.setUsesAuthentication(dedicatedserverproperties.onlineMode);
+            this.setPreventProxyConnections(dedicatedserverproperties.preventProxyConnections);
+            this.setLocalIp(dedicatedserverproperties.serverIp);
         }
+        // Spigot start
+        this.setPlayerList((PlayerList) (new DedicatedPlayerList(this, this.registryHolder, this.playerDataStorage)));
+        org.spigotmc.SpigotConfig.init((java.io.File) options.valueOf("spigot-settings"));
+        org.spigotmc.SpigotConfig.registerCommands();
+        // Spigot end
+        // Paper start - moved up to right after PlayerList creation but before file load/save
+        if (this.convertOldUsers()) {
+            this.getProfileCache().save(false); // Paper
+        }
+        this.getPlayerList().loadAndSaveFiles(); // Must be after convertNames
+        // Paper end
+        // Paper start
+        try {
+            com.destroystokyo.paper.PaperConfig.init((java.io.File) options.valueOf("paper-settings"));
+        } catch (Exception e) {
+            DedicatedServer.LOGGER.error("Unable to load server configuration", e);
+            return false;
+        }
+        com.destroystokyo.paper.PaperConfig.registerCommands();
+        com.destroystokyo.paper.VersionHistoryManager.INSTANCE.getClass(); // load version history now
+        io.papermc.paper.brigadier.PaperBrigadierProviderImpl.INSTANCE.getClass(); // init PaperBrigadierProvider
+        io.papermc.paper.util.ObfHelper.INSTANCE.getClass(); // load mappings for stacktrace deobf and etc.
+        // Paper end
+
+        this.setPvpAllowed(dedicatedserverproperties.pvp);
+        this.setFlightAllowed(dedicatedserverproperties.allowFlight);
+        this.setResourcePack(dedicatedserverproperties.resourcePack, this.getPackHash());
+        this.setMotd(dedicatedserverproperties.motd);
+        super.setPlayerIdleTimeout((Integer) dedicatedserverproperties.playerIdleTimeout.get());
+        this.setEnforceWhitelist(dedicatedserverproperties.enforceWhitelist);
+        // this.worldData.setGameType(dedicatedserverproperties.gamemode); // CraftBukkit - moved to world loading
+        DedicatedServer.LOGGER.info("Default game type: {}", dedicatedserverproperties.gamemode);
+        // Paper start - Unix domain socket support
+        java.net.SocketAddress bindAddress;
+        if (this.getLocalIp().startsWith("unix:")) {
+            if (!io.netty.channel.epoll.Epoll.isAvailable()) {
+                DedicatedServer.LOGGER.fatal("**** INVALID CONFIGURATION!");
+                DedicatedServer.LOGGER.fatal("You are trying to use a Unix domain socket but you're not on a supported OS.");
+                return false;
+            } else if (!com.destroystokyo.paper.PaperConfig.velocitySupport && !org.spigotmc.SpigotConfig.bungee) {
+                DedicatedServer.LOGGER.fatal("**** INVALID CONFIGURATION!");
+                DedicatedServer.LOGGER.fatal("Unix domain sockets require IPs to be forwarded from a proxy.");
+                return false;
+            }
+            bindAddress = new io.netty.channel.unix.DomainSocketAddress(this.getLocalIp().substring("unix:".length()));
+        } else {
+        InetAddress inetaddress = null;
 
-        this.setPvpAllowed(dedicatedServerProperties.pvp);
-        this.setFlightAllowed(dedicatedServerProperties.allowFlight);
-        this.setResourcePack(dedicatedServerProperties.resourcePack, this.getPackHash());
-        this.setMotd(dedicatedServerProperties.motd);
-        super.setPlayerIdleTimeout(dedicatedServerProperties.playerIdleTimeout.get());
-        this.setEnforceWhitelist(dedicatedServerProperties.enforceWhitelist);
-        this.worldData.setGameType(dedicatedServerProperties.gamemode);
-        LOGGER.info("Default game type: {}", (Object)dedicatedServerProperties.gamemode);
-        InetAddress inetAddress = null;
         if (!this.getLocalIp().isEmpty()) {
-            inetAddress = InetAddress.getByName(this.getLocalIp());
+            inetaddress = InetAddress.getByName(this.getLocalIp());
         }
 
         if (this.getPort() < 0) {
-            this.setPort(dedicatedServerProperties.serverPort);
+            this.setPort(dedicatedserverproperties.serverPort);
+        }
+        bindAddress = new java.net.InetSocketAddress(inetaddress, this.getPort());
         }
+        // Paper end
 
         this.initializeKeyPair();
-        LOGGER.info("Starting Minecraft server on {}:{}", this.getLocalIp().isEmpty() ? "*" : this.getLocalIp(), this.getPort());
+        DedicatedServer.LOGGER.info("Starting Minecraft server on {}:{}", this.getLocalIp().isEmpty() ? "*" : this.getLocalIp(), this.getPort());
 
         try {
-            this.getConnection().startTcpServerListener(inetAddress, this.getPort());
-        } catch (IOException var10) {
-            LOGGER.warn("**** FAILED TO BIND TO PORT!");
-            LOGGER.warn("The exception was: {}", (Object)var10.toString());
-            LOGGER.warn("Perhaps a server is already running on that port?");
+            this.getConnection().bind(bindAddress); // Paper - Unix domain socket support
+        } catch (IOException ioexception) {
+            DedicatedServer.LOGGER.warn("**** FAILED TO BIND TO PORT!");
+            DedicatedServer.LOGGER.warn("The exception was: {}", ioexception.toString());
+            DedicatedServer.LOGGER.warn("Perhaps a server is already running on that port?");
             return false;
         }
 
+        // CraftBukkit start
+        // this.a((PlayerList) (new DedicatedPlayerList(this, this.customRegistry, this.worldNBTStorage))); // Spigot - moved up
+        server.loadPlugins();
+        server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.STARTUP);
+        // CraftBukkit end
+
         if (!this.usesAuthentication()) {
-            LOGGER.warn("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
-            LOGGER.warn("The server will make no attempt to authenticate usernames. Beware.");
-            LOGGER.warn("While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.");
-            LOGGER.warn("To change this, set \"online-mode\" to \"true\" in the server.properties file.");
+            DedicatedServer.LOGGER.warn("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
+            DedicatedServer.LOGGER.warn("The server will make no attempt to authenticate usernames. Beware.");
+            // Spigot start
+            if (org.spigotmc.SpigotConfig.bungee) {
+                DedicatedServer.LOGGER.warn("Whilst this makes it possible to use BungeeCord, unless access to your server is properly restricted, it also opens up the ability for hackers to connect with any username they choose.");
+                DedicatedServer.LOGGER.warn("Please see http://www.spigotmc.org/wiki/firewall-guide/ for further information.");
+            } else {
+                DedicatedServer.LOGGER.warn("While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.");
+            }
+            // Spigot end
+            DedicatedServer.LOGGER.warn("To change this, set \"online-mode\" to \"true\" in the server.properties file.");
         }
 
-        if (this.convertOldUsers()) {
-            this.getProfileCache().save();
-        }
 
         if (!OldUsersConverter.serverReadyAfterUserconversion(this)) {
             return false;
         } else {
-            this.setPlayerList(new DedicatedPlayerList(this, this.registryHolder, this.playerDataStorage));
-            long l = Util.getNanos();
+            // this.a((PlayerList) (new DedicatedPlayerList(this, this.customRegistry, this.worldNBTStorage))); // CraftBukkit - moved up
+            long i = Util.getNanos();
+
             SkullBlockEntity.setProfileCache(this.getProfileCache());
             SkullBlockEntity.setSessionService(this.getSessionService());
-            SkullBlockEntity.setMainThreadExecutor(this);
+            SkullBlockEntity.setMainThreadExecutor((Executor) this);
             GameProfileCache.setUsesAuthentication(this.usesAuthentication());
-            LOGGER.info("Preparing level \"{}\"", (Object)this.getLevelIdName());
-            this.loadLevel();
-            long m = Util.getNanos() - l;
-            String string = String.format(Locale.ROOT, "%.3fs", (double)m / 1.0E9D);
-            LOGGER.info("Done ({})! For help, type \"help\"", (Object)string);
-            if (dedicatedServerProperties.announcePlayerAchievements != null) {
-                this.getGameRules().getRule(GameRules.RULE_ANNOUNCE_ADVANCEMENTS).set(dedicatedServerProperties.announcePlayerAchievements, this);
+            DedicatedServer.LOGGER.info("Preparing level \"{}\"", this.getLevelIdName());
+            this.loadWorld(storageSource.getLevelId()); // CraftBukkit
+            long j = Util.getNanos() - i;
+            String s = String.format(Locale.ROOT, "%.3fs", (double) j / 1.0E9D);
+
+            //DedicatedServer.LOGGER.info("Done ({})! For help, type \"help\"", s); // Paper moved to after init
+            if (dedicatedserverproperties.announcePlayerAchievements != null) {
+                ((GameRules.BooleanValue) this.getGameRules().getRule(GameRules.RULE_ANNOUNCE_ADVANCEMENTS)).set(dedicatedserverproperties.announcePlayerAchievements, (MinecraftServer) this);
             }
 
-            if (dedicatedServerProperties.enableQuery) {
-                LOGGER.info("Starting GS4 status listener");
-                this.queryThreadGs4 = QueryThreadGs4.create(this);
+            if (dedicatedserverproperties.enableQuery) {
+                DedicatedServer.LOGGER.info("Starting GS4 status listener");
+                this.queryThreadGs4 = QueryThreadGs4.create((ServerInterface) this);
             }
 
-            if (dedicatedServerProperties.enableRcon) {
-                LOGGER.info("Starting remote control listener");
-                this.rconThread = RconThread.create(this);
+            if (dedicatedserverproperties.enableRcon) {
+                DedicatedServer.LOGGER.info("Starting remote control listener");
+                this.rconThread = RconThread.create((ServerInterface) this);
+                this.remoteConsole = new org.bukkit.craftbukkit.v1_17_R1.command.CraftRemoteConsoleCommandSender(this.rconConsoleSource); // CraftBukkit
             }
 
-            if (this.getMaxTickLength() > 0L) {
-                Thread thread2 = new Thread(new ServerWatchdog(this));
-                thread2.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandlerWithName(LOGGER));
-                thread2.setName("Server Watchdog");
-                thread2.setDaemon(true);
-                thread2.start();
+            if (false && this.getMaxTickLength() > 0L) {  // Spigot - disable
+                Thread thread1 = new Thread(new ServerWatchdog(this));
+
+                thread1.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandlerWithName(DedicatedServer.LOGGER));
+                thread1.setName("Server Watchdog");
+                thread1.setDaemon(true);
+                thread1.start();
             }
 
             Items.AIR.fillItemCategory(CreativeModeTab.TAB_SEARCH, NonNullList.create());
-            if (dedicatedServerProperties.enableJmxMonitoring) {
-                MinecraftServerStatistics.registerJmxMonitoring(this);
-                LOGGER.info("JMX monitoring enabled");
+            if (dedicatedserverproperties.enableJmxMonitoring) {
+                MinecraftServerStatistics.registerJmxMonitoring((MinecraftServer) this);
+                DedicatedServer.LOGGER.info("JMX monitoring enabled");
             }
 
             return true;
         }
     }
 
+    @Override
     public boolean isSpawningAnimals() {
         return this.getProperties().spawnAnimals && super.isSpawningAnimals();
     }
 
+    @Override
     public boolean isSpawningMonsters() {
         return this.settings.getProperties().spawnMonsters && super.isSpawningMonsters();
     }
 
+    @Override
     public boolean areNpcsEnabled() {
         return this.settings.getProperties().spawnNpcs && super.areNpcsEnabled();
     }
 
     public String getPackHash() {
-        DedicatedServerProperties dedicatedServerProperties = this.settings.getProperties();
-        String string;
-        if (!dedicatedServerProperties.resourcePackSha1.isEmpty()) {
-            string = dedicatedServerProperties.resourcePackSha1;
-            if (!Strings.isNullOrEmpty(dedicatedServerProperties.resourcePackHash)) {
-                LOGGER.warn("resource-pack-hash is deprecated and found along side resource-pack-sha1. resource-pack-hash will be ignored.");
+        DedicatedServerProperties dedicatedserverproperties = this.settings.getProperties();
+        String s;
+
+        if (!dedicatedserverproperties.resourcePackSha1.isEmpty()) {
+            s = dedicatedserverproperties.resourcePackSha1;
+            if (!Strings.isNullOrEmpty(dedicatedserverproperties.resourcePackHash)) {
+                DedicatedServer.LOGGER.warn("resource-pack-hash is deprecated and found along side resource-pack-sha1. resource-pack-hash will be ignored.");
             }
-        } else if (!Strings.isNullOrEmpty(dedicatedServerProperties.resourcePackHash)) {
-            LOGGER.warn("resource-pack-hash is deprecated. Please use resource-pack-sha1 instead.");
-            string = dedicatedServerProperties.resourcePackHash;
+        } else if (!Strings.isNullOrEmpty(dedicatedserverproperties.resourcePackHash)) {
+            DedicatedServer.LOGGER.warn("resource-pack-hash is deprecated. Please use resource-pack-sha1 instead.");
+            s = dedicatedserverproperties.resourcePackHash;
         } else {
-            string = "";
+            s = "";
         }
 
-        if (!string.isEmpty() && !SHA1.matcher(string).matches()) {
-            LOGGER.warn("Invalid sha1 for ressource-pack-sha1");
+        if (!s.isEmpty() && !DedicatedServer.SHA1.matcher(s).matches()) {
+            DedicatedServer.LOGGER.warn("Invalid sha1 for ressource-pack-sha1");
         }
 
-        if (!dedicatedServerProperties.resourcePack.isEmpty() && string.isEmpty()) {
-            LOGGER.warn("You specified a resource pack without providing a sha1 hash. Pack will be updated on the client only if you change the name of the pack.");
+        if (!dedicatedserverproperties.resourcePack.isEmpty() && s.isEmpty()) {
+            DedicatedServer.LOGGER.warn("You specified a resource pack without providing a sha1 hash. Pack will be updated on the client only if you change the name of the pack.");
         }
 
-        return string;
+        return s;
     }
 
+    @Override
     public DedicatedServerProperties getProperties() {
         return this.settings.getProperties();
     }
 
+    @Override
     public void forceDifficulty() {
-        this.setDifficulty(this.getProperties().difficulty, true);
+        //this.a(this.getDedicatedServerProperties().difficulty, true); // Paper - Don't overwrite level.dat's difficulty, keep current
     }
 
+    @Override
     public boolean isHardcore() {
         return this.getProperties().hardcore;
     }
 
+    @Override
     public SystemReport fillServerSystemReport(SystemReport details) {
         details.setDetail("Is Modded", () -> {
-            return this.getModdedStatus().orElse("Unknown (can't tell)");
+            return (String) this.getModdedStatus().orElse("Unknown (can't tell)");
         });
         details.setDetail("Type", () -> {
             return "Dedicated Server (map_server.txt)";
@@ -268,45 +410,49 @@
         return details;
     }
 
+    @Override
     public void dumpServerProperties(Path file) throws IOException {
-        DedicatedServerProperties dedicatedServerProperties = this.getProperties();
-        Writer writer = Files.newBufferedWriter(file);
+        DedicatedServerProperties dedicatedserverproperties = this.getProperties();
+        BufferedWriter bufferedwriter = Files.newBufferedWriter(file);
 
         try {
-            writer.write(String.format("sync-chunk-writes=%s%n", dedicatedServerProperties.syncChunkWrites));
-            writer.write(String.format("gamemode=%s%n", dedicatedServerProperties.gamemode));
-            writer.write(String.format("spawn-monsters=%s%n", dedicatedServerProperties.spawnMonsters));
-            writer.write(String.format("entity-broadcast-range-percentage=%d%n", dedicatedServerProperties.entityBroadcastRangePercentage));
-            writer.write(String.format("max-world-size=%d%n", dedicatedServerProperties.maxWorldSize));
-            writer.write(String.format("spawn-npcs=%s%n", dedicatedServerProperties.spawnNpcs));
-            writer.write(String.format("view-distance=%d%n", dedicatedServerProperties.viewDistance));
-            writer.write(String.format("spawn-animals=%s%n", dedicatedServerProperties.spawnAnimals));
-            writer.write(String.format("generate-structures=%s%n", dedicatedServerProperties.getWorldGenSettings(this.registryHolder).generateFeatures()));
-            writer.write(String.format("use-native=%s%n", dedicatedServerProperties.useNativeTransport));
-            writer.write(String.format("rate-limit=%d%n", dedicatedServerProperties.rateLimitPacketsPerSecond));
-        } catch (Throwable var7) {
-            if (writer != null) {
+            bufferedwriter.write(String.format("sync-chunk-writes=%s%n", dedicatedserverproperties.syncChunkWrites));
+            bufferedwriter.write(String.format("gamemode=%s%n", dedicatedserverproperties.gamemode));
+            bufferedwriter.write(String.format("spawn-monsters=%s%n", dedicatedserverproperties.spawnMonsters));
+            bufferedwriter.write(String.format("entity-broadcast-range-percentage=%d%n", dedicatedserverproperties.entityBroadcastRangePercentage));
+            bufferedwriter.write(String.format("max-world-size=%d%n", dedicatedserverproperties.maxWorldSize));
+            bufferedwriter.write(String.format("spawn-npcs=%s%n", dedicatedserverproperties.spawnNpcs));
+            bufferedwriter.write(String.format("view-distance=%d%n", dedicatedserverproperties.viewDistance));
+            bufferedwriter.write(String.format("spawn-animals=%s%n", dedicatedserverproperties.spawnAnimals));
+            bufferedwriter.write(String.format("generate-structures=%s%n", dedicatedserverproperties.getWorldGenSettings((RegistryAccess) this.registryHolder).generateFeatures()));
+            bufferedwriter.write(String.format("use-native=%s%n", dedicatedserverproperties.useNativeTransport));
+            bufferedwriter.write(String.format("rate-limit=%d%n", dedicatedserverproperties.rateLimitPacketsPerSecond));
+        } catch (Throwable throwable) {
+            if (bufferedwriter != null) {
                 try {
-                    writer.close();
-                } catch (Throwable var6) {
-                    var7.addSuppressed(var6);
+                    bufferedwriter.close();
+                } catch (Throwable throwable1) {
+                    throwable.addSuppressed(throwable1);
                 }
             }
 
-            throw var7;
+            throw throwable;
         }
 
-        if (writer != null) {
-            writer.close();
+        if (bufferedwriter != null) {
+            bufferedwriter.close();
         }
 
     }
 
+    @Override
     public Optional<String> getModdedStatus() {
-        String string = this.getServerModName();
-        return !"vanilla".equals(string) ? Optional.of("Definitely; Server brand changed to '" + string + "'") : Optional.empty();
+        String s = this.getServerModName();
+
+        return !"vanilla".equals(s) ? Optional.of("Definitely; Server brand changed to '" + s + "'") : Optional.empty();
     }
 
+    @Override
     public void onServerExit() {
         if (this.textFilterClient != null) {
             this.textFilterClient.close();
@@ -317,74 +463,101 @@
         }
 
         if (this.rconThread != null) {
-            this.rconThread.stop();
+            //this.remoteControlListener.b(); // Paper - don't wait for remote connections
         }
 
         if (this.queryThreadGs4 != null) {
-            this.queryThreadGs4.stop();
+            //this.remoteStatusListener.b(); // Paper - don't wait for remote connections
         }
 
+        hasFullyShutdown = true; // Paper
+        System.exit(this.abnormalExit ? 70 : 0); // CraftBukkit // Paper
     }
 
+    @Override
     public void tickChildren(BooleanSupplier shouldKeepTicking) {
         super.tickChildren(shouldKeepTicking);
         this.handleConsoleInputs();
     }
 
+    @Override
     public boolean isNetherEnabled() {
         return this.getProperties().allowNether;
     }
 
+    @Override
     public void populateSnooper(Snooper snooper) {
-        snooper.setDynamicData("whitelist_enabled", this.getPlayerList().isUsingWhitelist());
-        snooper.setDynamicData("whitelist_count", this.getPlayerList().getWhiteListNames().length);
+        snooper.setDynamicData("whitelist_enabled", (Object) this.getPlayerList().isUsingWhitelist());
+        snooper.setDynamicData("whitelist_count", (Object) this.getPlayerList().getWhiteListNames().length);
         super.populateSnooper(snooper);
     }
 
+    @Override
     public boolean isSnooperEnabled() {
         return this.getProperties().snooperEnabled;
     }
 
     public void handleConsoleInput(String command, CommandSourceStack commandSource) {
-        this.consoleInput.add(new ConsoleInput(command, commandSource));
+        this.serverCommandQueue.add(new ConsoleInput(command, commandSource));
     }
 
     public void handleConsoleInputs() {
-        while(!this.consoleInput.isEmpty()) {
-            ConsoleInput consoleInput = this.consoleInput.remove(0);
-            this.getCommands().performCommand(consoleInput.source, consoleInput.msg);
+        MinecraftTimings.serverCommandTimer.startTiming(); // Spigot
+        // Paper start - use proper queue
+        ConsoleInput servercommand;
+        while ((servercommand = this.serverCommandQueue.poll()) != null) {
+            // Paper end
+
+            // CraftBukkit start - ServerCommand for preprocessing
+            ServerCommandEvent event = new ServerCommandEvent(console, servercommand.msg);
+            server.getPluginManager().callEvent(event);
+            if (event.isCancelled()) continue;
+            servercommand = new ConsoleInput(event.getCommand(), servercommand.source);
+
+            // this.getCommandDispatcher().a(servercommand.source, servercommand.command); // Called in dispatchServerCommand
+            server.dispatchServerCommand(console, servercommand);
+            // CraftBukkit end
         }
 
+        MinecraftTimings.serverCommandTimer.stopTiming(); // Spigot
     }
 
+    @Override
     public boolean isDedicatedServer() {
         return true;
     }
 
+    @Override
     public int getRateLimitPacketsPerSecond() {
         return this.getProperties().rateLimitPacketsPerSecond;
     }
 
+    @Override
     public boolean isEpollEnabled() {
         return this.getProperties().useNativeTransport;
     }
 
+    @Override
     public DedicatedPlayerList getPlayerList() {
-        return (DedicatedPlayerList)super.getPlayerList();
+        return (DedicatedPlayerList) super.getPlayerList();
     }
 
+    @Override
     public boolean isPublished() {
         return true;
     }
 
+    @Override
     public String getServerIp() {
         return this.getLocalIp();
     }
 
+    @Override
     public int getServerPort() {
         return this.getPort();
     }
 
+    @Override
     public String getServerName() {
         return this.getMotd();
     }
@@ -396,20 +569,24 @@
 
     }
 
+    @Override
     public boolean hasGui() {
         return this.gui != null;
     }
 
+    @Override
     public boolean isCommandBlockEnabled() {
         return this.getProperties().enableCommandBlock;
     }
 
+    @Override
     public int getSpawnProtectionRadius() {
         return this.getProperties().spawnProtection;
     }
 
+    @Override
     public boolean isUnderSpawnProtection(ServerLevel world, BlockPos pos, Player player) {
-        if (world.dimension() != Level.OVERWORLD) {
+        if (world.dimension() != net.minecraft.world.level.Level.OVERWORLD) {
             return false;
         } else if (this.getPlayerList().getOps().isEmpty()) {
             return false;
@@ -418,112 +595,124 @@
         } else if (this.getSpawnProtectionRadius() <= 0) {
             return false;
         } else {
-            BlockPos blockPos = world.getSharedSpawnPos();
-            int i = Mth.abs(pos.getX() - blockPos.getX());
-            int j = Mth.abs(pos.getZ() - blockPos.getZ());
+            BlockPos blockposition1 = world.getSharedSpawnPos();
+            int i = Mth.abs(pos.getX() - blockposition1.getX());
+            int j = Mth.abs(pos.getZ() - blockposition1.getZ());
             int k = Math.max(i, j);
+
             return k <= this.getSpawnProtectionRadius();
         }
     }
 
+    @Override
     public boolean repliesToStatus() {
         return this.getProperties().enableStatus;
     }
 
+    @Override
     public int getOperatorUserPermissionLevel() {
         return this.getProperties().opPermissionLevel;
     }
 
+    @Override
     public int getFunctionCompilationLevel() {
         return this.getProperties().functionPermissionLevel;
     }
 
+    @Override
     public void setPlayerIdleTimeout(int playerIdleTimeout) {
         super.setPlayerIdleTimeout(playerIdleTimeout);
-        this.settings.update((dedicatedServerProperties) -> {
-            return dedicatedServerProperties.playerIdleTimeout.update(this.registryAccess(), playerIdleTimeout);
+        this.settings.update((dedicatedserverproperties) -> {
+            return (DedicatedServerProperties) dedicatedserverproperties.playerIdleTimeout.update(this.registryAccess(), playerIdleTimeout);
         });
     }
 
+    @Override
     public boolean shouldRconBroadcast() {
         return this.getProperties().broadcastRconToOps;
     }
 
+    @Override
     public boolean shouldInformAdmins() {
         return this.getProperties().broadcastConsoleToOps;
     }
 
+    @Override
     public int getAbsoluteMaxWorldSize() {
         return this.getProperties().maxWorldSize;
     }
 
+    @Override
     public int getCompressionThreshold() {
         return this.getProperties().networkCompressionThreshold;
     }
 
     protected boolean convertOldUsers() {
-        boolean bl = false;
+        boolean flag = false;
 
-        for(int i = 0; !bl && i <= 2; ++i) {
+        int i;
+
+        for (i = 0; !flag && i <= 2; ++i) {
             if (i > 0) {
-                LOGGER.warn("Encountered a problem while converting the user banlist, retrying in a few seconds");
+                DedicatedServer.LOGGER.warn("Encountered a problem while converting the user banlist, retrying in a few seconds");
                 this.waitForRetry();
             }
 
-            bl = OldUsersConverter.convertUserBanlist(this);
+            flag = OldUsersConverter.convertUserBanlist((MinecraftServer) this);
         }
 
-        boolean bl2 = false;
+        boolean flag1 = false;
 
-        for(int var7 = 0; !bl2 && var7 <= 2; ++var7) {
-            if (var7 > 0) {
-                LOGGER.warn("Encountered a problem while converting the ip banlist, retrying in a few seconds");
+        for (i = 0; !flag1 && i <= 2; ++i) {
+            if (i > 0) {
+                DedicatedServer.LOGGER.warn("Encountered a problem while converting the ip banlist, retrying in a few seconds");
                 this.waitForRetry();
             }
 
-            bl2 = OldUsersConverter.convertIpBanlist(this);
+            flag1 = OldUsersConverter.convertIpBanlist((MinecraftServer) this);
         }
 
-        boolean bl3 = false;
+        boolean flag2 = false;
 
-        for(int var8 = 0; !bl3 && var8 <= 2; ++var8) {
-            if (var8 > 0) {
-                LOGGER.warn("Encountered a problem while converting the op list, retrying in a few seconds");
+        for (i = 0; !flag2 && i <= 2; ++i) {
+            if (i > 0) {
+                DedicatedServer.LOGGER.warn("Encountered a problem while converting the op list, retrying in a few seconds");
                 this.waitForRetry();
             }
 
-            bl3 = OldUsersConverter.convertOpsList(this);
+            flag2 = OldUsersConverter.convertOpsList(this);
         }
 
-        boolean bl4 = false;
+        boolean flag3 = false;
 
-        for(int var9 = 0; !bl4 && var9 <= 2; ++var9) {
-            if (var9 > 0) {
-                LOGGER.warn("Encountered a problem while converting the whitelist, retrying in a few seconds");
+        for (i = 0; !flag3 && i <= 2; ++i) {
+            if (i > 0) {
+                DedicatedServer.LOGGER.warn("Encountered a problem while converting the whitelist, retrying in a few seconds");
                 this.waitForRetry();
             }
 
-            bl4 = OldUsersConverter.convertWhiteList(this);
+            flag3 = OldUsersConverter.convertWhiteList(this);
         }
 
-        boolean bl5 = false;
+        boolean flag4 = false;
 
-        for(int var10 = 0; !bl5 && var10 <= 2; ++var10) {
-            if (var10 > 0) {
-                LOGGER.warn("Encountered a problem while converting the player save files, retrying in a few seconds");
+        for (i = 0; !flag4 && i <= 2; ++i) {
+            if (i > 0) {
+                DedicatedServer.LOGGER.warn("Encountered a problem while converting the player save files, retrying in a few seconds");
                 this.waitForRetry();
             }
 
-            bl5 = OldUsersConverter.convertPlayers(this);
+            flag4 = OldUsersConverter.convertPlayers(this);
         }
 
-        return bl || bl2 || bl3 || bl4 || bl5;
+        return flag || flag1 || flag2 || flag3 || flag4;
     }
 
     private void waitForRetry() {
         try {
             Thread.sleep(5000L);
-        } catch (InterruptedException var2) {
+        } catch (InterruptedException interruptedexception) {
+            ;
         }
     }
 
@@ -531,66 +720,138 @@
         return this.getProperties().maxTickTime;
     }
 
+    @Override
     public String getPluginNames() {
-        return "";
+        // CraftBukkit start - Whole method
+        StringBuilder result = new StringBuilder();
+        org.bukkit.plugin.Plugin[] plugins = server.getPluginManager().getPlugins();
+
+        result.append(server.getName());
+        result.append(" on Bukkit ");
+        result.append(server.getBukkitVersion());
+
+        if (plugins.length > 0 && server.getQueryPlugins()) {
+            result.append(": ");
+
+            for (int i = 0; i < plugins.length; i++) {
+                if (i > 0) {
+                    result.append("; ");
+                }
+
+                result.append(plugins[i].getDescription().getName());
+                result.append(" ");
+                result.append(plugins[i].getDescription().getVersion().replaceAll(";", ","));
+            }
+        }
+
+        return result.toString();
+        // CraftBukkit end
     }
 
+    @Override
     public String runCommand(String command) {
+        Waitable[] waitableArray = new Waitable[1];
         this.rconConsoleSource.prepareForCommand();
         this.executeBlocking(() -> {
-            this.getCommands().performCommand(this.rconConsoleSource.createCommandSourceStack(), command);
+            // CraftBukkit start - fire RemoteServerCommandEvent
+            RemoteServerCommandEvent event = new RemoteServerCommandEvent(remoteConsole, command);
+            server.getPluginManager().callEvent(event);
+            if (event.isCancelled()) {
+                return;
+            }
+            // Paper start
+            if (command.toLowerCase().startsWith("timings") && command.toLowerCase().matches("timings (report|paste|get|merged|seperate)")) {
+                org.bukkit.command.BufferedCommandSender sender = new org.bukkit.command.BufferedCommandSender();
+                Waitable<String> waitable = new Waitable<String>() {
+                    @Override
+                    protected String evaluate() {
+                        return sender.getBuffer();
+                    }
+                };
+                waitableArray[0] = waitable;
+                co.aikar.timings.Timings.generateReport(new co.aikar.timings.TimingsReportListener(sender, waitable));
+            } else {
+            // Paper end
+            ConsoleInput serverCommand = new ConsoleInput(event.getCommand(), this.rconConsoleSource.createCommandSourceStack());
+            server.dispatchServerCommand(remoteConsole, serverCommand);
+            } // Paper
+            // CraftBukkit end
         });
+        // Paper start
+        if (waitableArray[0] != null) {
+            //noinspection unchecked
+            Waitable<String> waitable = waitableArray[0];
+            try {
+                return waitable.get();
+            } catch (java.util.concurrent.ExecutionException e) {
+                throw new RuntimeException("Exception processing rcon command " + command, e.getCause());
+            } catch (InterruptedException e) {
+                Thread.currentThread().interrupt(); // Maintain interrupted state
+                throw new RuntimeException("Interrupted processing rcon command " + command, e);
+            }
+
+        }
+        // Paper end
         return this.rconConsoleSource.getCommandResponse();
     }
 
     public void storeUsingWhiteList(boolean useWhitelist) {
-        this.settings.update((dedicatedServerProperties) -> {
-            return dedicatedServerProperties.whiteList.update(this.registryAccess(), useWhitelist);
+        this.settings.update((dedicatedserverproperties) -> {
+            return (DedicatedServerProperties) dedicatedserverproperties.whiteList.update(this.registryAccess(), useWhitelist);
         });
     }
 
+    @Override
     public void stopServer() {
         super.stopServer();
-        Util.shutdownExecutors();
+        //SystemUtils.h(); // Paper - moved into super
     }
 
+    @Override
     public boolean isSingleplayerOwner(GameProfile profile) {
         return false;
     }
 
+    @Override
     public int getScaledTrackingDistance(int initialDistance) {
         return this.getProperties().entityBroadcastRangePercentage * initialDistance / 100;
     }
 
+    @Override
     public String getLevelIdName() {
         return this.storageSource.getLevelId();
     }
 
+    @Override
     public boolean forceSynchronousWrites() {
         return this.settings.getProperties().syncChunkWrites;
     }
 
+    @Override
     public TextFilter createTextFilterForPlayer(ServerPlayer player) {
         return this.textFilterClient != null ? this.textFilterClient.createContext(player.getGameProfile()) : TextFilter.DUMMY;
     }
 
+    @Override
     public boolean isResourcePackRequired() {
         return this.settings.getProperties().requireResourcePack;
     }
 
     @Nullable
+    @Override
     public GameType getForcedGameType() {
         return this.settings.getProperties().forceGameMode ? this.worldData.getGameType() : null;
     }
 
     @Nullable
     private static Component parseResourcePackPrompt(DedicatedServerSettings propertiesLoader) {
-        String string = propertiesLoader.getProperties().resourcePackPrompt;
-        if (!Strings.isNullOrEmpty(string)) {
+        String s = propertiesLoader.getProperties().resourcePackPrompt;
+
+        if (!Strings.isNullOrEmpty(s)) {
             try {
-                return Component.Serializer.fromJson(string);
-            } catch (Exception var3) {
-                LOGGER.warn("Failed to parse resource pack prompt '{}'", string, var3);
+                return Component.Serializer.fromJson(s);
+            } catch (Exception exception) {
+                DedicatedServer.LOGGER.warn("Failed to parse resource pack prompt '{}'", s, exception);
             }
         }
 
@@ -598,7 +859,19 @@
     }
 
     @Nullable
+    @Override
     public Component getResourcePackPrompt() {
         return this.resourcePackPrompt;
     }
+
+    // CraftBukkit start
+    public boolean isDebugging() {
+        return this.getProperties().debug;
+    }
+
+    @Override
+    public CommandSender getBukkitSender(CommandSourceStack wrapper) {
+        return console;
+    }
+    // CraftBukkit end
 }
