--- a/net/minecraft/world/level/block/LightningRodBlock.java
+++ b/net/minecraft/world/level/block/LightningRodBlock.java
@@ -3,6 +3,7 @@
 import java.util.Random;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
+import net.minecraft.core.Vec3i;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
@@ -20,6 +21,7 @@
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.StateDefinition;
@@ -30,8 +32,13 @@
 import net.minecraft.world.level.material.Fluids;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.Vec3;
+// CraftBukkit start
+import org.bukkit.craftbukkit.v1_17_R1.block.CraftBlock;
+import org.bukkit.event.block.BlockRedstoneEvent;
+// CraftBukkit end
 
 public class LightningRodBlock extends RodBlock implements SimpleWaterloggedBlock {
+
     public static final BooleanProperty WATERLOGGED = BlockStateProperties.WATERLOGGED;
     public static final BooleanProperty POWERED = BlockStateProperties.POWERED;
     private static final int ACTIVATION_TICKS = 8;
@@ -40,60 +47,81 @@
 
     public LightningRodBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState(this.stateDefinition.any().setValue(FACING, Direction.UP).setValue(WATERLOGGED, Boolean.valueOf(false)).setValue(POWERED, Boolean.valueOf(false)));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(LightningRodBlock.FACING, Direction.UP)).setValue(LightningRodBlock.WATERLOGGED, false)).setValue(LightningRodBlock.POWERED, false));
     }
 
+    @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
-        FluidState fluidState = ctx.getLevel().getFluidState(ctx.getClickedPos());
-        boolean bl = fluidState.getType() == Fluids.WATER;
-        return this.defaultBlockState().setValue(FACING, ctx.getClickedFace()).setValue(WATERLOGGED, Boolean.valueOf(bl));
+        FluidState fluid = ctx.getLevel().getFluidState(ctx.getClickedPos());
+        boolean flag = fluid.getType() == Fluids.WATER;
+
+        return (BlockState) ((BlockState) this.defaultBlockState().setValue(LightningRodBlock.FACING, ctx.getClickedFace())).setValue(LightningRodBlock.WATERLOGGED, flag);
     }
 
+    @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
-            world.getLiquidTicks().scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+        if ((Boolean) state.getValue(LightningRodBlock.WATERLOGGED)) {
+            world.getLiquidTicks().scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay((LevelReader) world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
     }
 
+    @Override
     public FluidState getFluidState(BlockState state) {
-        return state.getValue(WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(state);
+        return (Boolean) state.getValue(LightningRodBlock.WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(state);
     }
 
+    @Override
     public int getSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return state.getValue(POWERED) ? 15 : 0;
+        return (Boolean) state.getValue(LightningRodBlock.POWERED) ? 15 : 0;
     }
 
+    @Override
     public int getDirectSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return state.getValue(POWERED) && state.getValue(FACING) == direction ? 15 : 0;
+        return (Boolean) state.getValue(LightningRodBlock.POWERED) && state.getValue(LightningRodBlock.FACING) == direction ? 15 : 0;
     }
 
     public void onLightningStrike(BlockState state, Level world, BlockPos pos) {
-        world.setBlock(pos, state.setValue(POWERED, Boolean.valueOf(true)), 3);
+        // CraftBukkit start
+        boolean powered = state.getValue(LightningRodBlock.POWERED);
+        int old = (powered) ? 15 : 0;
+        int current = (!powered) ? 15 : 0;
+
+        BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(CraftBlock.at(world, pos), old, current);
+        world.getCraftServer().getPluginManager().callEvent(eventRedstone);
+
+        if (eventRedstone.getNewCurrent() <= 0) {
+            return;
+        }
+        // CraftBukkit end
+        world.setBlock(pos, (BlockState) state.setValue(LightningRodBlock.POWERED, true), 3);
         this.updateNeighbours(state, world, pos);
         world.getBlockTicks().scheduleTick(pos, this, 8);
-        world.levelEvent(3002, pos, state.getValue(FACING).getAxis().ordinal());
+        world.levelEvent(3002, pos, ((Direction) state.getValue(LightningRodBlock.FACING)).getAxis().ordinal());
     }
 
     private void updateNeighbours(BlockState state, Level world, BlockPos pos) {
-        world.updateNeighborsAt(pos.relative(state.getValue(FACING).getOpposite()), this);
+        world.updateNeighborsAt(pos.relative(((Direction) state.getValue(LightningRodBlock.FACING)).getOpposite()), this);
     }
 
+    @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, Random random) {
-        world.setBlock(pos, state.setValue(POWERED, Boolean.valueOf(false)), 3);
+        world.setBlock(pos, (BlockState) state.setValue(LightningRodBlock.POWERED, false), 3);
         this.updateNeighbours(state, world, pos);
     }
 
+    @Override
     public void animateTick(BlockState state, Level world, BlockPos pos, Random random) {
-        if (world.isThundering() && (long)world.random.nextInt(200) <= world.getGameTime() % 200L && pos.getY() == world.getHeight(Heightmap.Types.WORLD_SURFACE, pos.getX(), pos.getZ()) - 1) {
-            ParticleUtils.spawnParticlesAlongAxis(state.getValue(FACING).getAxis(), world, pos, 0.125D, ParticleTypes.ELECTRIC_SPARK, UniformInt.of(1, 2));
+        if (world.isThundering() && (long) world.random.nextInt(200) <= world.getGameTime() % 200L && pos.getY() == world.getHeight(Heightmap.Types.WORLD_SURFACE, pos.getX(), pos.getZ()) - 1) {
+            ParticleUtils.spawnParticlesAlongAxis(((Direction) state.getValue(LightningRodBlock.FACING)).getAxis(), world, pos, 0.125D, ParticleTypes.ELECTRIC_SPARK, UniformInt.of(1, 2));
         }
     }
 
+    @Override
     public void onRemove(BlockState state, Level world, BlockPos pos, BlockState newState, boolean moved) {
         if (!state.is(newState.getBlock())) {
-            if (state.getValue(POWERED)) {
+            if ((Boolean) state.getValue(LightningRodBlock.POWERED)) {
                 this.updateNeighbours(state, world, pos);
             }
 
@@ -101,34 +129,41 @@
         }
     }
 
+    @Override
     public void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
         if (!state.is(oldState.getBlock())) {
-            if (state.getValue(POWERED) && !world.getBlockTicks().hasScheduledTick(pos, this)) {
-                world.setBlock(pos, state.setValue(POWERED, Boolean.valueOf(false)), 18);
+            if ((Boolean) state.getValue(LightningRodBlock.POWERED) && !world.getBlockTicks().hasScheduledTick(pos, this)) {
+                world.setBlock(pos, (BlockState) state.setValue(LightningRodBlock.POWERED, false), 18);
             }
 
         }
     }
 
+    @Override
     public void onProjectileHit(Level world, BlockState state, BlockHitResult hit, Projectile projectile) {
-        if (world.isThundering() && projectile instanceof ThrownTrident && ((ThrownTrident)projectile).isChanneling()) {
-            BlockPos blockPos = hit.getBlockPos();
-            if (world.canSeeSky(blockPos)) {
-                LightningBolt lightningBolt = EntityType.LIGHTNING_BOLT.create(world);
-                lightningBolt.moveTo(Vec3.atBottomCenterOf(blockPos.above()));
+        if (world.isThundering() && projectile instanceof ThrownTrident && ((ThrownTrident) projectile).isChanneling()) {
+            BlockPos blockposition = hit.getBlockPos();
+
+            if (world.canSeeSky(blockposition)) {
+                LightningBolt entitylightning = (LightningBolt) EntityType.LIGHTNING_BOLT.create(world);
+
+                entitylightning.moveTo(Vec3.atBottomCenterOf((Vec3i) blockposition.above()));
                 Entity entity = projectile.getOwner();
-                lightningBolt.setCause(entity instanceof ServerPlayer ? (ServerPlayer)entity : null);
-                world.addFreshEntity(lightningBolt);
-                world.playSound((Player)null, blockPos, SoundEvents.TRIDENT_THUNDER, SoundSource.WEATHER, 5.0F, 1.0F);
+
+                entitylightning.setCause(entity instanceof ServerPlayer ? (ServerPlayer) entity : null);
+                ((ServerLevel) world).strikeLightning(entitylightning, org.bukkit.event.weather.LightningStrikeEvent.Cause.TRIDENT); // CraftBukkit
+                world.playSound((Player) null, blockposition, SoundEvents.TRIDENT_THUNDER, SoundSource.WEATHER, 5.0F, 1.0F);
             }
         }
 
     }
 
+    @Override
     protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
-        builder.add(FACING, POWERED, WATERLOGGED);
+        builder.add(LightningRodBlock.FACING, LightningRodBlock.POWERED, LightningRodBlock.WATERLOGGED);
     }
 
+    @Override
     public boolean isSignalSource(BlockState state) {
         return true;
     }
