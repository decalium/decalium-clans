--- a/net/minecraft/world/entity/npc/AbstractVillager.java
+++ b/net/minecraft/world/entity/npc/AbstractVillager.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.entity.npc;
 
 import com.google.common.collect.Sets;
+import java.util.Iterator;
 import java.util.Set;
 import javax.annotation.Nullable;
 import net.minecraft.advancements.CriteriaTriggers;
@@ -34,8 +35,23 @@
 import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.pathfinder.BlockPathTypes;
 import net.minecraft.world.phys.Vec3;
+// CraftBukkit start
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.v1_17_R1.inventory.CraftMerchant;
+import org.bukkit.craftbukkit.v1_17_R1.inventory.CraftMerchantRecipe;
+import org.bukkit.event.entity.VillagerAcquireTradeEvent;
+// CraftBukkit end
 
 public abstract class AbstractVillager extends AgeableMob implements InventoryCarrier, Npc, Merchant {
+
+    // CraftBukkit start
+    private CraftMerchant craftMerchant;
+
+    @Override
+    public CraftMerchant getCraftMerchant() {
+        return (this.craftMerchant == null) ? this.craftMerchant = new CraftMerchant(this) : this.craftMerchant;
+    }
+    // CraftBukkit end
     private static final EntityDataAccessor<Integer> DATA_UNHAPPY_COUNTER = SynchedEntityData.defineId(AbstractVillager.class, EntityDataSerializers.INT);
     public static final int VILLAGER_SLOT_OFFSET = 300;
     private static final int VILLAGER_INVENTORY_SIZE = 8;
@@ -43,7 +59,7 @@
     private Player tradingPlayer;
     @Nullable
     protected MerchantOffers offers;
-    private final SimpleContainer inventory = new SimpleContainer(8);
+    private final SimpleContainer inventory = new SimpleContainer(8, (org.bukkit.craftbukkit.v1_17_R1.entity.CraftAbstractVillager) this.getBukkitEntity()); // CraftBukkit add argument
 
     public AbstractVillager(EntityType<? extends AbstractVillager> type, Level world) {
         super(type, world);
@@ -51,40 +67,46 @@
         this.setPathfindingMalus(BlockPathTypes.DAMAGE_FIRE, -1.0F);
     }
 
+    @Override
     public SpawnGroupData finalizeSpawn(ServerLevelAccessor world, DifficultyInstance difficulty, MobSpawnType spawnReason, @Nullable SpawnGroupData entityData, @Nullable CompoundTag entityNbt) {
         if (entityData == null) {
             entityData = new AgeableMob.AgeableMobGroupData(false);
         }
 
-        return super.finalizeSpawn(world, difficulty, spawnReason, entityData, entityNbt);
+        return super.finalizeSpawn(world, difficulty, spawnReason, (SpawnGroupData) entityData, entityNbt);
     }
 
     public int getUnhappyCounter() {
-        return this.entityData.get(DATA_UNHAPPY_COUNTER);
+        return (Integer) this.entityData.get(AbstractVillager.DATA_UNHAPPY_COUNTER);
     }
 
     public void setUnhappyCounter(int ticks) {
-        this.entityData.set(DATA_UNHAPPY_COUNTER, ticks);
+        this.entityData.set(AbstractVillager.DATA_UNHAPPY_COUNTER, ticks);
     }
 
+    @Override
     public int getVillagerXp() {
         return 0;
     }
 
+    @Override
     protected float getStandingEyeHeight(Pose pose, EntityDimensions dimensions) {
         return this.isBaby() ? 0.81F : 1.62F;
     }
 
+    @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(DATA_UNHAPPY_COUNTER, 0);
+        this.entityData.define(AbstractVillager.DATA_UNHAPPY_COUNTER, 0);
     }
 
+    @Override
     public void setTradingPlayer(@Nullable Player customer) {
         this.tradingPlayer = customer;
     }
 
     @Nullable
+    @Override
     public Player getTradingPlayer() {
         return this.tradingPlayer;
     }
@@ -93,6 +115,14 @@
         return this.tradingPlayer != null;
     }
 
+    // Paper start
+    public void resetOffers() {
+        this.offers = new MerchantOffers();
+        this.updateTrades();
+    }
+    // Paper end
+
+    @Override
     public MerchantOffers getOffers() {
         if (this.offers == null) {
             this.offers = new MerchantOffers();
@@ -102,28 +132,42 @@
         return this.offers;
     }
 
-    public void overrideOffers(@Nullable MerchantOffers offers) {
-    }
+    @Override
+    public void overrideOffers(@Nullable MerchantOffers offers) {}
 
-    public void overrideXp(int experience) {
-    }
+    @Override
+    public void overrideXp(int experience) {}
 
+    @Override
     public void notifyTrade(MerchantOffer offer) {
-        offer.increaseUses();
-        this.ambientSoundTime = -this.getAmbientSoundInterval();
-        this.rewardTradeXp(offer);
+        // Paper - moved down
+        // Paper start
         if (this.tradingPlayer instanceof ServerPlayer) {
-            CriteriaTriggers.TRADE.trigger((ServerPlayer)this.tradingPlayer, this, offer.getResult());
+            io.papermc.paper.event.player.PlayerTradeEvent event = new io.papermc.paper.event.player.PlayerTradeEvent(((ServerPlayer) this.tradingPlayer).getBukkitEntity(), (org.bukkit.entity.AbstractVillager) this.getBukkitEntity(), offer.asBukkit(), true, true);
+            event.callEvent();
+            if (!event.isCancelled()) {
+                MerchantOffer recipe = CraftMerchantRecipe.fromBukkit(event.getTrade()).toMinecraft();
+                if (event.willIncreaseTradeUses()) recipe.increaseUses();
+                this.ambientSoundTime = -this.getAmbientSoundInterval();
+                if (event.isRewardingExp()) this.rewardTradeXp(recipe);
+                CriteriaTriggers.TRADE.trigger((ServerPlayer) this.tradingPlayer, this, recipe.getResult());
+            }
+        } else {
+            offer.increaseUses();
+            this.ambientSoundTime = -getAmbientSoundInterval();
+            this.rewardTradeXp(offer);
         }
-
+        // Paper end
     }
 
     protected abstract void rewardTradeXp(MerchantOffer offer);
 
+    @Override
     public boolean showProgressBar() {
         return true;
     }
 
+    @Override
     public void notifyTradeUpdated(ItemStack stack) {
         if (!this.level.isClientSide && this.ambientSoundTime > -this.getAmbientSoundInterval() + 20) {
             this.ambientSoundTime = -this.getAmbientSoundInterval();
@@ -132,6 +176,7 @@
 
     }
 
+    @Override
     public SoundEvent getNotifyTradeSound() {
         return SoundEvents.VILLAGER_YES;
     }
@@ -144,16 +189,19 @@
         this.playSound(SoundEvents.VILLAGER_CELEBRATE, this.getSoundVolume(), this.getVoicePitch());
     }
 
+    @Override
     public void addAdditionalSaveData(CompoundTag nbt) {
         super.addAdditionalSaveData(nbt);
-        MerchantOffers merchantOffers = this.getOffers();
-        if (!merchantOffers.isEmpty()) {
-            nbt.put("Offers", merchantOffers.createTag());
+        MerchantOffers merchantrecipelist = this.getOffers();
+
+        if (!merchantrecipelist.isEmpty()) {
+            nbt.put("Offers", merchantrecipelist.createTag());
         }
 
         nbt.put("Inventory", this.inventory.createTag());
     }
 
+    @Override
     public void readAdditionalSaveData(CompoundTag nbt) {
         super.readAdditionalSaveData(nbt);
         if (nbt.contains("Offers", 10)) {
@@ -164,41 +212,48 @@
     }
 
     @Nullable
+    @Override
     public Entity changeDimension(ServerLevel destination) {
         this.stopTrading();
         return super.changeDimension(destination);
     }
 
     protected void stopTrading() {
-        this.setTradingPlayer((Player)null);
+        this.setTradingPlayer((Player) null);
     }
 
+    @Override
     public void die(DamageSource source) {
         super.die(source);
         this.stopTrading();
     }
 
     protected void addParticlesAroundSelf(ParticleOptions parameters) {
-        for(int i = 0; i < 5; ++i) {
-            double d = this.random.nextGaussian() * 0.02D;
-            double e = this.random.nextGaussian() * 0.02D;
-            double f = this.random.nextGaussian() * 0.02D;
-            this.level.addParticle(parameters, this.getRandomX(1.0D), this.getRandomY() + 1.0D, this.getRandomZ(1.0D), d, e, f);
+        for (int i = 0; i < 5; ++i) {
+            double d0 = this.random.nextGaussian() * 0.02D;
+            double d1 = this.random.nextGaussian() * 0.02D;
+            double d2 = this.random.nextGaussian() * 0.02D;
+
+            this.level.addParticle(parameters, this.getRandomX(1.0D), this.getRandomY() + 1.0D, this.getRandomZ(1.0D), d0, d1, d2);
         }
 
     }
 
+    @Override
     public boolean canBeLeashed(Player player) {
         return false;
     }
 
+    @Override
     public SimpleContainer getInventory() {
         return this.inventory;
     }
 
+    @Override
     public SlotAccess getSlot(int mappedIndex) {
-        int i = mappedIndex - 300;
-        return i >= 0 && i < this.inventory.getContainerSize() ? SlotAccess.forContainer(this.inventory, i) : super.getSlot(mappedIndex);
+        int j = mappedIndex - 300;
+
+        return j >= 0 && j < this.inventory.getContainerSize() ? SlotAccess.forContainer(this.inventory, j) : super.getSlot(mappedIndex);
     }
 
     public Level getLevel() {
@@ -209,29 +264,49 @@
 
     protected void addOffersFromItemListings(MerchantOffers recipeList, VillagerTrades.ItemListing[] pool, int count) {
         Set<Integer> set = Sets.newHashSet();
+
         if (pool.length > count) {
-            while(set.size() < count) {
+            while (set.size() < count) {
                 set.add(this.random.nextInt(pool.length));
             }
         } else {
-            for(int i = 0; i < pool.length; ++i) {
-                set.add(i);
+            for (int j = 0; j < pool.length; ++j) {
+                set.add(j);
             }
         }
 
-        for(Integer integer : set) {
-            VillagerTrades.ItemListing itemListing = pool[integer];
-            MerchantOffer merchantOffer = itemListing.getOffer(this, this.random);
-            if (merchantOffer != null) {
-                recipeList.add(merchantOffer);
+        Iterator iterator = set.iterator();
+
+        while (iterator.hasNext()) {
+            Integer integer = (Integer) iterator.next();
+            VillagerTrades.ItemListing villagertrades_imerchantrecipeoption = pool[integer];
+            MerchantOffer merchantrecipe = villagertrades_imerchantrecipeoption.getOffer(this, this.random);
+
+            if (merchantrecipe != null) {
+                // CraftBukkit start
+                VillagerAcquireTradeEvent event = new VillagerAcquireTradeEvent((org.bukkit.entity.AbstractVillager) getBukkitEntity(), merchantrecipe.asBukkit());
+                // Suppress during worldgen
+                if (this.valid) {
+                    Bukkit.getPluginManager().callEvent(event);
+                }
+                if (!event.isCancelled()) {
+                    // Paper start
+                    final CraftMerchantRecipe craftMerchantRecipe = CraftMerchantRecipe.fromBukkit(event.getRecipe());
+                    if (craftMerchantRecipe.getIngredients().isEmpty()) return;
+                    recipeList.add(craftMerchantRecipe.toMinecraft());
+                    // Paper end
+                }
+                // CraftBukkit end
             }
         }
 
     }
 
+    @Override
     public Vec3 getRopeHoldPosition(float f) {
-        float g = Mth.lerp(f, this.yBodyRotO, this.yBodyRot) * ((float)Math.PI / 180F);
-        Vec3 vec3 = new Vec3(0.0D, this.getBoundingBox().getYsize() - 1.0D, 0.2D);
-        return this.getPosition(f).add(vec3.yRot(-g));
+        float f1 = Mth.lerp(f, this.yBodyRotO, this.yBodyRot) * 0.017453292F;
+        Vec3 vec3d = new Vec3(0.0D, this.getBoundingBox().getYsize() - 1.0D, 0.2D);
+
+        return this.getPosition(f).add(vec3d.yRot(-f1));
     }
 }
