--- a/net/minecraft/world/entity/animal/Wolf.java
+++ b/net/minecraft/world/entity/animal/Wolf.java
@@ -62,14 +62,20 @@
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.phys.Vec3;
+// CraftBukkit start
+import org.bukkit.craftbukkit.v1_17_R1.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityTargetEvent.TargetReason;
+// CraftBukkit end
 
 public class Wolf extends TamableAnimal implements NeutralMob {
+
     private static final EntityDataAccessor<Boolean> DATA_INTERESTED_ID = SynchedEntityData.defineId(Wolf.class, EntityDataSerializers.BOOLEAN);
     private static final EntityDataAccessor<Integer> DATA_COLLAR_COLOR = SynchedEntityData.defineId(Wolf.class, EntityDataSerializers.INT);
     private static final EntityDataAccessor<Integer> DATA_REMAINING_ANGER_TIME = SynchedEntityData.defineId(Wolf.class, EntityDataSerializers.INT);
-    public static final Predicate<LivingEntity> PREY_SELECTOR = (entity) -> {
-        EntityType<?> entityType = entity.getType();
-        return entityType == EntityType.SHEEP || entityType == EntityType.RABBIT || entityType == EntityType.FOX;
+    public static final Predicate<LivingEntity> PREY_SELECTOR = (entityliving) -> {
+        EntityType<?> entitytypes = entityliving.getType();
+
+        return entitytypes == EntityType.SHEEP || entitytypes == EntityType.RABBIT || entitytypes == EntityType.FOX;
     };
     private static final float START_HEALTH = 8.0F;
     private static final float TAME_HEALTH = 20.0F;
@@ -87,6 +93,7 @@
         this.setTame(false);
     }
 
+    @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(1, new FloatGoal(this));
         this.goalSelector.addGoal(2, new SitWhenOrderedToGoal(this));
@@ -101,35 +108,57 @@
         this.goalSelector.addGoal(10, new RandomLookAroundGoal(this));
         this.targetSelector.addGoal(1, new OwnerHurtByTargetGoal(this));
         this.targetSelector.addGoal(2, new OwnerHurtTargetGoal(this));
-        this.targetSelector.addGoal(3, (new HurtByTargetGoal(this)).setAlertOthers());
+        this.targetSelector.addGoal(3, (new HurtByTargetGoal(this, new Class[0])).setAlertOthers(new Class[0])); // CraftBukkit - decompile error
         this.targetSelector.addGoal(4, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, this::isAngryAt));
-        this.targetSelector.addGoal(5, new NonTameRandomTargetGoal<>(this, Animal.class, false, PREY_SELECTOR));
+        this.targetSelector.addGoal(5, new NonTameRandomTargetGoal<>(this, Animal.class, false, Wolf.PREY_SELECTOR));
         this.targetSelector.addGoal(6, new NonTameRandomTargetGoal<>(this, Turtle.class, false, Turtle.BABY_ON_LAND_SELECTOR));
         this.targetSelector.addGoal(7, new NearestAttackableTargetGoal<>(this, AbstractSkeleton.class, false));
         this.targetSelector.addGoal(8, new ResetUniversalAngerTargetGoal<>(this, true));
     }
 
     public static AttributeSupplier.Builder createAttributes() {
-        return Mob.createMobAttributes().add(Attributes.MOVEMENT_SPEED, (double)0.3F).add(Attributes.MAX_HEALTH, 8.0D).add(Attributes.ATTACK_DAMAGE, 2.0D);
+        return Mob.createMobAttributes().add(Attributes.MOVEMENT_SPEED, 0.30000001192092896D).add(Attributes.MAX_HEALTH, 8.0D).add(Attributes.ATTACK_DAMAGE, 2.0D);
     }
 
+    // CraftBukkit - add overriden version
+    @Override
+    public boolean setGoalTarget(LivingEntity entityliving, org.bukkit.event.entity.EntityTargetEvent.TargetReason reason, boolean fire) {
+        if (!super.setGoalTarget(entityliving, reason, fire)) {
+            return false;
+        }
+        entityliving = getTarget();
+        /* // PAIL
+        if (entityliving == null) {
+            this.setAngry(false);
+        } else if (!this.isTamed()) {
+            this.setAngry(true);
+        }
+        */
+        return true;
+    }
+    // CraftBukkit end
+
+    @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(DATA_INTERESTED_ID, false);
-        this.entityData.define(DATA_COLLAR_COLOR, DyeColor.RED.getId());
-        this.entityData.define(DATA_REMAINING_ANGER_TIME, 0);
+        this.entityData.define(Wolf.DATA_INTERESTED_ID, false);
+        this.entityData.define(Wolf.DATA_COLLAR_COLOR, DyeColor.RED.getId());
+        this.entityData.define(Wolf.DATA_REMAINING_ANGER_TIME, 0);
     }
 
+    @Override
     protected void playStepSound(BlockPos pos, BlockState state) {
         this.playSound(SoundEvents.WOLF_STEP, 0.15F, 1.0F);
     }
 
+    @Override
     public void addAdditionalSaveData(CompoundTag nbt) {
         super.addAdditionalSaveData(nbt);
-        nbt.putByte("CollarColor", (byte)this.getCollarColor().getId());
+        nbt.putByte("CollarColor", (byte) this.getCollarColor().getId());
         this.addPersistentAngerSaveData(nbt);
     }
 
+    @Override
     public void readAdditionalSaveData(CompoundTag nbt) {
         super.readAdditionalSaveData(nbt);
         if (nbt.contains("CollarColor", 99)) {
@@ -139,43 +168,43 @@
         this.readPersistentAngerSaveData(this.level, nbt);
     }
 
+    @Override
     protected SoundEvent getAmbientSound() {
-        if (this.isAngry()) {
-            return SoundEvents.WOLF_GROWL;
-        } else if (this.random.nextInt(3) == 0) {
-            return this.isTame() && this.getHealth() < 10.0F ? SoundEvents.WOLF_WHINE : SoundEvents.WOLF_PANT;
-        } else {
-            return SoundEvents.WOLF_AMBIENT;
-        }
+        return this.isAngry() ? SoundEvents.WOLF_GROWL : (this.random.nextInt(3) == 0 ? (this.isTame() && this.getHealth() < 10.0F ? SoundEvents.WOLF_WHINE : SoundEvents.WOLF_PANT) : SoundEvents.WOLF_AMBIENT);
     }
 
+    @Override
     protected SoundEvent getHurtSound(DamageSource source) {
         return SoundEvents.WOLF_HURT;
     }
 
+    @Override
     protected SoundEvent getDeathSound() {
         return SoundEvents.WOLF_DEATH;
     }
 
-    protected float getSoundVolume() {
+    @Override
+    public float getSoundVolume() {
         return 0.4F;
     }
 
+    @Override
     public void aiStep() {
         super.aiStep();
         if (!this.level.isClientSide && this.isWet && !this.isShaking && !this.isPathFinding() && this.onGround) {
             this.isShaking = true;
             this.shakeAnim = 0.0F;
             this.shakeAnimO = 0.0F;
-            this.level.broadcastEntityEvent(this, (byte)8);
+            this.level.broadcastEntityEvent(this, (byte) 8);
         }
 
         if (!this.level.isClientSide) {
-            this.updatePersistentAnger((ServerLevel)this.level, true);
+            this.updatePersistentAnger((ServerLevel) this.level, true);
         }
 
     }
 
+    @Override
     public void tick() {
         super.tick();
         if (this.isAlive()) {
@@ -189,7 +218,7 @@
             if (this.isInWaterRainOrBubble()) {
                 this.isWet = true;
                 if (this.isShaking && !this.level.isClientSide) {
-                    this.level.broadcastEntityEvent(this, (byte)56);
+                    this.level.broadcastEntityEvent(this, (byte) 56);
                     this.cancelShake();
                 }
             } else if ((this.isWet || this.isShaking) && this.isShaking) {
@@ -208,14 +237,15 @@
                 }
 
                 if (this.shakeAnim > 0.4F) {
-                    float f = (float)this.getY();
-                    int i = (int)(Mth.sin((this.shakeAnim - 0.4F) * (float)Math.PI) * 7.0F);
-                    Vec3 vec3 = this.getDeltaMovement();
+                    float f = (float) this.getY();
+                    int i = (int) (Mth.sin((this.shakeAnim - 0.4F) * 3.1415927F) * 7.0F);
+                    Vec3 vec3d = this.getDeltaMovement();
 
-                    for(int j = 0; j < i; ++j) {
-                        float g = (this.random.nextFloat() * 2.0F - 1.0F) * this.getBbWidth() * 0.5F;
-                        float h = (this.random.nextFloat() * 2.0F - 1.0F) * this.getBbWidth() * 0.5F;
-                        this.level.addParticle(ParticleTypes.SPLASH, this.getX() + (double)g, (double)(f + 0.8F), this.getZ() + (double)h, vec3.x, vec3.y, vec3.z);
+                    for (int j = 0; j < i; ++j) {
+                        float f1 = (this.random.nextFloat() * 2.0F - 1.0F) * this.getBbWidth() * 0.5F;
+                        float f2 = (this.random.nextFloat() * 2.0F - 1.0F) * this.getBbWidth() * 0.5F;
+
+                        this.level.addParticle(ParticleTypes.SPLASH, this.getX() + (double) f1, (double) (f + 0.8F), this.getZ() + (double) f2, vec3d.x, vec3d.y, vec3d.z);
                     }
                 }
             }
@@ -229,6 +259,7 @@
         this.shakeAnimO = 0.0F;
     }
 
+    @Override
     public void die(DamageSource source) {
         this.isWet = false;
         this.isShaking = false;
@@ -245,35 +276,40 @@
         return Math.min(0.5F + Mth.lerp(tickDelta, this.shakeAnimO, this.shakeAnim) / 2.0F * 0.5F, 1.0F);
     }
 
-    public float getBodyRollAngle(float tickDelta, float f) {
-        float g = (Mth.lerp(tickDelta, this.shakeAnimO, this.shakeAnim) + f) / 1.8F;
-        if (g < 0.0F) {
-            g = 0.0F;
-        } else if (g > 1.0F) {
-            g = 1.0F;
+    public float getBodyRollAngle(float tickDelta, float f1) {
+        float f2 = (Mth.lerp(tickDelta, this.shakeAnimO, this.shakeAnim) + f1) / 1.8F;
+
+        if (f2 < 0.0F) {
+            f2 = 0.0F;
+        } else if (f2 > 1.0F) {
+            f2 = 1.0F;
         }
 
-        return Mth.sin(g * (float)Math.PI) * Mth.sin(g * (float)Math.PI * 11.0F) * 0.15F * (float)Math.PI;
+        return Mth.sin(f2 * 3.1415927F) * Mth.sin(f2 * 3.1415927F * 11.0F) * 0.15F * 3.1415927F;
     }
 
     public float getHeadRollAngle(float tickDelta) {
-        return Mth.lerp(tickDelta, this.interestedAngleO, this.interestedAngle) * 0.15F * (float)Math.PI;
+        return Mth.lerp(tickDelta, this.interestedAngleO, this.interestedAngle) * 0.15F * 3.1415927F;
     }
 
+    @Override
     protected float getStandingEyeHeight(Pose pose, EntityDimensions dimensions) {
         return dimensions.height * 0.8F;
     }
 
+    @Override
     public int getMaxHeadXRot() {
         return this.isInSittingPose() ? 20 : super.getMaxHeadXRot();
     }
 
+    @Override
     public boolean hurt(DamageSource source, float amount) {
         if (this.isInvulnerableTo(source)) {
             return false;
         } else {
             Entity entity = source.getEntity();
-            this.setOrderedToSit(false);
+
+            // this.setWillSit(false); // CraftBukkit - moved into EntityLiving.damageEntity(DamageSource, float)
             if (entity != null && !(entity instanceof Player) && !(entity instanceof AbstractArrow)) {
                 amount = (amount + 1.0F) / 2.0F;
             }
@@ -282,20 +318,23 @@
         }
     }
 
+    @Override
     public boolean doHurtTarget(Entity target) {
-        boolean bl = target.hurt(DamageSource.mobAttack(this), (float)((int)this.getAttributeValue(Attributes.ATTACK_DAMAGE)));
-        if (bl) {
-            this.doEnchantDamageEffects(this, target);
+        boolean flag = target.hurt(DamageSource.mobAttack(this), (float) ((int) this.getAttributeValue(Attributes.ATTACK_DAMAGE)));
+
+        if (flag) {
+            this.doEnchantDamageEffects((LivingEntity) this, target);
         }
 
-        return bl;
+        return flag;
     }
 
+    @Override
     public void setTame(boolean tamed) {
         super.setTame(tamed);
         if (tamed) {
             this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(20.0D);
-            this.setHealth(20.0F);
+            this.setHealth(this.getMaxHealth()); // CraftBukkit - 20.0 -> getMaxHealth()
         } else {
             this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(8.0D);
         }
@@ -303,59 +342,65 @@
         this.getAttribute(Attributes.ATTACK_DAMAGE).setBaseValue(4.0D);
     }
 
+    @Override
     public InteractionResult mobInteract(Player player, InteractionHand hand) {
-        ItemStack itemStack = player.getItemInHand(hand);
-        Item item = itemStack.getItem();
+        ItemStack itemstack = player.getItemInHand(hand);
+        Item item = itemstack.getItem();
+
         if (this.level.isClientSide) {
-            boolean bl = this.isOwnedBy(player) || this.isTame() || itemStack.is(Items.BONE) && !this.isTame() && !this.isAngry();
-            return bl ? InteractionResult.CONSUME : InteractionResult.PASS;
+            boolean flag = this.isOwnedBy((LivingEntity) player) || this.isTame() || itemstack.is(Items.BONE) && !this.isTame() && !this.isAngry();
+
+            return flag ? InteractionResult.CONSUME : InteractionResult.PASS;
         } else {
             if (this.isTame()) {
-                if (this.isFood(itemStack) && this.getHealth() < this.getMaxHealth()) {
+                if (this.isFood(itemstack) && this.getHealth() < this.getMaxHealth()) {
                     if (!player.getAbilities().instabuild) {
-                        itemStack.shrink(1);
+                        itemstack.shrink(1);
                     }
 
-                    this.heal((float)item.getFoodProperties().getNutrition());
+                    this.heal((float) item.getFoodProperties().getNutrition(), org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason.EATING); // CraftBukkit
                     this.gameEvent(GameEvent.MOB_INTERACT, this.eyeBlockPosition());
                     return InteractionResult.SUCCESS;
                 }
 
                 if (!(item instanceof DyeItem)) {
-                    InteractionResult interactionResult = super.mobInteract(player, hand);
-                    if ((!interactionResult.consumesAction() || this.isBaby()) && this.isOwnedBy(player)) {
+                    InteractionResult enuminteractionresult = super.mobInteract(player, hand);
+
+                    if ((!enuminteractionresult.consumesAction() || this.isBaby()) && this.isOwnedBy((LivingEntity) player)) {
                         this.setOrderedToSit(!this.isOrderedToSit());
                         this.jumping = false;
                         this.navigation.stop();
-                        this.setTarget((LivingEntity)null);
+                        this.setGoalTarget((LivingEntity) null, TargetReason.FORGOT_TARGET, true); // CraftBukkit - reason
                         return InteractionResult.SUCCESS;
                     }
 
-                    return interactionResult;
+                    return enuminteractionresult;
                 }
 
-                DyeColor dyeColor = ((DyeItem)item).getDyeColor();
-                if (dyeColor != this.getCollarColor()) {
-                    this.setCollarColor(dyeColor);
+                DyeColor enumcolor = ((DyeItem) item).getDyeColor();
+
+                if (enumcolor != this.getCollarColor()) {
+                    this.setCollarColor(enumcolor);
                     if (!player.getAbilities().instabuild) {
-                        itemStack.shrink(1);
+                        itemstack.shrink(1);
                     }
 
                     return InteractionResult.SUCCESS;
                 }
-            } else if (itemStack.is(Items.BONE) && !this.isAngry()) {
+            } else if (itemstack.is(Items.BONE) && !this.isAngry()) {
                 if (!player.getAbilities().instabuild) {
-                    itemStack.shrink(1);
+                    itemstack.shrink(1);
                 }
 
-                if (this.random.nextInt(3) == 0) {
+                // CraftBukkit - added event call and isCancelled check.
+                if (this.random.nextInt(3) == 0 && !CraftEventFactory.callEntityTameEvent(this, player).isCancelled()) {
                     this.tame(player);
                     this.navigation.stop();
-                    this.setTarget((LivingEntity)null);
+                    this.setTarget((LivingEntity) null);
                     this.setOrderedToSit(true);
-                    this.level.broadcastEntityEvent(this, (byte)7);
+                    this.level.broadcastEntityEvent(this, (byte) 7);
                 } else {
-                    this.level.broadcastEntityEvent(this, (byte)6);
+                    this.level.broadcastEntityEvent(this, (byte) 6);
                 }
 
                 return InteractionResult.SUCCESS;
@@ -365,6 +410,7 @@
         }
     }
 
+    @Override
     public void handleEntityEvent(byte status) {
         if (status == 8) {
             this.isShaking = true;
@@ -379,66 +425,73 @@
     }
 
     public float getTailAngle() {
-        if (this.isAngry()) {
-            return 1.5393804F;
-        } else {
-            return this.isTame() ? (0.55F - (this.getMaxHealth() - this.getHealth()) * 0.02F) * (float)Math.PI : ((float)Math.PI / 5F);
-        }
+        return this.isAngry() ? 1.5393804F : (this.isTame() ? (0.55F - (this.getMaxHealth() - this.getHealth()) * 0.02F) * 3.1415927F : 0.62831855F);
     }
 
+    @Override
     public boolean isFood(ItemStack stack) {
         Item item = stack.getItem();
+
         return item.isEdible() && item.getFoodProperties().isMeat();
     }
 
+    @Override
     public int getMaxSpawnClusterSize() {
         return 8;
     }
 
+    @Override
     public int getRemainingPersistentAngerTime() {
-        return this.entityData.get(DATA_REMAINING_ANGER_TIME);
+        return (Integer) this.entityData.get(Wolf.DATA_REMAINING_ANGER_TIME);
     }
 
+    @Override
     public void setRemainingPersistentAngerTime(int ticks) {
-        this.entityData.set(DATA_REMAINING_ANGER_TIME, ticks);
+        this.entityData.set(Wolf.DATA_REMAINING_ANGER_TIME, ticks);
     }
 
+    @Override
     public void startPersistentAngerTimer() {
-        this.setRemainingPersistentAngerTime(PERSISTENT_ANGER_TIME.sample(this.random));
+        this.setRemainingPersistentAngerTime(Wolf.PERSISTENT_ANGER_TIME.sample(this.random));
     }
 
     @Nullable
+    @Override
     public UUID getPersistentAngerTarget() {
         return this.persistentAngerTarget;
     }
 
+    @Override
     public void setPersistentAngerTarget(@Nullable UUID uuid) {
         this.persistentAngerTarget = uuid;
     }
 
     public DyeColor getCollarColor() {
-        return DyeColor.byId(this.entityData.get(DATA_COLLAR_COLOR));
+        return DyeColor.byId((Integer) this.entityData.get(Wolf.DATA_COLLAR_COLOR));
     }
 
     public void setCollarColor(DyeColor color) {
-        this.entityData.set(DATA_COLLAR_COLOR, color.getId());
+        this.entityData.set(Wolf.DATA_COLLAR_COLOR, color.getId());
     }
 
-    public Wolf getBreedOffspring(ServerLevel serverLevel, AgeableMob ageableMob) {
-        Wolf wolf = EntityType.WOLF.create(serverLevel);
-        UUID uUID = this.getOwnerUUID();
-        if (uUID != null) {
-            wolf.setOwnerUUID(uUID);
-            wolf.setTame(true);
+    @Override
+    public Wolf getBreedOffspring(ServerLevel world, AgeableMob entity) {
+        Wolf entitywolf = (Wolf) EntityType.WOLF.create((Level) world);
+        UUID uuid = this.getOwnerUUID();
+
+        if (uuid != null) {
+            entitywolf.setOwnerUUID(uuid);
+            entitywolf.setTame(true);
         }
 
-        return wolf;
+        return entitywolf;
     }
 
     public void setIsInterested(boolean begging) {
-        this.entityData.set(DATA_INTERESTED_ID, begging);
+        this.entityData.set(Wolf.DATA_INTERESTED_ID, begging);
     }
 
+    @Override
     public boolean canMate(Animal other) {
         if (other == this) {
             return false;
@@ -447,73 +500,68 @@
         } else if (!(other instanceof Wolf)) {
             return false;
         } else {
-            Wolf wolf = (Wolf)other;
-            if (!wolf.isTame()) {
-                return false;
-            } else if (wolf.isInSittingPose()) {
-                return false;
-            } else {
-                return this.isInLove() && wolf.isInLove();
-            }
+            Wolf entitywolf = (Wolf) other;
+
+            return !entitywolf.isTame() ? false : (entitywolf.isInSittingPose() ? false : this.isInLove() && entitywolf.isInLove());
         }
     }
 
     public boolean isInterested() {
-        return this.entityData.get(DATA_INTERESTED_ID);
+        return (Boolean) this.entityData.get(Wolf.DATA_INTERESTED_ID);
     }
 
+    @Override
     public boolean wantsToAttack(LivingEntity target, LivingEntity owner) {
         if (!(target instanceof Creeper) && !(target instanceof Ghast)) {
             if (target instanceof Wolf) {
-                Wolf wolf = (Wolf)target;
-                return !wolf.isTame() || wolf.getOwner() != owner;
-            } else if (target instanceof Player && owner instanceof Player && !((Player)owner).canHarmPlayer((Player)target)) {
-                return false;
-            } else if (target instanceof AbstractHorse && ((AbstractHorse)target).isTamed()) {
-                return false;
+                Wolf entitywolf = (Wolf) target;
+
+                return !entitywolf.isTame() || entitywolf.getOwner() != owner;
             } else {
-                return !(target instanceof TamableAnimal) || !((TamableAnimal)target).isTame();
+                return target instanceof Player && owner instanceof Player && !((Player) owner).canHarmPlayer((Player) target) ? false : (target instanceof AbstractHorse && ((AbstractHorse) target).isTamed() ? false : !(target instanceof TamableAnimal) || !((TamableAnimal) target).isTame());
             }
         } else {
             return false;
         }
     }
 
+    @Override
     public boolean canBeLeashed(Player player) {
         return !this.isAngry() && super.canBeLeashed(player);
     }
 
+    @Override
     public Vec3 getLeashOffset() {
-        return new Vec3(0.0D, (double)(0.6F * this.getEyeHeight()), (double)(this.getBbWidth() * 0.4F));
+        return new Vec3(0.0D, (double) (0.6F * this.getEyeHeight()), (double) (this.getBbWidth() * 0.4F));
     }
 
-    class WolfAvoidEntityGoal<T extends LivingEntity> extends AvoidEntityGoal<T> {
+    private class WolfAvoidEntityGoal<T extends LivingEntity> extends AvoidEntityGoal<T> {
+
         private final Wolf wolf;
 
-        public WolfAvoidEntityGoal(Wolf wolf, Class<T> fleeFromType, float distance, double slowSpeed, double fastSpeed) {
-            super(wolf, fleeFromType, distance, slowSpeed, fastSpeed);
-            this.wolf = wolf;
+        public WolfAvoidEntityGoal(Wolf entitywolf, Class oclass, float f, double d0, double d1) {
+            super(entitywolf, oclass, f, d0, d1);
+            this.wolf = entitywolf;
         }
 
+        @Override
         public boolean canUse() {
-            if (super.canUse() && this.toAvoid instanceof Llama) {
-                return !this.wolf.isTame() && this.avoidLlama((Llama)this.toAvoid);
-            } else {
-                return false;
-            }
+            return super.canUse() && this.toAvoid instanceof Llama ? !this.wolf.isTame() && this.avoidLlama((Llama) this.toAvoid) : false;
         }
 
         private boolean avoidLlama(Llama llama) {
             return llama.getStrength() >= Wolf.this.random.nextInt(5);
         }
 
+        @Override
         public void start() {
-            Wolf.this.setTarget((LivingEntity)null);
+            Wolf.this.setTarget((LivingEntity) null);
             super.start();
         }
 
+        @Override
         public void tick() {
-            Wolf.this.setTarget((LivingEntity)null);
+            Wolf.this.setTarget((LivingEntity) null);
             super.tick();
         }
     }
