--- a/net/minecraft/world/level/storage/loot/functions/ExplorationMapFunction.java
+++ b/net/minecraft/world/level/storage/loot/functions/ExplorationMapFunction.java
@@ -47,14 +47,17 @@
         this.skipKnownStructures = bl;
     }
 
+    @Override
     public LootItemFunctionType getType() {
         return LootItemFunctions.EXPLORATION_MAP;
     }
 
+    @Override
     public Set<LootContextParam<?>> getReferencedContextParams() {
         return ImmutableSet.of(LootContextParams.ORIGIN);
     }
 
+    @Override
     public ItemStack run(ItemStack stack, LootContext context) {
         if (!stack.is(Items.MAP)) {
             return stack;
@@ -62,7 +65,16 @@
             Vec3 vec3 = context.getParamOrNull(LootContextParams.ORIGIN);
             if (vec3 != null) {
                 ServerLevel serverLevel = context.getLevel();
-                BlockPos blockPos = serverLevel.findNearestMapFeature(this.destination, new BlockPos(vec3), this.searchRadius, this.skipKnownStructures);
+                // Paper start
+                if (!serverLevel.paperConfig.enableTreasureMaps) {
+                    /*
+                     * NOTE: I fear users will just get a plain map as their "treasure"
+                     * This is preferable to disrespecting the config.
+                     */
+                    return stack;
+                }
+                // Paper end
+                BlockPos blockPos = serverLevel.findNearestMapFeature(this.destination, new BlockPos(vec3), this.searchRadius, !serverLevel.paperConfig.treasureMapsAlreadyDiscovered && this.skipKnownStructures); // Paper
                 if (blockPos != null) {
                     ItemStack itemStack = MapItem.create(serverLevel, blockPos.getX(), blockPos.getZ(), this.zoom, true, true);
                     MapItem.renderBiomePreviewMap(serverLevel, itemStack);
@@ -87,6 +99,7 @@
         private int searchRadius = 50;
         private boolean skipKnownStructures = true;
 
+        @Override
         protected ExplorationMapFunction.Builder getThis() {
             return this;
         }
@@ -116,12 +129,14 @@
             return this;
         }
 
+        @Override
         public LootItemFunction build() {
             return new ExplorationMapFunction(this.getConditions(), this.destination, this.mapDecoration, this.zoom, this.searchRadius, this.skipKnownStructures);
         }
     }
 
     public static class Serializer extends LootItemConditionalFunction.Serializer<ExplorationMapFunction> {
+        @Override
         public void serialize(JsonObject json, ExplorationMapFunction object, JsonSerializationContext context) {
             super.serialize(json, object, context);
             if (!object.destination.equals(ExplorationMapFunction.DEFAULT_FEATURE)) {
@@ -146,6 +161,7 @@
 
         }
 
+        @Override
         public ExplorationMapFunction deserialize(JsonObject jsonObject, JsonDeserializationContext jsonDeserializationContext, LootItemCondition[] lootItemConditions) {
             StructureFeature<?> structureFeature = readStructure(jsonObject);
             String string = jsonObject.has("decoration") ? GsonHelper.getAsString(jsonObject, "decoration") : "mansion";
