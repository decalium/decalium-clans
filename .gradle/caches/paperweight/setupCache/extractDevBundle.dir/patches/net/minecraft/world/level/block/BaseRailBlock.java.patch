--- a/net/minecraft/world/level/block/BaseRailBlock.java
+++ b/net/minecraft/world/level/block/BaseRailBlock.java
@@ -43,15 +43,18 @@
         return this.isStraight;
     }
 
+    @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
         RailShape railShape = state.is(this) ? state.getValue(this.getShapeProperty()) : null;
         return railShape != null && railShape.isAscending() ? HALF_BLOCK_AABB : FLAT_AABB;
     }
 
+    @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
         return canSupportRigidBlock(world, pos.below());
     }
 
+    @Override
     public void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
         if (!oldState.is(state.getBlock())) {
             this.updateState(state, world, pos, notify);
@@ -62,11 +65,13 @@
         state = this.updateDir(world, pos, state, true);
         if (this.isStraight) {
             state.neighborChanged(world, pos, this, pos, notify);
+            state = world.getBlockState(pos); // Paper - don't desync, update again
         }
 
         return state;
     }
 
+    @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block block, BlockPos fromPos, boolean notify) {
         if (!world.isClientSide && world.getBlockState(pos).is(this)) {
             RailShape railShape = state.getValue(this.getShapeProperty());
@@ -111,10 +116,12 @@
         }
     }
 
+    @Override
     public PushReaction getPistonPushReaction(BlockState state) {
         return PushReaction.NORMAL;
     }
 
+    @Override
     public void onRemove(BlockState state, Level world, BlockPos pos, BlockState newState, boolean moved) {
         if (!moved) {
             super.onRemove(state, world, pos, newState, moved);
@@ -130,6 +137,7 @@
         }
     }
 
+    @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
         FluidState fluidState = ctx.getLevel().getFluidState(ctx.getClickedPos());
         boolean bl = fluidState.getType() == Fluids.WATER;
@@ -141,6 +149,7 @@
 
     public abstract Property<RailShape> getShapeProperty();
 
+    @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
         if (state.getValue(WATERLOGGED)) {
             world.getLiquidTicks().scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
@@ -149,6 +158,7 @@
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
     }
 
+    @Override
     public FluidState getFluidState(BlockState state) {
         return state.getValue(WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(state);
     }
