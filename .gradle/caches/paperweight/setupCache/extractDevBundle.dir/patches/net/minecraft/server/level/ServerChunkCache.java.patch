--- a/net/minecraft/server/level/ServerChunkCache.java
+++ b/net/minecraft/server/level/ServerChunkCache.java
@@ -9,6 +9,7 @@
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
@@ -43,20 +44,22 @@
 import net.minecraft.world.level.storage.DimensionDataStorage;
 import net.minecraft.world.level.storage.LevelData;
 import net.minecraft.world.level.storage.LevelStorageSource;
+import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap; // Paper
 
 public class ServerChunkCache extends ChunkSource {
-    private static final List<ChunkStatus> CHUNK_STATUSES = ChunkStatus.getStatusList();
+
+    public static final List<ChunkStatus> CHUNK_STATUSES = ChunkStatus.getStatusList();
     private final DistanceManager distanceManager;
-    private final ChunkGenerator generator;
+    public final ChunkGenerator generator;
     final ServerLevel level;
-    final Thread mainThread;
+    public final Thread mainThread;
     final ThreadedLevelLightEngine lightEngine;
-    private final ServerChunkCache.MainThreadExecutor mainThreadProcessor;
+    public final ServerChunkCache.MainThreadExecutor mainThreadProcessor;
     public final ChunkMap chunkMap;
     private final DimensionDataStorage dataStorage;
     private long lastInhabitedUpdate;
-    private boolean spawnEnemies = true;
-    private boolean spawnFriendlies = true;
+    public boolean spawnEnemies = true;
+    public boolean spawnFriendlies = true;
     private static final int CACHE_SIZE = 4;
     private final long[] lastChunkPos = new long[4];
     private final ChunkStatus[] lastChunkStatus = new ChunkStatus[4];
@@ -64,22 +67,206 @@
     @Nullable
     @VisibleForDebug
     private NaturalSpawner.SpawnState lastSpawnState;
+    // Paper start
+    final com.destroystokyo.paper.util.concurrent.WeakSeqLock loadedChunkMapSeqLock = new com.destroystokyo.paper.util.concurrent.WeakSeqLock();
+    final Long2ObjectOpenHashMap<LevelChunk> loadedChunkMap = new Long2ObjectOpenHashMap<>(8192, 0.5f);
 
-    public ServerChunkCache(ServerLevel world, LevelStorageSource.LevelStorageAccess session, DataFixer dataFixer, StructureManager structureManager, Executor workerExecutor, ChunkGenerator chunkGenerator, int viewDistance, boolean bl, ChunkProgressListener worldGenerationProgressListener, ChunkStatusUpdateListener chunkStatusUpdateListener, Supplier<DimensionDataStorage> supplier) {
+    private final LevelChunk[] lastLoadedChunks = new LevelChunk[4 * 4];
+
+    private static int getChunkCacheKey(int x, int z) {
+        return x & 3 | ((z & 3) << 2);
+    }
+
+    public void addLoadedChunk(LevelChunk chunk) {
+        this.loadedChunkMapSeqLock.acquireWrite();
+        try {
+            this.loadedChunkMap.put(chunk.coordinateKey, chunk);
+        } finally {
+            this.loadedChunkMapSeqLock.releaseWrite();
+        }
+
+        // rewrite cache if we have to
+        // we do this since we also cache null chunks
+        int cacheKey = getChunkCacheKey(chunk.locX, chunk.locZ);
+
+        this.lastLoadedChunks[cacheKey] = chunk;
+    }
+
+    public void removeLoadedChunk(LevelChunk chunk) {
+        this.loadedChunkMapSeqLock.acquireWrite();
+        try {
+            this.loadedChunkMap.remove(chunk.coordinateKey);
+        } finally {
+            this.loadedChunkMapSeqLock.releaseWrite();
+        }
+
+        // rewrite cache if we have to
+        // we do this since we also cache null chunks
+        int cacheKey = getChunkCacheKey(chunk.locX, chunk.locZ);
+
+        LevelChunk cachedChunk = this.lastLoadedChunks[cacheKey];
+        if (cachedChunk != null && cachedChunk.coordinateKey == chunk.coordinateKey) {
+            this.lastLoadedChunks[cacheKey] = null;
+        }
+    }
+
+    public final LevelChunk getChunkAtIfLoadedMainThread(int x, int z) {
+        int cacheKey = getChunkCacheKey(x, z);
+
+        LevelChunk cachedChunk = this.lastLoadedChunks[cacheKey];
+        if (cachedChunk != null && cachedChunk.locX == x & cachedChunk.locZ == z) {
+            return this.lastLoadedChunks[cacheKey];
+        }
+
+        long chunkKey = ChunkPos.asLong(x, z);
+
+        cachedChunk = this.loadedChunkMap.get(chunkKey);
+        // Skipping a null check to avoid extra instructions to improve inline capability
+        this.lastLoadedChunks[cacheKey] = cachedChunk;
+        return cachedChunk;
+    }
+
+    public final LevelChunk getChunkAtIfLoadedMainThreadNoCache(int x, int z) {
+        return this.loadedChunkMap.get(ChunkPos.asLong(x, z));
+    }
+
+    public final LevelChunk getChunkAtMainThread(int x, int z) {
+        LevelChunk ret = this.getChunkAtIfLoadedMainThread(x, z);
+        if (ret != null) {
+            return ret;
+        }
+        return (LevelChunk)this.getChunk(x, z, ChunkStatus.FULL, true);
+    }
+
+    private long chunkFutureAwaitCounter;
+
+    public void getEntityTickingChunkAsync(int x, int z, java.util.function.Consumer<LevelChunk> onLoad) {
+        if (Thread.currentThread() != this.mainThread) {
+            this.mainThreadProcessor.execute(() -> {
+                ServerChunkCache.this.getEntityTickingChunkAsync(x, z, onLoad);
+            });
+            return;
+        }
+        this.getChunkFutureAsynchronously(x, z, 31, ChunkHolder::getEntityTickingChunkFuture, onLoad);
+    }
+
+    public void getTickingChunkAsync(int x, int z, java.util.function.Consumer<LevelChunk> onLoad) {
+        if (Thread.currentThread() != this.mainThread) {
+            this.mainThreadProcessor.execute(() -> {
+                ServerChunkCache.this.getTickingChunkAsync(x, z, onLoad);
+            });
+            return;
+        }
+        this.getChunkFutureAsynchronously(x, z, 32, ChunkHolder::getTickingChunkFuture, onLoad);
+    }
+
+    public void getFullChunkAsync(int x, int z, java.util.function.Consumer<LevelChunk> onLoad) {
+        if (Thread.currentThread() != this.mainThread) {
+            this.mainThreadProcessor.execute(() -> {
+                ServerChunkCache.this.getFullChunkAsync(x, z, onLoad);
+            });
+            return;
+        }
+        this.getChunkFutureAsynchronously(x, z, 33, ChunkHolder::getFullChunkFuture, onLoad);
+    }
+
+    private void getChunkFutureAsynchronously(int x, int z, int ticketLevel, Function<ChunkHolder, CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>>> futureGet, java.util.function.Consumer<LevelChunk> onLoad) {
+        if (Thread.currentThread() != this.mainThread) {
+            throw new IllegalStateException();
+        }
+        ChunkPos chunkPos = new ChunkPos(x, z);
+        Long identifier = this.chunkFutureAwaitCounter++;
+        this.distanceManager.addTicketAtLevel(TicketType.FUTURE_AWAIT, chunkPos, ticketLevel, identifier);
+        this.runDistanceManagerUpdates();
+
+        ChunkHolder chunk = this.chunkMap.getUpdatingChunkIfPresent(chunkPos.toLong());
+
+        if (chunk == null) {
+            throw new IllegalStateException("Expected playerchunk " + chunkPos + " in world '" + this.level.getWorld().getName() + "'");
+        }
+
+        CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> future = futureGet.apply(chunk);
+
+        future.whenCompleteAsync((either, throwable) -> {
+            try {
+                if (throwable != null) {
+                    if (throwable instanceof ThreadDeath) {
+                        throw (ThreadDeath)throwable;
+                    }
+                    net.minecraft.server.MinecraftServer.LOGGER.fatal("Failed to complete future await for chunk " + chunkPos.toString() + " in world '" + ServerChunkCache.this.level.getWorld().getName() + "'", throwable);
+                } else if (either.right().isPresent()) {
+                    net.minecraft.server.MinecraftServer.LOGGER.fatal("Failed to complete future await for chunk " + chunkPos.toString() + " in world '" + ServerChunkCache.this.level.getWorld().getName() + "': " + either.right().get().toString());
+                }
+
+                try {
+                    if (onLoad != null) {
+                        chunkMap.callbackExecutor.execute(() -> {
+                            onLoad.accept(either == null ? null : either.left().orElse(null)); // indicate failure to the callback.
+                        });
+                    }
+                } catch (Throwable thr) {
+                    if (thr instanceof ThreadDeath) {
+                        throw (ThreadDeath)thr;
+                    }
+                    net.minecraft.server.MinecraftServer.LOGGER.fatal("Load callback for future await failed " + chunkPos.toString() + " in world '" + ServerChunkCache.this.level.getWorld().getName() + "'", thr);
+                    return;
+                }
+            } finally {
+                // due to odd behaviour with CB unload implementation we need to have these AFTER the load callback.
+                ServerChunkCache.this.distanceManager.addTicketAtLevel(TicketType.UNKNOWN, chunkPos, ticketLevel, chunkPos);
+                ServerChunkCache.this.distanceManager.removeTicketAtLevel(TicketType.FUTURE_AWAIT, chunkPos, ticketLevel, identifier);
+            }
+        }, this.mainThreadProcessor);
+    }
+    // Paper end
+    // Paper start - rewrite ticklistserver
+    public final boolean isPositionTickingReady(long pos) {
+        final ChunkHolder chunkHolder = this.chunkMap.getUpdatingChunkIfPresent(pos);
+        return chunkHolder != null && chunkHolder.isTickingReady();
+    }
+
+    public final boolean isPositionTickingWithEntitiesLoaded(BlockPos pos) {
+        final long position = net.minecraft.server.MCUtil.getCoordinateKey(pos);
+        final ChunkHolder chunkHolder = this.chunkMap.getUpdatingChunkIfPresent(position);
+        return chunkHolder != null && chunkHolder.isTickingReady() && this.level.entityManager.areEntitiesLoaded(position);
+    }
+    // Paper end - rewrite ticklistserver
+
+    public ServerChunkCache(ServerLevel world, LevelStorageSource.LevelStorageAccess session, DataFixer dataFixer, StructureManager structureManager, Executor workerExecutor, ChunkGenerator chunkGenerator, int viewDistance, boolean flag, ChunkProgressListener worldGenerationProgressListener, ChunkStatusUpdateListener chunkstatusupdatelistener, Supplier<DimensionDataStorage> supplier) {
         this.level = world;
         this.mainThreadProcessor = new ServerChunkCache.MainThreadExecutor(world);
         this.generator = chunkGenerator;
         this.mainThread = Thread.currentThread();
         File file = session.getDimensionPath(world.dimension());
-        File file2 = new File(file, "data");
-        file2.mkdirs();
-        this.dataStorage = new DimensionDataStorage(file2, dataFixer);
-        this.chunkMap = new ChunkMap(world, session, dataFixer, structureManager, workerExecutor, this.mainThreadProcessor, this, this.getGenerator(), worldGenerationProgressListener, chunkStatusUpdateListener, supplier, viewDistance, bl);
+        File file1 = new File(file, "data");
+
+        file1.mkdirs();
+        this.dataStorage = new DimensionDataStorage(file1, dataFixer);
+        this.chunkMap = new ChunkMap(world, session, dataFixer, structureManager, workerExecutor, this.mainThreadProcessor, this, this.getGenerator(), worldGenerationProgressListener, chunkstatusupdatelistener, supplier, viewDistance, flag);
         this.lightEngine = this.chunkMap.getLightEngine();
         this.distanceManager = this.chunkMap.getDistanceManager();
         this.clearCache();
     }
 
+    // CraftBukkit start - properly implement isChunkLoaded
+    public boolean isChunkLoaded(int chunkX, int chunkZ) {
+        ChunkHolder chunk = this.chunkMap.getUpdatingChunkIfPresent(ChunkPos.asLong(chunkX, chunkZ));
+        if (chunk == null) {
+            return false;
+        }
+        return chunk.getFullChunk() != null;
+    }
+
+    public LevelChunk getChunkUnchecked(int chunkX, int chunkZ) {
+        ChunkHolder chunk = this.chunkMap.getUpdatingChunkIfPresent(ChunkPos.asLong(chunkX, chunkZ));
+        if (chunk == null) {
+            return null;
+        }
+        return chunk.getFullChunkUnchecked();
+    }
+    // CraftBukkit end
+
+    @Override
     public ThreadedLevelLightEngine getLightEngine() {
         return this.lightEngine;
     }
@@ -94,10 +281,10 @@
     }
 
     private void storeInCache(long pos, ChunkAccess chunk, ChunkStatus status) {
-        for(int i = 3; i > 0; --i) {
-            this.lastChunkPos[i] = this.lastChunkPos[i - 1];
-            this.lastChunkStatus[i] = this.lastChunkStatus[i - 1];
-            this.lastChunk[i] = this.lastChunk[i - 1];
+        for (int j = 3; j > 0; --j) {
+            this.lastChunkPos[j] = this.lastChunkPos[j - 1];
+            this.lastChunkStatus[j] = this.lastChunkStatus[j - 1];
+            this.lastChunk[j] = this.lastChunk[j - 1];
         }
 
         this.lastChunkPos[0] = pos;
@@ -105,159 +292,373 @@
         this.lastChunk[0] = chunk;
     }
 
+    // Paper start - "real" get chunk if loaded
+    // Note: Partially copied from the getChunkAt method below
+    @Nullable
+    public LevelChunk getChunkAtIfCachedImmediately(int x, int z) {
+        long k = ChunkPos.asLong(x, z);
+
+        // Note: Bypass cache since we need to check ticket level, and to make this MT-Safe
+
+        ChunkHolder playerChunk = this.getVisibleChunkIfPresent(k);
+        if (playerChunk == null) {
+            return null;
+        }
+
+        return playerChunk.getFullChunkUnchecked();
+    }
+
+    @Nullable
+    public LevelChunk getChunkAtIfLoadedImmediately(int x, int z) {
+        long k = ChunkPos.asLong(x, z);
+
+        if (Thread.currentThread() == this.mainThread) {
+            return this.getChunkAtIfLoadedMainThread(x, z);
+        }
+
+        LevelChunk ret = null;
+        long readlock;
+        do {
+            readlock = this.loadedChunkMapSeqLock.acquireRead();
+            try {
+                ret = this.loadedChunkMap.get(k);
+            } catch (Throwable thr) {
+                if (thr instanceof ThreadDeath) {
+                    throw (ThreadDeath)thr;
+                }
+                // re-try, this means a CME occurred...
+                continue;
+            }
+        } while (!this.loadedChunkMapSeqLock.tryReleaseRead(readlock));
+
+        return ret;
+    }
+    // Paper end
+    // Paper start - async chunk io
+    @Nullable
+    public ChunkAccess getChunkAtImmediately(int x, int z) {
+        ChunkHolder holder = this.chunkMap.getVisibleChunkIfPresent(ChunkPos.asLong(x, z));
+        if (holder == null) {
+            return null;
+        }
+
+        return holder.getLastAvailable();
+    }
+
+    private long asyncLoadSeqCounter;
+
+    public CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> getChunkAtAsynchronously(int x, int z, boolean gen, boolean isUrgent) {
+        if (Thread.currentThread() != this.mainThread) {
+            CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> future = new CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>();
+            this.mainThreadProcessor.execute(() -> {
+                this.getChunkAtAsynchronously(x, z, gen, isUrgent).whenComplete((chunk, ex) -> {
+                    if (ex != null) {
+                        future.completeExceptionally(ex);
+                    } else {
+                        future.complete(chunk);
+                    }
+                });
+            });
+            return future;
+        }
+
+        long k = ChunkPos.asLong(x, z);
+        ChunkPos chunkPos = new ChunkPos(x, z);
+
+        ChunkAccess ichunkaccess;
+
+        // try cache
+        for (int l = 0; l < 4; ++l) {
+            if (k == this.lastChunkPos[l] && ChunkStatus.FULL == this.lastChunkStatus[l]) {
+                ichunkaccess = this.lastChunk[l];
+                if (ichunkaccess != null) { // CraftBukkit - the chunk can become accessible in the meantime TODO for non-null chunks it might also make sense to check that the chunk's state hasn't changed in the meantime
+
+                    // move to first in cache
+
+                    for (int i1 = 3; i1 > 0; --i1) {
+                        this.lastChunkPos[i1] = this.lastChunkPos[i1 - 1];
+                        this.lastChunkStatus[i1] = this.lastChunkStatus[i1 - 1];
+                        this.lastChunk[i1] = this.lastChunk[i1 - 1];
+                    }
+
+                    this.lastChunkPos[0] = k;
+                    this.lastChunkStatus[0] = ChunkStatus.FULL;
+                    this.lastChunk[0] = ichunkaccess;
+
+                    return CompletableFuture.completedFuture(Either.left(ichunkaccess));
+                }
+            }
+        }
+
+        if (gen) {
+            return this.bringToFullStatusAsync(x, z, chunkPos, isUrgent);
+        }
+
+        ChunkAccess current = this.getChunkAtImmediately(x, z); // we want to bypass ticket restrictions
+        if (current != null) {
+            if (!(current instanceof net.minecraft.world.level.chunk.ImposterProtoChunk) && !(current instanceof LevelChunk)) {
+                return CompletableFuture.completedFuture(ChunkHolder.UNLOADED_CHUNK);
+            }
+            // we know the chunk is at full status here (either in read-only mode or the real thing)
+            return this.bringToFullStatusAsync(x, z, chunkPos, isUrgent);
+        }
+
+        // here we don't know what status it is and we're not supposed to generate
+        // so we asynchronously load empty status
+        return this.bringToStatusAsync(x, z, chunkPos, ChunkStatus.EMPTY, isUrgent).thenCompose((either) -> {
+            ChunkAccess chunk = either.left().orElse(null);
+            if (!(chunk instanceof net.minecraft.world.level.chunk.ImposterProtoChunk) && !(chunk instanceof LevelChunk)) {
+                // the chunk on disk was not a full status chunk
+                return CompletableFuture.completedFuture(ChunkHolder.UNLOADED_CHUNK);
+            }
+            // bring to full status if required
+            return this.bringToFullStatusAsync(x, z, chunkPos, isUrgent);
+        });
+    }
+
+    private CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> bringToFullStatusAsync(int x, int z, ChunkPos chunkPos, boolean isUrgent) {
+        return this.bringToStatusAsync(x, z, chunkPos, ChunkStatus.FULL, isUrgent);
+    }
+
+    private CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> bringToStatusAsync(int x, int z, ChunkPos chunkPos, ChunkStatus status, boolean isUrgent) {
+        CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> future = this.getChunkFutureMainThread(x, z, status, true, isUrgent);
+        Long identifier = Long.valueOf(this.asyncLoadSeqCounter++);
+        int ticketLevel = net.minecraft.server.MCUtil.getTicketLevelFor(status);
+        this.addTicketAtLevel(TicketType.ASYNC_LOAD, chunkPos, ticketLevel, identifier);
+
+        return future.thenComposeAsync((Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure> either) -> {
+            // either left -> success
+            // either right -> failure
+
+            this.removeTicketAtLevel(TicketType.ASYNC_LOAD, chunkPos, ticketLevel, identifier);
+            this.addTicketAtLevel(TicketType.UNKNOWN, chunkPos, ticketLevel, chunkPos); // allow unloading
+
+            Optional<ChunkHolder.ChunkLoadingFailure> failure = either.right();
+
+            if (failure.isPresent()) {
+                // failure
+                throw new IllegalStateException("Chunk failed to load: " + failure.get().toString());
+            }
+
+            return CompletableFuture.completedFuture(either);
+        }, this.mainThreadProcessor);
+    }
+
+    public <T> void addTicketAtLevel(TicketType<T> ticketType, ChunkPos chunkPos, int ticketLevel, T identifier) {
+        this.distanceManager.addTicketAtLevel(ticketType, chunkPos, ticketLevel, identifier);
+    }
+
+    public <T> void removeTicketAtLevel(TicketType<T> ticketType, ChunkPos chunkPos, int ticketLevel, T identifier) {
+        this.distanceManager.removeTicketAtLevel(ticketType, chunkPos, ticketLevel, identifier);
+    }
+
+    public boolean markUrgent(ChunkPos coords) {
+        return this.distanceManager.markUrgent(coords);
+    }
+
+    public boolean markHighPriority(ChunkPos coords, int priority) {
+        return this.distanceManager.markHighPriority(coords, priority);
+    }
+
+    public void markAreaHighPriority(ChunkPos center, int priority, int radius) {
+        this.distanceManager.markAreaHighPriority(center, priority, radius);
+    }
+
+    public void clearAreaPriorityTickets(ChunkPos center, int radius) {
+        this.distanceManager.clearAreaPriorityTickets(center, radius);
+    }
+
+    public void clearPriorityTickets(ChunkPos coords) {
+        this.distanceManager.clearPriorityTickets(coords);
+    }
+    // Paper end - async chunk io
+
     @Nullable
+    @Override
     public ChunkAccess getChunk(int x, int z, ChunkStatus leastStatus, boolean create) {
+        final int x1 = x; final int z1 = z; // Paper - conflict on variable change
         if (Thread.currentThread() != this.mainThread) {
-            return CompletableFuture.supplyAsync(() -> {
+            return (ChunkAccess) CompletableFuture.supplyAsync(() -> {
                 return this.getChunk(x, z, leastStatus, create);
             }, this.mainThreadProcessor).join();
         } else {
-            ProfilerFiller profilerFiller = this.level.getProfiler();
-            profilerFiller.incrementCounter("getChunk");
-            long l = ChunkPos.asLong(x, z);
+            // Paper start - optimise for loaded chunks
+            LevelChunk ifLoaded = this.getChunkAtIfLoadedMainThread(x, z);
+            if (ifLoaded != null) {
+                return ifLoaded;
+            }
+            // Paper end
+            ProfilerFiller gameprofilerfiller = this.level.getProfiler();
 
-            for(int i = 0; i < 4; ++i) {
-                if (l == this.lastChunkPos[i] && leastStatus == this.lastChunkStatus[i]) {
-                    ChunkAccess chunkAccess = this.lastChunk[i];
-                    if (chunkAccess != null || !create) {
-                        return chunkAccess;
+            gameprofilerfiller.incrementCounter("getChunk");
+            long k = ChunkPos.asLong(x, z);
+
+            ChunkAccess ichunkaccess;
+
+            for (int l = 0; l < 4; ++l) {
+                if (k == this.lastChunkPos[l] && leastStatus == this.lastChunkStatus[l]) {
+                    ichunkaccess = this.lastChunk[l];
+                    if (ichunkaccess != null) { // CraftBukkit - the chunk can become accessible in the meantime TODO for non-null chunks it might also make sense to check that the chunk's state hasn't changed in the meantime
+                        return ichunkaccess;
                     }
                 }
             }
 
-            profilerFiller.incrementCounter("getChunkCacheMiss");
-            CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completableFuture = this.getChunkFutureMainThread(x, z, leastStatus, create);
-            this.mainThreadProcessor.managedBlock(completableFuture::isDone);
-            ChunkAccess chunkAccess2 = completableFuture.join().map((chunkAccess) -> {
-                return chunkAccess;
-            }, (chunkLoadingFailure) -> {
+            gameprofilerfiller.incrementCounter("getChunkCacheMiss");
+            CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.getChunkFutureMainThread(x, z, leastStatus, create, true); // Paper
+            ServerChunkCache.MainThreadExecutor chunkproviderserver_a = this.mainThreadProcessor;
+
+            Objects.requireNonNull(completablefuture);
+            if (!completablefuture.isDone()) { // Paper
+                // Paper start - async chunk io/loading
+                ChunkPos pair = new ChunkPos(x1, z1); // Paper - Chunk priority
+                this.distanceManager.markUrgent(pair); // Paper - Chunk priority
+                this.level.asyncChunkTaskManager.raisePriority(x1, z1, com.destroystokyo.paper.io.PrioritizedTaskQueue.HIGHEST_PRIORITY);
+                com.destroystokyo.paper.io.chunk.ChunkTaskManager.pushChunkWait(this.level, x1, z1);
+                // Paper end
+                com.destroystokyo.paper.io.SyncLoadFinder.logSyncLoad(this.level, x1, z1); // Paper - sync load info
+                this.level.timings.syncChunkLoad.startTiming(); // Paper
+            chunkproviderserver_a.managedBlock(completablefuture::isDone);
+                com.destroystokyo.paper.io.chunk.ChunkTaskManager.popChunkWait(); // Paper - async chunk debug
+                this.level.timings.syncChunkLoad.stopTiming(); // Paper
+                this.distanceManager.clearPriorityTickets(pair); // Paper - Chunk priority
+                this.distanceManager.clearUrgent(pair); // Paper - Chunk priority
+            } // Paper
+            ichunkaccess = (ChunkAccess) ((Either) completablefuture.join()).map((ichunkaccess1) -> {
+                return ichunkaccess1;
+            }, (playerchunk_failure) -> {
                 if (create) {
-                    throw (IllegalStateException)Util.pauseInIde(new IllegalStateException("Chunk not there when requested: " + chunkLoadingFailure));
+                    throw (IllegalStateException) Util.pauseInIde((Throwable) (new IllegalStateException("Chunk not there when requested: " + playerchunk_failure)));
                 } else {
                     return null;
                 }
             });
-            this.storeInCache(l, chunkAccess2, leastStatus);
-            return chunkAccess2;
+            this.storeInCache(k, ichunkaccess, leastStatus);
+            return ichunkaccess;
         }
     }
 
     @Nullable
+    @Override
     public LevelChunk getChunkNow(int chunkX, int chunkZ) {
         if (Thread.currentThread() != this.mainThread) {
             return null;
         } else {
-            this.level.getProfiler().incrementCounter("getChunkNow");
-            long l = ChunkPos.asLong(chunkX, chunkZ);
-
-            for(int i = 0; i < 4; ++i) {
-                if (l == this.lastChunkPos[i] && this.lastChunkStatus[i] == ChunkStatus.FULL) {
-                    ChunkAccess chunkAccess = this.lastChunk[i];
-                    return chunkAccess instanceof LevelChunk ? (LevelChunk)chunkAccess : null;
-                }
-            }
-
-            ChunkHolder chunkHolder = this.getVisibleChunkIfPresent(l);
-            if (chunkHolder == null) {
-                return null;
-            } else {
-                Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure> either = chunkHolder.getFutureIfPresent(ChunkStatus.FULL).getNow((Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>)null);
-                if (either == null) {
-                    return null;
-                } else {
-                    ChunkAccess chunkAccess2 = either.left().orElse((ChunkAccess)null);
-                    if (chunkAccess2 != null) {
-                        this.storeInCache(l, chunkAccess2, ChunkStatus.FULL);
-                        if (chunkAccess2 instanceof LevelChunk) {
-                            return (LevelChunk)chunkAccess2;
-                        }
-                    }
-
-                    return null;
-                }
-            }
+            return this.getChunkAtIfLoadedMainThread(chunkX, chunkZ); // Paper - optimise for loaded chunks
         }
     }
 
     private void clearCache() {
         Arrays.fill(this.lastChunkPos, ChunkPos.INVALID_CHUNK_POS);
-        Arrays.fill(this.lastChunkStatus, (Object)null);
-        Arrays.fill(this.lastChunk, (Object)null);
+        Arrays.fill(this.lastChunkStatus, (Object) null);
+        Arrays.fill(this.lastChunk, (Object) null);
     }
 
     public CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> getChunkFuture(int chunkX, int chunkZ, ChunkStatus leastStatus, boolean create) {
-        boolean bl = Thread.currentThread() == this.mainThread;
-        CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completableFuture;
-        if (bl) {
-            completableFuture = this.getChunkFutureMainThread(chunkX, chunkZ, leastStatus, create);
-            this.mainThreadProcessor.managedBlock(completableFuture::isDone);
+        boolean flag1 = Thread.currentThread() == this.mainThread;
+        CompletableFuture completablefuture;
+
+        if (flag1) {
+            completablefuture = this.getChunkFutureMainThread(chunkX, chunkZ, leastStatus, create);
+            ServerChunkCache.MainThreadExecutor chunkproviderserver_a = this.mainThreadProcessor;
+
+            Objects.requireNonNull(completablefuture);
+            chunkproviderserver_a.managedBlock(completablefuture::isDone);
         } else {
-            completableFuture = CompletableFuture.supplyAsync(() -> {
+            completablefuture = CompletableFuture.supplyAsync(() -> {
                 return this.getChunkFutureMainThread(chunkX, chunkZ, leastStatus, create);
-            }, this.mainThreadProcessor).thenCompose((completableFuture) -> {
-                return completableFuture;
+            }, this.mainThreadProcessor).thenCompose((completablefuture1) -> {
+                return completablefuture1;
             });
         }
 
-        return completableFuture;
+        return completablefuture;
     }
 
-    private CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> getChunkFutureMainThread(int chunkX, int chunkZ, ChunkStatus leastStatus, boolean create) {
-        ChunkPos chunkPos = new ChunkPos(chunkX, chunkZ);
-        long l = chunkPos.toLong();
-        int i = 33 + ChunkStatus.getDistance(leastStatus);
-        ChunkHolder chunkHolder = this.getVisibleChunkIfPresent(l);
-        if (create) {
-            this.distanceManager.addTicket(TicketType.UNKNOWN, chunkPos, i, chunkPos);
-            if (this.chunkAbsent(chunkHolder, i)) {
-                ProfilerFiller profilerFiller = this.level.getProfiler();
-                profilerFiller.push("chunkLoad");
+    private CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> getChunkFutureMainThread(int i, int j, ChunkStatus chunkstatus, boolean flag) {
+        // Paper start - add isUrgent - old sig left in place for dirty nms plugins
+        return getChunkFutureMainThread(i, j, chunkstatus, flag, false);
+    }
+    private CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> getChunkFutureMainThread(int i, int j, ChunkStatus chunkstatus, boolean flag, boolean isUrgent) {
+        // Paper end
+        ChunkPos chunkcoordintpair = new ChunkPos(i, j);
+        long k = chunkcoordintpair.toLong();
+        int l = 33 + ChunkStatus.getDistance(chunkstatus);
+        ChunkHolder playerchunk = this.getVisibleChunkIfPresent(k);
+
+        // CraftBukkit start - don't add new ticket for currently unloading chunk
+        boolean currentlyUnloading = false;
+        if (playerchunk != null) {
+            ChunkHolder.FullChunkStatus oldChunkState = ChunkHolder.getFullChunkStatus(playerchunk.oldTicketLevel);
+            ChunkHolder.FullChunkStatus currentChunkState = ChunkHolder.getFullChunkStatus(playerchunk.getTicketLevel());
+            currentlyUnloading = (oldChunkState.isOrAfter(ChunkHolder.FullChunkStatus.BORDER) && !currentChunkState.isOrAfter(ChunkHolder.FullChunkStatus.BORDER));
+        }
+        if (flag && !currentlyUnloading) {
+            // CraftBukkit end
+            this.distanceManager.addTicket(TicketType.UNKNOWN, chunkcoordintpair, l, chunkcoordintpair);
+            if (isUrgent) this.distanceManager.markUrgent(chunkcoordintpair); // Paper - Chunk priority
+            if (this.chunkAbsent(playerchunk, l)) {
+                ProfilerFiller gameprofilerfiller = this.level.getProfiler();
+
+                gameprofilerfiller.push("chunkLoad");
+                distanceManager.delayDistanceManagerTick = false; // Paper - Chunk priority - ensure this is never false
                 this.runDistanceManagerUpdates();
-                chunkHolder = this.getVisibleChunkIfPresent(l);
-                profilerFiller.pop();
-                if (this.chunkAbsent(chunkHolder, i)) {
-                    throw (IllegalStateException)Util.pauseInIde(new IllegalStateException("No chunk holder after ticket has been added"));
+                playerchunk = this.getVisibleChunkIfPresent(k);
+                gameprofilerfiller.pop();
+                if (this.chunkAbsent(playerchunk, l)) {
+                    throw (IllegalStateException) Util.pauseInIde((Throwable) (new IllegalStateException("No chunk holder after ticket has been added")));
                 }
             }
         }
-
-        return this.chunkAbsent(chunkHolder, i) ? ChunkHolder.UNLOADED_CHUNK_FUTURE : chunkHolder.getOrScheduleFuture(leastStatus, this.chunkMap);
+        // Paper start - Chunk priority
+        CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> future = this.chunkAbsent(playerchunk, l) ? ChunkHolder.UNLOADED_CHUNK_FUTURE : playerchunk.getOrScheduleFuture(chunkstatus, this.chunkMap);
+        if (isUrgent) {
+            future.thenAccept(either -> this.distanceManager.clearUrgent(chunkcoordintpair));
+        }
+        return future;
+        // Paper end
     }
 
     private boolean chunkAbsent(@Nullable ChunkHolder holder, int maxLevel) {
-        return holder == null || holder.getTicketLevel() > maxLevel;
+        return holder == null || holder.oldTicketLevel > maxLevel; // CraftBukkit using oldTicketLevel for isLoaded checks
     }
 
+    @Override
     public boolean hasChunk(int x, int z) {
-        ChunkHolder chunkHolder = this.getVisibleChunkIfPresent((new ChunkPos(x, z)).toLong());
-        int i = 33 + ChunkStatus.getDistance(ChunkStatus.FULL);
-        return !this.chunkAbsent(chunkHolder, i);
+        ChunkHolder playerchunk = this.getVisibleChunkIfPresent((new ChunkPos(x, z)).toLong());
+        int k = 33 + ChunkStatus.getDistance(ChunkStatus.FULL);
+
+        return !this.chunkAbsent(playerchunk, k);
     }
 
+    @Override
     public BlockGetter getChunkForLighting(int chunkX, int chunkZ) {
-        long l = ChunkPos.asLong(chunkX, chunkZ);
-        ChunkHolder chunkHolder = this.getVisibleChunkIfPresent(l);
-        if (chunkHolder == null) {
+        long k = ChunkPos.asLong(chunkX, chunkZ);
+        ChunkHolder playerchunk = this.getVisibleChunkIfPresent(k);
+
+        if (playerchunk == null) {
             return null;
         } else {
-            int i = CHUNK_STATUSES.size() - 1;
+            int l = ServerChunkCache.CHUNK_STATUSES.size() - 1;
+
+            while (true) {
+                ChunkStatus chunkstatus = (ChunkStatus) ServerChunkCache.CHUNK_STATUSES.get(l);
+                Optional<ChunkAccess> optional = ((Either) playerchunk.getFutureIfPresentUnchecked(chunkstatus).getNow(ChunkHolder.UNLOADED_CHUNK)).left();
 
-            while(true) {
-                ChunkStatus chunkStatus = CHUNK_STATUSES.get(i);
-                Optional<ChunkAccess> optional = chunkHolder.getFutureIfPresentUnchecked(chunkStatus).getNow(ChunkHolder.UNLOADED_CHUNK).left();
                 if (optional.isPresent()) {
-                    return optional.get();
+                    return (BlockGetter) optional.get();
                 }
 
-                if (chunkStatus == ChunkStatus.LIGHT.getParent()) {
+                if (chunkstatus == ChunkStatus.LIGHT.getParent()) {
                     return null;
                 }
 
-                --i;
+                --l;
             }
         }
     }
 
+    @Override
     public Level getLevel() {
         return this.level;
     }
@@ -266,10 +667,12 @@
         return this.mainThreadProcessor.pollTask();
     }
 
-    boolean runDistanceManagerUpdates() {
-        boolean bl = this.distanceManager.runAllUpdates(this.chunkMap);
-        boolean bl2 = this.chunkMap.promoteChunkMap();
-        if (!bl && !bl2) {
+    public boolean runDistanceManagerUpdates() {
+        if (distanceManager.delayDistanceManagerTick) return false; // Paper - Chunk priority
+        boolean flag = this.distanceManager.runAllUpdates(this.chunkMap);
+        boolean flag1 = this.chunkMap.promoteChunkMap();
+
+        if (!flag && !flag1) {
             return false;
         } else {
             this.clearCache();
@@ -277,84 +680,205 @@
         }
     }
 
+    // Paper start - helper
+    public boolean isPositionTicking(Entity entity) {
+        return this.isPositionTicking(ChunkPos.asLong(net.minecraft.util.Mth.floor(entity.getX()) >> 4, net.minecraft.util.Mth.floor(entity.getZ()) >> 4));
+    }
+    // Paper end
+
     public boolean isPositionTicking(long pos) {
-        return this.checkChunkFuture(pos, ChunkHolder::getTickingChunkFuture);
+        return this.checkChunkFuture(pos, (Function<ChunkHolder, CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>>>) ChunkHolder::getTickingChunkFuture); // CraftBukkit - decompile error
     }
 
     private boolean checkChunkFuture(long pos, Function<ChunkHolder, CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>>> futureFunction) {
-        ChunkHolder chunkHolder = this.getVisibleChunkIfPresent(pos);
-        if (chunkHolder == null) {
+        ChunkHolder playerchunk = this.getVisibleChunkIfPresent(pos);
+
+        if (playerchunk == null) {
             return false;
         } else {
-            Either<LevelChunk, ChunkHolder.ChunkLoadingFailure> either = futureFunction.apply(chunkHolder).getNow(ChunkHolder.UNLOADED_LEVEL_CHUNK);
+            Either<LevelChunk, ChunkHolder.ChunkLoadingFailure> either = (Either) ((CompletableFuture) futureFunction.apply(playerchunk)).getNow(ChunkHolder.UNLOADED_LEVEL_CHUNK);
+
             return either.left().isPresent();
         }
     }
 
     public void save(boolean flush) {
         this.runDistanceManagerUpdates();
+        try (co.aikar.timings.Timing timed = level.timings.chunkSaveData.startTiming()) { // Paper - Timings
         this.chunkMap.saveAllChunks(flush);
+        } // Paper - Timings
     }
 
+    // Paper start - duplicate save, but call incremental
+    public void saveIncrementally() {
+        this.runDistanceManagerUpdates();
+        try (co.aikar.timings.Timing timed = level.timings.chunkSaveData.startTiming()) { // Paper - Timings
+            this.chunkMap.saveIncrementally();
+        } // Paper - Timings
+    }
+    // Paper end
+
+    @Override
     public void close() throws IOException {
-        this.save(true);
+        // CraftBukkit start
+        this.close(true);
+    }
+
+    public void close(boolean save) throws IOException {
+        if (save) {
+            this.save(true);
+        }
+        // CraftBukkit end
         this.lightEngine.close();
         this.chunkMap.close();
     }
 
-    public void tick(BooleanSupplier booleanSupplier) {
+    // CraftBukkit start - modelled on below
+    public void purgeUnload() {
+        this.level.getProfiler().push("purge");
+        this.distanceManager.purgeStaleTickets();
+        this.runDistanceManagerUpdates();
+        this.level.getProfiler().popPush("unload");
+        this.chunkMap.tick(() -> true);
+        this.level.getProfiler().pop();
+        this.clearCache();
+    }
+    // CraftBukkit end
+
+    @Override
+    public void tick(BooleanSupplier booleansupplier) {
         this.level.getProfiler().push("purge");
+        this.level.timings.doChunkMap.startTiming(); // Spigot
         this.distanceManager.purgeStaleTickets();
+        this.level.getServer().midTickLoadChunks(); // Paper
         this.runDistanceManagerUpdates();
+        this.level.timings.doChunkMap.stopTiming(); // Spigot
         this.level.getProfiler().popPush("chunks");
+        this.level.timings.chunks.startTiming(); // Paper - timings
         this.tickChunks();
+        this.level.timings.chunks.stopTiming(); // Paper - timings
+        this.level.timings.doChunkUnload.startTiming(); // Spigot
         this.level.getProfiler().popPush("unload");
-        this.chunkMap.tick(booleanSupplier);
+        this.chunkMap.tick(booleansupplier);
+        this.level.getServer().midTickLoadChunks(); // Paper
+        this.level.timings.doChunkUnload.stopTiming(); // Spigot
         this.level.getProfiler().pop();
         this.clearCache();
     }
 
     private void tickChunks() {
-        long l = this.level.getGameTime();
-        long m = l - this.lastInhabitedUpdate;
-        this.lastInhabitedUpdate = l;
-        LevelData levelData = this.level.getLevelData();
-        boolean bl = this.level.isDebug();
-        boolean bl2 = this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING);
-        if (!bl) {
+        long i = this.level.getGameTime();
+        long j = i - this.lastInhabitedUpdate;
+
+        this.lastInhabitedUpdate = i;
+        LevelData worlddata = this.level.getLevelData();
+        boolean flag = this.level.isDebug();
+        boolean flag1 = this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING) && !this.level.players().isEmpty(); // CraftBukkit
+
+        if (!flag) {
+            // Paper start - optimize isOutisdeRange
+            ChunkMap playerChunkMap = this.chunkMap;
+            for (ServerPlayer player : this.level.players) {
+                if (!player.affectsSpawning || player.isSpectator()) {
+                    playerChunkMap.playerMobSpawnMap.remove(player);
+                    continue;
+                }
+
+                int viewDistance = this.chunkMap.getEffectiveViewDistance();
+
+                // copied and modified from isOutisdeRange
+                int chunkRange = level.spigotConfig.mobSpawnRange;
+                chunkRange = (chunkRange > viewDistance) ? (byte)viewDistance : chunkRange;
+                chunkRange = (chunkRange > DistanceManager.MOB_SPAWN_RANGE) ? DistanceManager.MOB_SPAWN_RANGE : chunkRange;
+
+                com.destroystokyo.paper.event.entity.PlayerNaturallySpawnCreaturesEvent event = new com.destroystokyo.paper.event.entity.PlayerNaturallySpawnCreaturesEvent(player.getBukkitEntity(), (byte)chunkRange);
+                event.callEvent();
+                if (event.isCancelled() || event.getSpawnRadius() < 0 || playerChunkMap.playerChunkTickRangeMap.getLastViewDistance(player) == -1) {
+                    playerChunkMap.playerMobSpawnMap.remove(player);
+                    continue;
+                }
+
+                int range = Math.min(event.getSpawnRadius(), 32); // limit to max view distance
+                int chunkX = net.minecraft.server.MCUtil.getChunkCoordinate(player.getX());
+                int chunkZ = net.minecraft.server.MCUtil.getChunkCoordinate(player.getZ());
+
+                playerChunkMap.playerMobSpawnMap.addOrUpdate(player, chunkX, chunkZ, range);
+                player.lastEntitySpawnRadiusSquared = (double)((range << 4) * (range << 4)); // used in isOutsideRange
+                player.playerNaturallySpawnedEvent = event;
+            }
+            // Paper end - optimize isOutisdeRange
             this.level.getProfiler().push("pollingChunks");
-            int i = this.level.getGameRules().getInt(GameRules.RULE_RANDOMTICKING);
-            boolean bl3 = levelData.getGameTime() % 400L == 0L;
+            int k = this.level.getGameRules().getInt(GameRules.RULE_RANDOMTICKING);
+            boolean flag2 = level.ticksPerAnimalSpawns != 0L && worlddata.getGameTime() % level.ticksPerAnimalSpawns == 0L; // CraftBukkit
+
             this.level.getProfiler().push("naturalSpawnCount");
-            int j = this.distanceManager.getNaturalSpawnChunkCount();
-            NaturalSpawner.SpawnState spawnState = NaturalSpawner.createState(j, this.level.getAllEntities(), this::getFullChunk);
-            this.lastSpawnState = spawnState;
+            this.level.timings.countNaturalMobs.startTiming(); // Paper - timings
+            int l = this.distanceManager.getNaturalSpawnChunkCount();
+            // Paper start - per player mob spawning
+            NaturalSpawner.SpawnState spawnercreature_d; // moved down
+            if ((this.spawnFriendlies || this.spawnEnemies) && this.chunkMap.playerMobDistanceMap != null) { // don't update when animals and monsters are disabled
+                // update distance map
+                this.level.timings.playerMobDistanceMapUpdate.startTiming();
+                this.chunkMap.playerMobDistanceMap.update(this.level.players, this.chunkMap.viewDistance);
+                this.level.timings.playerMobDistanceMapUpdate.stopTiming();
+                // re-set mob counts
+                for (ServerPlayer player : this.level.players) {
+                    Arrays.fill(player.mobCounts, 0);
+                }
+                spawnercreature_d = NaturalSpawner.createState(l, this.level.getAllEntities(), this::getFullChunk, true);
+            } else {
+                spawnercreature_d = NaturalSpawner.createState(l, this.level.getAllEntities(), this::getFullChunk, false);
+            }
+            // Paper end
+            this.level.timings.countNaturalMobs.stopTiming(); // Paper - timings
+
+            this.lastSpawnState = spawnercreature_d;
             this.level.getProfiler().pop();
-            List<ChunkHolder> list = Lists.newArrayList(this.chunkMap.getChunks());
-            Collections.shuffle(list);
-            list.forEach((chunkHolder) -> {
-                Optional<LevelChunk> optional = chunkHolder.getTickingChunkFuture().getNow(ChunkHolder.UNLOADED_LEVEL_CHUNK).left();
+            //List<PlayerChunk> list = Lists.newArrayList(this.playerChunkMap.f()); // Paper
+            //Collections.shuffle(list); // Paper
+            // Paper - moved up
+            this.level.timings.chunkTicks.startTiming(); // Paper
+            final int[] chunksTicked = {0}; this.chunkMap.forEachVisibleChunk((playerchunk) -> { // Paper - safe iterator incase chunk loads, also no wrapping
+                Optional<LevelChunk> optional = ((Either) playerchunk.getTickingChunkFuture().getNow(ChunkHolder.UNLOADED_LEVEL_CHUNK)).left();
+
                 if (optional.isPresent()) {
-                    LevelChunk levelChunk = optional.get();
-                    ChunkPos chunkPos = levelChunk.getPos();
-                    if (this.level.isPositionEntityTicking(chunkPos) && !this.chunkMap.noPlayersCloseForSpawning(chunkPos)) {
-                        levelChunk.setInhabitedTime(levelChunk.getInhabitedTime() + m);
-                        if (bl2 && (this.spawnEnemies || this.spawnFriendlies) && this.level.getWorldBorder().isWithinBounds(chunkPos)) {
-                            NaturalSpawner.spawnForChunk(this.level, levelChunk, spawnState, this.spawnFriendlies, this.spawnEnemies, bl3);
+                    LevelChunk chunk = (LevelChunk) optional.get();
+                    ChunkPos chunkcoordintpair = chunk.getPos();
+
+                    if (this.level.isPositionEntityTicking(chunkcoordintpair) && !this.chunkMap.isOutsideOfRange(playerchunk, chunkcoordintpair, false)) { // Paper - optimise isOutsideOfRange
+                        chunk.setInhabitedTime(chunk.getInhabitedTime() + j);
+                        if (flag1 && (this.spawnEnemies || this.spawnFriendlies) && this.level.getWorldBorder().isWithinBounds(chunk.getPos()) && !this.chunkMap.isOutsideOfRange(playerchunk, chunkcoordintpair, true)) { // Spigot // Paper - optimise isOutsideOfRange
+                            NaturalSpawner.spawnForChunk(this.level, chunk, spawnercreature_d, this.spawnFriendlies, this.spawnEnemies, flag2);
+                            if (chunksTicked[0]++ % 10 == 0) this.level.getServer().midTickLoadChunks(); // Paper
                         }
 
-                        this.level.tickChunk(levelChunk, i);
+                        // this.level.timings.doTickTiles.startTiming(); // Spigot // Paper
+                        this.level.tickChunk(chunk, k);
+                        // this.level.timings.doTickTiles.stopTiming(); // Spigot // Paper
                     }
                 }
             });
+            this.level.timings.chunkTicks.stopTiming(); // Paper
             this.level.getProfiler().push("customSpawners");
-            if (bl2) {
+            if (flag1) {
+                try (co.aikar.timings.Timing ignored = this.level.timings.miscMobSpawning.startTiming()) { // Paper - timings
                 this.level.tickCustomSpawners(this.spawnEnemies, this.spawnFriendlies);
+                } // Paper - timings
             }
 
             this.level.getProfiler().popPush("broadcast");
-            list.forEach((chunkHolder) -> {
-                chunkHolder.getTickingChunkFuture().getNow(ChunkHolder.UNLOADED_LEVEL_CHUNK).left().ifPresent(chunkHolder::broadcastChanges);
+            this.chunkMap.forEachVisibleChunk((playerchunk) -> { // Paper - safe iterator incase chunk loads, also no wrapping
+                Optional<LevelChunk> optional = ((Either) playerchunk.getTickingChunkFuture().getNow(ChunkHolder.UNLOADED_LEVEL_CHUNK)).left(); // CraftBukkit - decompile error
+
+                Objects.requireNonNull(playerchunk);
+
+                // Paper start - timings
+                optional.ifPresent(chunk -> {
+                    this.level.timings.broadcastChunkUpdates.startTiming(); // Paper - timings
+                    playerchunk.broadcastChanges(chunk);
+                    this.level.timings.broadcastChunkUpdates.stopTiming(); // Paper - timings
+                });
+                // Paper end
             });
             this.level.getProfiler().pop();
             this.level.getProfiler().pop();
@@ -364,13 +888,15 @@
     }
 
     private void getFullChunk(long pos, Consumer<LevelChunk> chunkConsumer) {
-        ChunkHolder chunkHolder = this.getVisibleChunkIfPresent(pos);
-        if (chunkHolder != null) {
-            chunkHolder.getFullChunkFuture().getNow(ChunkHolder.UNLOADED_LEVEL_CHUNK).left().ifPresent(chunkConsumer);
+        ChunkHolder playerchunk = this.getVisibleChunkIfPresent(pos);
+
+        if (playerchunk != null) {
+            ((Either) playerchunk.getFullChunkFuture().getNow(ChunkHolder.UNLOADED_LEVEL_CHUNK)).left().ifPresent(chunkConsumer);
         }
 
     }
 
+    @Override
     public String gatherStats() {
         return Integer.toString(this.getLoadedChunksCount());
     }
@@ -384,6 +910,7 @@
         return this.generator;
     }
 
+    @Override
     public int getLoadedChunksCount() {
         return this.chunkMap.size();
     }
@@ -391,18 +918,21 @@
     public void blockChanged(BlockPos pos) {
         int i = SectionPos.blockToSectionCoord(pos.getX());
         int j = SectionPos.blockToSectionCoord(pos.getZ());
-        ChunkHolder chunkHolder = this.getVisibleChunkIfPresent(ChunkPos.asLong(i, j));
-        if (chunkHolder != null) {
-            chunkHolder.blockChanged(pos);
+        ChunkHolder playerchunk = this.getVisibleChunkIfPresent(ChunkPos.asLong(i, j));
+
+        if (playerchunk != null) {
+            playerchunk.blockChanged(pos);
         }
 
     }
 
+    @Override
     public void onLightUpdate(LightLayer type, SectionPos pos) {
         this.mainThreadProcessor.execute(() -> {
-            ChunkHolder chunkHolder = this.getVisibleChunkIfPresent(pos.chunk().toLong());
-            if (chunkHolder != null) {
-                chunkHolder.sectionLightChanged(type, pos.y());
+            ChunkHolder playerchunk = this.getVisibleChunkIfPresent(pos.chunk().toLong());
+
+            if (playerchunk != null) {
+                playerchunk.sectionLightChanged(type, pos.y());
             }
 
         });
@@ -416,6 +946,7 @@
         this.distanceManager.removeRegionTicket(ticketType, pos, radius, argument);
     }
 
+    @Override
     public void updateChunkForced(ChunkPos pos, boolean forced) {
         this.distanceManager.updateChunkForced(pos, forced);
     }
@@ -444,6 +975,7 @@
         this.chunkMap.setViewDistance(watchDistance);
     }
 
+    @Override
     public void setSpawnSettings(boolean spawnMonsters, boolean spawnAnimals) {
         this.spawnEnemies = spawnMonsters;
         this.spawnFriendlies = spawnAnimals;
@@ -467,39 +999,89 @@
         return this.lastSpawnState;
     }
 
-    final class MainThreadExecutor extends BlockableEventLoop<Runnable> {
+    public final class MainThreadExecutor extends BlockableEventLoop<Runnable> {
+
         MainThreadExecutor(Level world) {
             super("Chunk source main thread executor for " + world.dimension().location());
         }
 
+        @Override
         protected Runnable wrapRunnable(Runnable runnable) {
             return runnable;
         }
 
+        @Override
         protected boolean shouldRun(Runnable task) {
             return true;
         }
 
+        @Override
         protected boolean scheduleExecutables() {
             return true;
         }
 
+        @Override
         protected Thread getRunningThread() {
             return ServerChunkCache.this.mainThread;
         }
 
+        @Override
         protected void doRunTask(Runnable task) {
             ServerChunkCache.this.level.getProfiler().incrementCounter("runTask");
             super.doRunTask(task);
         }
 
-        protected boolean pollTask() {
+        // Paper start
+        private long lastMidTickChunkTask = 0;
+        public boolean pollChunkLoadTasks() {
+            if (com.destroystokyo.paper.io.chunk.ChunkTaskManager.pollChunkWaitQueue() || ServerChunkCache.this.level.asyncChunkTaskManager.pollNextChunkTask()) {
+                try {
+                    ServerChunkCache.this.runDistanceManagerUpdates();
+                } finally {
+                    // from below: process pending Chunk loadCallback() and unloadCallback() after each run task
+                    chunkMap.callbackExecutor.run();
+                }
+                return true;
+            }
+            return false;
+        }
+        public void midTickLoadChunks() {
+            net.minecraft.server.MinecraftServer server = ServerChunkCache.this.level.getServer();
+            // always try to load chunks, restrain generation/other updates only. don't count these towards tick count
+            //noinspection StatementWithEmptyBody
+            while (pollChunkLoadTasks()) {}
+
+            if (System.nanoTime() - lastMidTickChunkTask < 200000) {
+                return;
+            }
+
+            for (;server.midTickChunksTasksRan < com.destroystokyo.paper.PaperConfig.midTickChunkTasks && server.haveTime();) {
+                if (this.pollTask()) {
+                    server.midTickChunksTasksRan++;
+                    lastMidTickChunkTask = System.nanoTime();
+                } else {
+                    break;
+                }
+            }
+        }
+        // Paper end
+
+        @Override
+        // CraftBukkit start - process pending Chunk loadCallback() and unloadCallback() after each run task
+        public boolean pollTask() {
+        try {
+            boolean execChunkTask = com.destroystokyo.paper.io.chunk.ChunkTaskManager.pollChunkWaitQueue() || ServerChunkCache.this.level.asyncChunkTaskManager.pollNextChunkTask(); // Paper
             if (ServerChunkCache.this.runDistanceManagerUpdates()) {
                 return true;
             } else {
-                ServerChunkCache.this.lightEngine.tryScheduleUpdate();
-                return super.pollTask();
+                ServerChunkCache.this.lightEngine.tryScheduleUpdate(); // Paper - not needed
+                return super.pollTask() || execChunkTask; // Paper
             }
+        } finally {
+            chunkMap.chunkLoadConversionCallbackExecutor.run(); // Paper - Add chunk load conversion callback executor to prevent deadlock due to recursion in the chunk task queue sorter
+            chunkMap.callbackExecutor.run();
+        }
+        // CraftBukkit end
         }
     }
 }
