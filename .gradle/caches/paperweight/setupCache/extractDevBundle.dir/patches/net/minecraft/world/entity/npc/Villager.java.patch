--- a/net/minecraft/world/entity/npc/Villager.java
+++ b/net/minecraft/world/entity/npc/Villager.java
@@ -7,9 +7,13 @@
 import com.mojang.datafixers.util.Pair;
 import com.mojang.serialization.DataResult;
 import com.mojang.serialization.Dynamic;
+import com.mojang.serialization.DynamicOps;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
+import java.util.Collection;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
 import java.util.function.BiPredicate;
@@ -18,6 +22,7 @@
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.GlobalPos;
 import net.minecraft.core.Registry;
+import net.minecraft.core.particles.ParticleOptions;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
@@ -81,16 +86,27 @@
 import net.minecraft.world.item.trading.MerchantOffer;
 import net.minecraft.world.item.trading.MerchantOffers;
 import net.minecraft.world.level.Level;
+import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.AABB;
+import org.apache.logging.log4j.Logger;
+
+// CraftBukkit start
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.v1_17_R1.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityTransformEvent;
+import org.bukkit.event.entity.VillagerReplenishTradeEvent;
+// CraftBukkit end
 
 public class Villager extends AbstractVillager implements ReputationEventHandler, VillagerDataHolder {
+
     private static final EntityDataAccessor<VillagerData> DATA_VILLAGER_DATA = SynchedEntityData.defineId(Villager.class, EntityDataSerializers.VILLAGER_DATA);
     public static final int BREEDING_FOOD_THRESHOLD = 12;
     public static final Map<Item, Integer> FOOD_POINTS = ImmutableMap.of(Items.BREAD, 4, Items.POTATO, 1, Items.CARROT, 1, Items.BEETROOT, 1);
     private static final int TRADES_PER_LEVEL = 2;
-    private static final Set<Item> WANTED_ITEMS = ImmutableSet.of(Items.BREAD, Items.POTATO, Items.CARROT, Items.WHEAT, Items.WHEAT_SEEDS, Items.BEETROOT, Items.BEETROOT_SEEDS);
+    private static final Set<Item> WANTED_ITEMS = ImmutableSet.of(Items.BREAD, Items.POTATO, Items.CARROT, Items.WHEAT, Items.WHEAT_SEEDS, Items.BEETROOT, new Item[]{Items.BEETROOT_SEEDS});
     private static final int MAX_GOSSIP_TOPICS = 10;
     private static final int GOSSIP_COOLDOWN = 1200;
     private static final int GOSSIP_DECAY_INTERVAL = 24000;
@@ -106,24 +122,24 @@
     private Player lastTradedPlayer;
     private boolean chasing;
     private byte foodLevel;
-    private final GossipContainer gossips = new GossipContainer();
+    private final GossipContainer gossips;
     private long lastGossipTime;
     private long lastGossipDecayTime;
     private int villagerXp;
     private long lastRestockGameTime;
-    private int numberOfRestocksToday;
+    public int numberOfRestocksToday;
     private long lastRestockCheckDayTime;
     private boolean assignProfessionWhenSpawned;
-    private static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.HOME, MemoryModuleType.JOB_SITE, MemoryModuleType.POTENTIAL_JOB_SITE, MemoryModuleType.MEETING_POINT, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.VISIBLE_VILLAGER_BABIES, MemoryModuleType.NEAREST_PLAYERS, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM, MemoryModuleType.WALK_TARGET, MemoryModuleType.LOOK_TARGET, MemoryModuleType.INTERACTION_TARGET, MemoryModuleType.BREED_TARGET, MemoryModuleType.PATH, MemoryModuleType.DOORS_TO_CLOSE, MemoryModuleType.NEAREST_BED, MemoryModuleType.HURT_BY, MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.NEAREST_HOSTILE, MemoryModuleType.SECONDARY_JOB_SITE, MemoryModuleType.HIDING_PLACE, MemoryModuleType.HEARD_BELL_TIME, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.LAST_SLEPT, MemoryModuleType.LAST_WOKEN, MemoryModuleType.LAST_WORKED_AT_POI, MemoryModuleType.GOLEM_DETECTED_RECENTLY);
+    private static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.HOME, MemoryModuleType.JOB_SITE, MemoryModuleType.POTENTIAL_JOB_SITE, MemoryModuleType.MEETING_POINT, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.VISIBLE_VILLAGER_BABIES, MemoryModuleType.NEAREST_PLAYERS, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM, MemoryModuleType.WALK_TARGET, new MemoryModuleType[]{MemoryModuleType.LOOK_TARGET, MemoryModuleType.INTERACTION_TARGET, MemoryModuleType.BREED_TARGET, MemoryModuleType.PATH, MemoryModuleType.DOORS_TO_CLOSE, MemoryModuleType.NEAREST_BED, MemoryModuleType.HURT_BY, MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.NEAREST_HOSTILE, MemoryModuleType.SECONDARY_JOB_SITE, MemoryModuleType.HIDING_PLACE, MemoryModuleType.HEARD_BELL_TIME, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.LAST_SLEPT, MemoryModuleType.LAST_WOKEN, MemoryModuleType.LAST_WORKED_AT_POI, MemoryModuleType.GOLEM_DETECTED_RECENTLY});
     private static final ImmutableList<SensorType<? extends Sensor<? super Villager>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ITEMS, SensorType.NEAREST_BED, SensorType.HURT_BY, SensorType.VILLAGER_HOSTILES, SensorType.VILLAGER_BABIES, SensorType.SECONDARY_POIS, SensorType.GOLEM_DETECTED);
-    public static final Map<MemoryModuleType<GlobalPos>, BiPredicate<Villager, PoiType>> POI_MEMORIES = ImmutableMap.of(MemoryModuleType.HOME, (villager, poiType) -> {
-        return poiType == PoiType.HOME;
-    }, MemoryModuleType.JOB_SITE, (villager, poiType) -> {
-        return villager.getVillagerData().getProfession().getJobPoiType() == poiType;
-    }, MemoryModuleType.POTENTIAL_JOB_SITE, (villager, poiType) -> {
-        return PoiType.ALL_JOBS.test(poiType);
-    }, MemoryModuleType.MEETING_POINT, (villager, poiType) -> {
-        return poiType == PoiType.MEETING;
+    public static final Map<MemoryModuleType<GlobalPos>, BiPredicate<Villager, PoiType>> POI_MEMORIES = ImmutableMap.of(MemoryModuleType.HOME, (entityvillager, villageplacetype) -> {
+        return villageplacetype == PoiType.HOME;
+    }, MemoryModuleType.JOB_SITE, (entityvillager, villageplacetype) -> {
+        return entityvillager.getVillagerData().getProfession().getJobPoiType() == villageplacetype;
+    }, MemoryModuleType.POTENTIAL_JOB_SITE, (entityvillager, villageplacetype) -> {
+        return PoiType.ALL_JOBS.test(villageplacetype);
+    }, MemoryModuleType.MEETING_POINT, (entityvillager, villageplacetype) -> {
+        return villageplacetype == PoiType.MEETING;
     });
 
     public Villager(EntityType<? extends Villager> entityType, Level world) {
@@ -132,61 +148,69 @@
 
     public Villager(EntityType<? extends Villager> entityType, Level world, VillagerType type) {
         super(entityType, world);
-        ((GroundPathNavigation)this.getNavigation()).setCanOpenDoors(true);
+        this.gossips = new GossipContainer();
+        ((GroundPathNavigation) this.getNavigation()).setCanOpenDoors(true);
         this.getNavigation().setCanFloat(true);
         this.setCanPickUpLoot(true);
         this.setVillagerData(this.getVillagerData().setType(type).setProfession(VillagerProfession.NONE));
     }
 
+    @Override
     public Brain<Villager> getBrain() {
-        return super.getBrain();
+        return (Brain<Villager>) super.getBrain(); // CraftBukkit - decompile error
     }
 
+    @Override
     protected Brain.Provider<Villager> brainProvider() {
-        return Brain.provider(MEMORY_TYPES, SENSOR_TYPES);
+        return Brain.provider((Collection) Villager.MEMORY_TYPES, (Collection) Villager.SENSOR_TYPES);
     }
 
+    @Override
     protected Brain<?> makeBrain(Dynamic<?> dynamic) {
-        Brain<Villager> brain = this.brainProvider().makeBrain(dynamic);
-        this.registerBrainGoals(brain);
-        return brain;
+        Brain<Villager> behaviorcontroller = this.brainProvider().makeBrain(dynamic);
+
+        this.registerBrainGoals(behaviorcontroller);
+        return behaviorcontroller;
     }
 
     public void refreshBrain(ServerLevel world) {
-        Brain<Villager> brain = this.getBrain();
-        brain.stopAll(world, this);
-        this.brain = brain.copyWithoutBehaviors();
+        Brain<Villager> behaviorcontroller = this.getBrain();
+
+        behaviorcontroller.stopAll(world, this); // CraftBukkit - decompile error
+        this.brain = behaviorcontroller.copyWithoutBehaviors();
         this.registerBrainGoals(this.getBrain());
     }
 
     private void registerBrainGoals(Brain<Villager> brain) {
-        VillagerProfession villagerProfession = this.getVillagerData().getProfession();
+        VillagerProfession villagerprofession = this.getVillagerData().getProfession();
+
         if (this.isBaby()) {
             brain.setSchedule(Schedule.VILLAGER_BABY);
             brain.addActivity(Activity.PLAY, VillagerGoalPackages.getPlayPackage(0.5F));
         } else {
             brain.setSchedule(Schedule.VILLAGER_DEFAULT);
-            brain.addActivityWithConditions(Activity.WORK, VillagerGoalPackages.getWorkPackage(villagerProfession, 0.5F), ImmutableSet.of(Pair.of(MemoryModuleType.JOB_SITE, MemoryStatus.VALUE_PRESENT)));
+            brain.addActivityWithConditions(Activity.WORK, VillagerGoalPackages.getWorkPackage(villagerprofession, 0.5F), ImmutableSet.of(Pair.of(MemoryModuleType.JOB_SITE, MemoryStatus.VALUE_PRESENT)));
         }
 
-        brain.addActivity(Activity.CORE, VillagerGoalPackages.getCorePackage(villagerProfession, 0.5F));
-        brain.addActivityWithConditions(Activity.MEET, VillagerGoalPackages.getMeetPackage(villagerProfession, 0.5F), ImmutableSet.of(Pair.of(MemoryModuleType.MEETING_POINT, MemoryStatus.VALUE_PRESENT)));
-        brain.addActivity(Activity.REST, VillagerGoalPackages.getRestPackage(villagerProfession, 0.5F));
-        brain.addActivity(Activity.IDLE, VillagerGoalPackages.getIdlePackage(villagerProfession, 0.5F));
-        brain.addActivity(Activity.PANIC, VillagerGoalPackages.getPanicPackage(villagerProfession, 0.5F));
-        brain.addActivity(Activity.PRE_RAID, VillagerGoalPackages.getPreRaidPackage(villagerProfession, 0.5F));
-        brain.addActivity(Activity.RAID, VillagerGoalPackages.getRaidPackage(villagerProfession, 0.5F));
-        brain.addActivity(Activity.HIDE, VillagerGoalPackages.getHidePackage(villagerProfession, 0.5F));
-        brain.setCoreActivities(ImmutableSet.of(Activity.CORE));
+        brain.addActivity(Activity.CORE, VillagerGoalPackages.getCorePackage(villagerprofession, 0.5F));
+        brain.addActivityWithConditions(Activity.MEET, VillagerGoalPackages.getMeetPackage(villagerprofession, 0.5F), ImmutableSet.of(Pair.of(MemoryModuleType.MEETING_POINT, MemoryStatus.VALUE_PRESENT)));
+        brain.addActivity(Activity.REST, VillagerGoalPackages.getRestPackage(villagerprofession, 0.5F));
+        brain.addActivity(Activity.IDLE, VillagerGoalPackages.getIdlePackage(villagerprofession, 0.5F));
+        brain.addActivity(Activity.PANIC, VillagerGoalPackages.getPanicPackage(villagerprofession, 0.5F));
+        brain.addActivity(Activity.PRE_RAID, VillagerGoalPackages.getPreRaidPackage(villagerprofession, 0.5F));
+        brain.addActivity(Activity.RAID, VillagerGoalPackages.getRaidPackage(villagerprofession, 0.5F));
+        brain.addActivity(Activity.HIDE, VillagerGoalPackages.getHidePackage(villagerprofession, 0.5F));
+        brain.setCoreActivities((Set) ImmutableSet.of(Activity.CORE));
         brain.setDefaultActivity(Activity.IDLE);
         brain.setActiveActivityIfPossible(Activity.IDLE);
         brain.updateActivityFromSchedule(this.level.getDayTime(), this.level.getGameTime());
     }
 
+    @Override
     protected void ageBoundaryReached() {
         super.ageBoundaryReached();
         if (this.level instanceof ServerLevel) {
-            this.refreshBrain((ServerLevel)this.level);
+            this.refreshBrain((ServerLevel) this.level);
         }
 
     }
@@ -199,9 +223,33 @@
         return this.assignProfessionWhenSpawned;
     }
 
-    protected void customServerAiStep() {
+    // Spigot Start
+    @Override
+    public void inactiveTick() {
+        // SPIGOT-3874, SPIGOT-3894, SPIGOT-3846, SPIGOT-5286 :(
+        // Paper start
+        if (this.getUnhappyCounter() > 0) {
+            this.setUnhappyCounter(this.getUnhappyCounter() - 1);
+        }
+        if (this.isEffectiveAi()) {
+            if (level.spigotConfig.tickInactiveVillagers) {
+                this.customServerAiStep();
+            } else {
+                this.mobTick(true);
+            }
+        }
+        maybeDecayGossip();
+        // Paper end
+
+        super.inactiveTick();
+    }
+    // Spigot End
+
+    @Override
+    protected void customServerAiStep() { mobTick(false); }
+    protected void mobTick(boolean inactive) {
         this.level.getProfiler().push("villagerBrain");
-        this.getBrain().tick((ServerLevel)this.level, this);
+        if (!inactive) this.getBrain().tick((ServerLevel) this.level, this); // CraftBukkit - decompile error // Paper
         this.level.getProfiler().pop();
         if (this.assignProfessionWhenSpawned) {
             this.assignProfessionWhenSpawned = false;
@@ -215,30 +263,33 @@
                     this.increaseProfessionLevelOnUpdate = false;
                 }
 
-                this.addEffect(new MobEffectInstance(MobEffects.REGENERATION, 200, 0));
+                this.addEffect(new MobEffectInstance(MobEffects.REGENERATION, 200, 0), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.VILLAGER_TRADE); // CraftBukkit
             }
         }
 
         if (this.lastTradedPlayer != null && this.level instanceof ServerLevel) {
-            ((ServerLevel)this.level).onReputationEvent(ReputationEventType.TRADE, this.lastTradedPlayer, this);
-            this.level.broadcastEntityEvent(this, (byte)14);
+            ((ServerLevel) this.level).onReputationEvent(ReputationEventType.TRADE, (Entity) this.lastTradedPlayer, (ReputationEventHandler) this);
+            this.level.broadcastEntityEvent(this, (byte) 14);
             this.lastTradedPlayer = null;
         }
 
-        if (!this.isNoAi() && this.random.nextInt(100) == 0) {
-            Raid raid = ((ServerLevel)this.level).getRaidAt(this.blockPosition());
+        if (!inactive && !this.isNoAi() && this.random.nextInt(100) == 0) { // Paper
+            Raid raid = ((ServerLevel) this.level).getRaidAt(this.blockPosition());
+
             if (raid != null && raid.isActive() && !raid.isOver()) {
-                this.level.broadcastEntityEvent(this, (byte)42);
+                this.level.broadcastEntityEvent(this, (byte) 42);
             }
         }
 
         if (this.getVillagerData().getProfession() == VillagerProfession.NONE && this.isTrading()) {
             this.stopTrading();
         }
+        if (inactive) return; // Paper
 
         super.customServerAiStep();
     }
 
+    @Override
     public void tick() {
         super.tick();
         if (this.getUnhappyCounter() > 0) {
@@ -248,23 +299,26 @@
         this.maybeDecayGossip();
     }
 
+    @Override
     public InteractionResult mobInteract(Player player, InteractionHand hand) {
-        ItemStack itemStack = player.getItemInHand(hand);
-        if (!itemStack.is(Items.VILLAGER_SPAWN_EGG) && this.isAlive() && !this.isTrading() && !this.isSleeping()) {
+        ItemStack itemstack = player.getItemInHand(hand);
+
+        if (!itemstack.is(Items.VILLAGER_SPAWN_EGG) && this.isAlive() && !this.isTrading() && !this.isSleeping()) {
             if (this.isBaby()) {
                 this.setUnhappy();
                 return InteractionResult.sidedSuccess(this.level.isClientSide);
             } else {
-                boolean bl = this.getOffers().isEmpty();
+                boolean flag = this.getOffers().isEmpty();
+
                 if (hand == InteractionHand.MAIN_HAND) {
-                    if (bl && !this.level.isClientSide) {
+                    if (flag && !this.level.isClientSide) {
                         this.setUnhappy();
                     }
 
                     player.awardStat(Stats.TALKED_TO_VILLAGER);
                 }
 
-                if (bl) {
+                if (flag) {
                     return InteractionResult.sidedSuccess(this.level.isClientSide);
                 } else {
                     if (!this.level.isClientSide && !this.offers.isEmpty()) {
@@ -279,7 +333,7 @@
         }
     }
 
-    private void setUnhappy() {
+    public void setUnhappy() {
         this.setUnhappyCounter(40);
         if (!this.level.isClientSide()) {
             this.playSound(SoundEvents.VILLAGER_NO, this.getSoundVolume(), this.getVoicePitch());
@@ -293,36 +347,47 @@
         this.openTradingScreen(customer, this.getDisplayName(), this.getVillagerData().getLevel());
     }
 
+    @Override
     public void setTradingPlayer(@Nullable Player customer) {
-        boolean bl = this.getTradingPlayer() != null && customer == null;
+        boolean flag = this.getTradingPlayer() != null && customer == null;
+
         super.setTradingPlayer(customer);
-        if (bl) {
+        if (flag) {
             this.stopTrading();
         }
 
     }
 
+    @Override
     protected void stopTrading() {
         super.stopTrading();
         this.resetSpecialPrices();
     }
 
     private void resetSpecialPrices() {
-        for(MerchantOffer merchantOffer : this.getOffers()) {
-            merchantOffer.resetSpecialPriceDiff();
+        Iterator iterator = this.getOffers().iterator();
+
+        while (iterator.hasNext()) {
+            MerchantOffer merchantrecipe = (MerchantOffer) iterator.next();
+
+            merchantrecipe.resetSpecialPriceDiff();
         }
 
     }
 
+    @Override
     public boolean canRestock() {
         return true;
     }
 
     public void restock() {
         this.updateDemand();
+        Iterator iterator = this.getOffers().iterator();
 
-        for(MerchantOffer merchantOffer : this.getOffers()) {
-            merchantOffer.resetUses();
+        while (iterator.hasNext()) {
+            MerchantOffer merchantrecipe = (MerchantOffer) iterator.next();
+
+            merchantrecipe.resetUses();
         }
 
         this.lastRestockGameTime = this.level.getGameTime();
@@ -330,13 +395,19 @@
     }
 
     private boolean needsToRestock() {
-        for(MerchantOffer merchantOffer : this.getOffers()) {
-            if (merchantOffer.needsRestock()) {
-                return true;
+        Iterator iterator = this.getOffers().iterator();
+
+        MerchantOffer merchantrecipe;
+
+        do {
+            if (!iterator.hasNext()) {
+                return false;
             }
-        }
 
-        return false;
+            merchantrecipe = (MerchantOffer) iterator.next();
+        } while (!merchantrecipe.needsRestock());
+
+        return true;
     }
 
     private boolean allowedToRestock() {
@@ -344,19 +415,21 @@
     }
 
     public boolean shouldRestock() {
-        long l = this.lastRestockGameTime + 12000L;
-        long m = this.level.getGameTime();
-        boolean bl = m > l;
-        long n = this.level.getDayTime();
+        long i = this.lastRestockGameTime + 12000L;
+        long j = this.level.getGameTime();
+        boolean flag = j > i;
+        long k = this.level.getDayTime();
+
         if (this.lastRestockCheckDayTime > 0L) {
-            long o = this.lastRestockCheckDayTime / 24000L;
-            long p = n / 24000L;
-            bl |= p > o;
+            long l = this.lastRestockCheckDayTime / 24000L;
+            long i1 = k / 24000L;
+
+            flag |= i1 > l;
         }
 
-        this.lastRestockCheckDayTime = n;
-        if (bl) {
-            this.lastRestockGameTime = m;
+        this.lastRestockCheckDayTime = k;
+        if (flag) {
+            this.lastRestockGameTime = j;
             this.resetNumberOfRestocks();
         }
 
@@ -365,58 +438,90 @@
 
     private void catchUpDemand() {
         int i = 2 - this.numberOfRestocksToday;
+
         if (i > 0) {
-            for(MerchantOffer merchantOffer : this.getOffers()) {
-                merchantOffer.resetUses();
+            Iterator iterator = this.getOffers().iterator();
+
+            while (iterator.hasNext()) {
+                MerchantOffer merchantrecipe = (MerchantOffer) iterator.next();
+
+                merchantrecipe.resetUses();
             }
         }
 
-        for(int j = 0; j < i; ++j) {
+        for (int j = 0; j < i; ++j) {
             this.updateDemand();
         }
 
     }
 
     private void updateDemand() {
-        for(MerchantOffer merchantOffer : this.getOffers()) {
-            merchantOffer.updateDemand();
+        Iterator iterator = this.getOffers().iterator();
+
+        while (iterator.hasNext()) {
+            MerchantOffer merchantrecipe = (MerchantOffer) iterator.next();
+
+            merchantrecipe.updateDemand();
         }
 
     }
 
     private void updateSpecialPrices(Player player) {
         int i = this.getPlayerReputation(player);
+
         if (i != 0) {
-            for(MerchantOffer merchantOffer : this.getOffers()) {
-                merchantOffer.addToSpecialPriceDiff(-Mth.floor((float)i * merchantOffer.getPriceMultiplier()));
+            Iterator iterator = this.getOffers().iterator();
+
+            while (iterator.hasNext()) {
+                MerchantOffer merchantrecipe = (MerchantOffer) iterator.next();
+                if (merchantrecipe.ignoreDiscounts) continue; // Paper
+
+                // CraftBukkit start
+                int bonus = -Mth.floor((float) i * merchantrecipe.getPriceMultiplier());
+                VillagerReplenishTradeEvent event = new VillagerReplenishTradeEvent((org.bukkit.entity.Villager) this.getBukkitEntity(), merchantrecipe.asBukkit(), bonus);
+                Bukkit.getPluginManager().callEvent(event);
+                if (!event.isCancelled()) {
+                    merchantrecipe.addToSpecialPriceDiff(event.getBonus());
+                }
+                // CraftBukkit end
             }
         }
 
         if (player.hasEffect(MobEffects.HERO_OF_THE_VILLAGE)) {
-            MobEffectInstance mobEffectInstance = player.getEffect(MobEffects.HERO_OF_THE_VILLAGE);
-            int j = mobEffectInstance.getAmplifier();
+            MobEffectInstance mobeffect = player.getEffect(MobEffects.HERO_OF_THE_VILLAGE);
+            int j = mobeffect.getAmplifier();
+            Iterator iterator1 = this.getOffers().iterator();
 
-            for(MerchantOffer merchantOffer2 : this.getOffers()) {
-                double d = 0.3D + 0.0625D * (double)j;
-                int k = (int)Math.floor(d * (double)merchantOffer2.getBaseCostA().getCount());
-                merchantOffer2.addToSpecialPriceDiff(-Math.max(k, 1));
+            while (iterator1.hasNext()) {
+                MerchantOffer merchantrecipe1 = (MerchantOffer) iterator1.next();
+                if (merchantrecipe1.ignoreDiscounts) continue; // Paper
+                double d0 = 0.3D + 0.0625D * (double) j;
+                int k = (int) Math.floor(d0 * (double) merchantrecipe1.getBaseCostA().getCount());
+
+                merchantrecipe1.addToSpecialPriceDiff(-Math.max(k, 1));
             }
         }
 
     }
 
+    @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(DATA_VILLAGER_DATA, new VillagerData(VillagerType.PLAINS, VillagerProfession.NONE, 1));
+        this.entityData.define(Villager.DATA_VILLAGER_DATA, new VillagerData(VillagerType.PLAINS, VillagerProfession.NONE, 1));
     }
 
+    @Override
     public void addAdditionalSaveData(CompoundTag nbt) {
         super.addAdditionalSaveData(nbt);
-        VillagerData.CODEC.encodeStart(NbtOps.INSTANCE, this.getVillagerData()).resultOrPartial(LOGGER::error).ifPresent((tag) -> {
-            nbt.put("VillagerData", tag);
+        DataResult<Tag> dataresult = VillagerData.CODEC.encodeStart(NbtOps.INSTANCE, this.getVillagerData()); // CraftBukkit - decompile error
+        Logger logger = Villager.LOGGER;
+
+        Objects.requireNonNull(logger);
+        dataresult.resultOrPartial(logger::error).ifPresent((nbtbase) -> {
+            nbt.put("VillagerData", nbtbase);
         });
         nbt.putByte("FoodLevel", this.foodLevel);
-        nbt.put("Gossips", this.gossips.store(NbtOps.INSTANCE).getValue());
+        nbt.put("Gossips", (Tag) this.gossips.store((DynamicOps) NbtOps.INSTANCE).getValue());
         nbt.putInt("Xp", this.villagerXp);
         nbt.putLong("LastRestock", this.lastRestockGameTime);
         nbt.putLong("LastGossipDecay", this.lastGossipDecayTime);
@@ -427,11 +532,15 @@
 
     }
 
+    @Override
     public void readAdditionalSaveData(CompoundTag nbt) {
         super.readAdditionalSaveData(nbt);
         if (nbt.contains("VillagerData", 10)) {
-            DataResult<VillagerData> dataResult = VillagerData.CODEC.parse(new Dynamic<>(NbtOps.INSTANCE, nbt.get("VillagerData")));
-            dataResult.resultOrPartial(LOGGER::error).ifPresent(this::setVillagerData);
+            DataResult<VillagerData> dataresult = VillagerData.CODEC.parse(new Dynamic(NbtOps.INSTANCE, nbt.get("VillagerData")));
+            Logger logger = Villager.LOGGER;
+
+            Objects.requireNonNull(logger);
+            dataresult.resultOrPartial(logger::error).ifPresent(this::setVillagerData);
         }
 
         if (nbt.contains("Offers", 10)) {
@@ -442,8 +551,9 @@
             this.foodLevel = nbt.getByte("FoodLevel");
         }
 
-        ListTag listTag = nbt.getList("Gossips", 10);
-        this.gossips.update(new Dynamic<>(NbtOps.INSTANCE, listTag));
+        ListTag nbttaglist = nbt.getList("Gossips", 10);
+
+        this.gossips.update(new Dynamic(NbtOps.INSTANCE, nbttaglist));
         if (nbt.contains("Xp", 3)) {
             this.villagerXp = nbt.getInt("Xp");
         }
@@ -452,7 +562,7 @@
         this.lastGossipDecayTime = nbt.getLong("LastGossipDecay");
         this.setCanPickUpLoot(true);
         if (this.level instanceof ServerLevel) {
-            this.refreshBrain((ServerLevel)this.level);
+            this.refreshBrain((ServerLevel) this.level);
         }
 
         this.numberOfRestocksToday = nbt.getInt("RestocksToday");
@@ -462,50 +572,56 @@
 
     }
 
+    @Override
     public boolean removeWhenFarAway(double distanceSquared) {
         return false;
     }
 
     @Nullable
+    @Override
     protected SoundEvent getAmbientSound() {
-        if (this.isSleeping()) {
-            return null;
-        } else {
-            return this.isTrading() ? SoundEvents.VILLAGER_TRADE : SoundEvents.VILLAGER_AMBIENT;
-        }
+        return this.isSleeping() ? null : (this.isTrading() ? SoundEvents.VILLAGER_TRADE : SoundEvents.VILLAGER_AMBIENT);
     }
 
+    @Override
     protected SoundEvent getHurtSound(DamageSource source) {
         return SoundEvents.VILLAGER_HURT;
     }
 
+    @Override
     protected SoundEvent getDeathSound() {
         return SoundEvents.VILLAGER_DEATH;
     }
 
     public void playWorkSound() {
-        SoundEvent soundEvent = this.getVillagerData().getProfession().getWorkSound();
-        if (soundEvent != null) {
-            this.playSound(soundEvent, this.getSoundVolume(), this.getVoicePitch());
+        SoundEvent soundeffect = this.getVillagerData().getProfession().getWorkSound();
+
+        if (soundeffect != null) {
+            this.playSound(soundeffect, this.getSoundVolume(), this.getVoicePitch());
         }
 
     }
 
+    @Override
     public void setVillagerData(VillagerData villagerData) {
-        VillagerData villagerData2 = this.getVillagerData();
-        if (villagerData2.getProfession() != villagerData.getProfession()) {
+        VillagerData villagerdata1 = this.getVillagerData();
+
+        if (villagerdata1.getProfession() != villagerData.getProfession()) {
             this.offers = null;
         }
 
-        this.entityData.set(DATA_VILLAGER_DATA, villagerData);
+        this.entityData.set(Villager.DATA_VILLAGER_DATA, villagerData);
     }
 
+    @Override
     public VillagerData getVillagerData() {
-        return this.entityData.get(DATA_VILLAGER_DATA);
+        return (VillagerData) this.entityData.get(Villager.DATA_VILLAGER_DATA);
     }
 
+    @Override
     protected void rewardTradeXp(MerchantOffer offer) {
         int i = 3 + this.random.nextInt(4);
+
         this.villagerXp += offer.getXp();
         this.lastTradedPlayer = this.getTradingPlayer();
         if (this.shouldIncreaseLevel()) {
@@ -515,33 +631,36 @@
         }
 
         if (offer.shouldRewardExp()) {
-            this.level.addFreshEntity(new ExperienceOrb(this.level, this.getX(), this.getY() + 0.5D, this.getZ(), i));
+            this.level.addFreshEntity(new ExperienceOrb(this.level, this.getX(), this.getY() + 0.5D, this.getZ(), i, org.bukkit.entity.ExperienceOrb.SpawnReason.VILLAGER_TRADE, this.getTradingPlayer(), this)); // Paper
         }
 
     }
 
-    public void setChasing(boolean bl) {
-        this.chasing = bl;
+    public void setChasing(boolean flag) {
+        this.chasing = flag;
     }
 
     public boolean isChasing() {
         return this.chasing;
     }
 
+    @Override
     public void setLastHurtByMob(@Nullable LivingEntity attacker) {
         if (attacker != null && this.level instanceof ServerLevel) {
-            ((ServerLevel)this.level).onReputationEvent(ReputationEventType.VILLAGER_HURT, attacker, this);
+            ((ServerLevel) this.level).onReputationEvent(ReputationEventType.VILLAGER_HURT, (Entity) attacker, (ReputationEventHandler) this);
             if (this.isAlive() && attacker instanceof Player) {
-                this.level.broadcastEntityEvent(this, (byte)13);
+                this.level.broadcastEntityEvent(this, (byte) 13);
             }
         }
 
         super.setLastHurtByMob(attacker);
     }
 
+    @Override
     public void die(DamageSource source) {
-        LOGGER.info("Villager {} died, message: '{}'", this, source.getLocalizedDeathMessage(this).getString());
+        if (org.spigotmc.SpigotConfig.logVillagerDeaths) Villager.LOGGER.info("Villager {} died, message: '{}'", this, source.getLocalizedDeathMessage(this).getString()); // Spigot
         Entity entity = source.getEntity();
+
         if (entity != null) {
             this.tellWitnessesThatIWasMurdered(entity);
         }
@@ -560,29 +679,34 @@
     private void tellWitnessesThatIWasMurdered(Entity killer) {
         if (this.level instanceof ServerLevel) {
             Optional<List<LivingEntity>> optional = this.brain.getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES);
+
             if (optional.isPresent()) {
-                ServerLevel serverLevel = (ServerLevel)this.level;
-                optional.get().stream().filter((entity) -> {
-                    return entity instanceof ReputationEventHandler;
-                }).forEach((livingEntity) -> {
-                    serverLevel.onReputationEvent(ReputationEventType.VILLAGER_KILLED, killer, (ReputationEventHandler)livingEntity);
+                ServerLevel worldserver = (ServerLevel) this.level;
+
+                ((List) optional.get()).stream().filter((entityliving) -> {
+                    return entityliving instanceof ReputationEventHandler;
+                }).forEach((entityliving) -> {
+                    worldserver.onReputationEvent(ReputationEventType.VILLAGER_KILLED, killer, (ReputationEventHandler) entityliving);
                 });
             }
         }
     }
 
-    public void releasePoi(MemoryModuleType<GlobalPos> memoryModuleType) {
+    public void releasePoi(MemoryModuleType<GlobalPos> memorymoduletype) {
         if (this.level instanceof ServerLevel) {
-            MinecraftServer minecraftServer = ((ServerLevel)this.level).getServer();
-            this.brain.getMemory(memoryModuleType).ifPresent((pos) -> {
-                ServerLevel serverLevel = minecraftServer.getLevel(pos.dimension());
-                if (serverLevel != null) {
-                    PoiManager poiManager = serverLevel.getPoiManager();
-                    Optional<PoiType> optional = poiManager.getType(pos.pos());
-                    BiPredicate<Villager, PoiType> biPredicate = POI_MEMORIES.get(memoryModuleType);
-                    if (optional.isPresent() && biPredicate.test(this, optional.get())) {
-                        poiManager.release(pos.pos());
-                        DebugPackets.sendPoiTicketCountPacket(serverLevel, pos.pos());
+            MinecraftServer minecraftserver = ((ServerLevel) this.level).getServer();
+
+            this.brain.getMemory(memorymoduletype).ifPresent((globalpos) -> {
+                ServerLevel worldserver = minecraftserver.getLevel(globalpos.dimension());
+
+                if (worldserver != null) {
+                    PoiManager villageplace = worldserver.getPoiManager();
+                    Optional<PoiType> optional = villageplace.getType(globalpos.pos());
+                    BiPredicate<Villager, PoiType> bipredicate = (BiPredicate) Villager.POI_MEMORIES.get(memorymoduletype);
+
+                    if (optional.isPresent() && bipredicate.test(this, (PoiType) optional.get())) {
+                        villageplace.release(globalpos.pos());
+                        DebugPackets.sendPoiTicketCountPacket(worldserver, globalpos.pos());
                     }
 
                 }
@@ -590,6 +714,7 @@
         }
     }
 
+    @Override
     public boolean canBreed() {
         return this.foodLevel + this.countFoodPointsInInventory() >= 12 && this.getAge() == 0;
     }
@@ -600,15 +725,17 @@
 
     private void eatUntilFull() {
         if (this.hungry() && this.countFoodPointsInInventory() != 0) {
-            for(int i = 0; i < this.getInventory().getContainerSize(); ++i) {
-                ItemStack itemStack = this.getInventory().getItem(i);
-                if (!itemStack.isEmpty()) {
-                    Integer integer = FOOD_POINTS.get(itemStack.getItem());
+            for (int i = 0; i < this.getInventory().getContainerSize(); ++i) {
+                ItemStack itemstack = this.getInventory().getItem(i);
+
+                if (!itemstack.isEmpty()) {
+                    Integer integer = (Integer) Villager.FOOD_POINTS.get(itemstack.getItem());
+
                     if (integer != null) {
-                        int j = itemStack.getCount();
+                        int j = itemstack.getCount();
 
-                        for(int k = j; k > 0; --k) {
-                            this.foodLevel = (byte)(this.foodLevel + integer);
+                        for (int k = j; k > 0; --k) {
+                            this.foodLevel = (byte) (this.foodLevel + integer);
                             this.getInventory().removeItem(i, 1);
                             if (!this.hungry()) {
                                 return;
@@ -622,13 +749,13 @@
     }
 
     public int getPlayerReputation(Player player) {
-        return this.gossips.getReputation(player.getUUID(), (gossipType) -> {
+        return this.gossips.getReputation(player.getUUID(), (reputationtype) -> {
             return true;
         });
     }
 
     private void digestFood(int amount) {
-        this.foodLevel = (byte)(this.foodLevel - amount);
+        this.foodLevel = (byte) (this.foodLevel - amount);
     }
 
     public void eatAndDigestFood() {
@@ -642,27 +769,32 @@
 
     private boolean shouldIncreaseLevel() {
         int i = this.getVillagerData().getLevel();
+
         return VillagerData.canLevelUp(i) && this.villagerXp >= VillagerData.getMaxXpPerLevel(i);
     }
 
-    private void increaseMerchantCareer() {
+    public void increaseMerchantCareer() {
         this.setVillagerData(this.getVillagerData().setLevel(this.getVillagerData().getLevel() + 1));
         this.updateTrades();
     }
 
+    @Override
     protected Component getTypeName() {
-        return new TranslatableComponent(this.getType().getDescriptionId() + "." + Registry.VILLAGER_PROFESSION.getKey(this.getVillagerData().getProfession()).getPath());
+        String s = this.getType().getDescriptionId();
+
+        return new TranslatableComponent(s + "." + Registry.VILLAGER_PROFESSION.getKey(this.getVillagerData().getProfession()).getPath());
     }
 
+    @Override
     public void handleEntityEvent(byte status) {
         if (status == 12) {
-            this.addParticlesAroundSelf(ParticleTypes.HEART);
+            this.addParticlesAroundSelf((ParticleOptions) ParticleTypes.HEART);
         } else if (status == 13) {
-            this.addParticlesAroundSelf(ParticleTypes.ANGRY_VILLAGER);
+            this.addParticlesAroundSelf((ParticleOptions) ParticleTypes.ANGRY_VILLAGER);
         } else if (status == 14) {
-            this.addParticlesAroundSelf(ParticleTypes.HAPPY_VILLAGER);
+            this.addParticlesAroundSelf((ParticleOptions) ParticleTypes.HAPPY_VILLAGER);
         } else if (status == 42) {
-            this.addParticlesAroundSelf(ParticleTypes.SPLASH);
+            this.addParticlesAroundSelf((ParticleOptions) ParticleTypes.SPLASH);
         } else {
             super.handleEntityEvent(status);
         }
@@ -670,6 +802,7 @@
     }
 
     @Nullable
+    @Override
     public SpawnGroupData finalizeSpawn(ServerLevelAccessor world, DifficultyInstance difficulty, MobSpawnType spawnReason, @Nullable SpawnGroupData entityData, @Nullable CompoundTag entityNbt) {
         if (spawnReason == MobSpawnType.BREEDING) {
             this.setVillagerData(this.getVillagerData().setProfession(VillagerProfession.NONE));
@@ -686,36 +819,54 @@
         return super.finalizeSpawn(world, difficulty, spawnReason, entityData, entityNbt);
     }
 
-    public Villager getBreedOffspring(ServerLevel serverLevel, AgeableMob ageableMob) {
-        double d = this.random.nextDouble();
-        VillagerType villagerType;
-        if (d < 0.5D) {
-            villagerType = VillagerType.byBiome(serverLevel.getBiomeName(this.blockPosition()));
-        } else if (d < 0.75D) {
-            villagerType = this.getVillagerData().getType();
+    @Override
+    public Villager getBreedOffspring(ServerLevel world, AgeableMob entity) {
+        double d0 = this.random.nextDouble();
+        VillagerType villagertype;
+
+        if (d0 < 0.5D) {
+            villagertype = VillagerType.byBiome(world.getBiomeName(this.blockPosition()));
+        } else if (d0 < 0.75D) {
+            villagertype = this.getVillagerData().getType();
         } else {
-            villagerType = ((Villager)ageableMob).getVillagerData().getType();
+            villagertype = ((Villager) entity).getVillagerData().getType();
         }
 
-        Villager villager = new Villager(EntityType.VILLAGER, serverLevel, villagerType);
-        villager.finalizeSpawn(serverLevel, serverLevel.getCurrentDifficultyAt(villager.blockPosition()), MobSpawnType.BREEDING, (SpawnGroupData)null, (CompoundTag)null);
-        return villager;
+        Villager entityvillager = new Villager(EntityType.VILLAGER, world, villagertype);
+
+        entityvillager.finalizeSpawn(world, world.getCurrentDifficultyAt(entityvillager.blockPosition()), MobSpawnType.BREEDING, (SpawnGroupData) null, (CompoundTag) null);
+        return entityvillager;
     }
 
+    @Override
     public void thunderHit(ServerLevel world, LightningBolt lightning) {
         if (world.getDifficulty() != Difficulty.PEACEFUL) {
-            LOGGER.info("Villager {} was struck by lightning {}.", this, lightning);
-            Witch witch = EntityType.WITCH.create(world);
-            witch.moveTo(this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot());
-            witch.finalizeSpawn(world, world.getCurrentDifficultyAt(witch.blockPosition()), MobSpawnType.CONVERSION, (SpawnGroupData)null, (CompoundTag)null);
-            witch.setNoAi(this.isNoAi());
+            // Paper - move log down, event can cancel
+            Witch entitywitch = (Witch) EntityType.WITCH.create((Level) world);
+
+            // Paper start
+            if (org.bukkit.craftbukkit.v1_17_R1.event.CraftEventFactory.callEntityZapEvent(this, lightning, entitywitch).isCancelled()) {
+                return;
+            }
+            // Paper end
+
+            if (org.spigotmc.SpigotConfig.logVillagerDeaths) Villager.LOGGER.info("Villager {} was struck by lightning {}.", this, lightning); // Paper - move log down, event can cancel
+
+            entitywitch.moveTo(this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot());
+            entitywitch.finalizeSpawn(world, world.getCurrentDifficultyAt(entitywitch.blockPosition()), MobSpawnType.CONVERSION, (SpawnGroupData) null, (CompoundTag) null);
+            entitywitch.setNoAi(this.isNoAi());
             if (this.hasCustomName()) {
-                witch.setCustomName(this.getCustomName());
-                witch.setCustomNameVisible(this.isCustomNameVisible());
+                entitywitch.setCustomName(this.getCustomName());
+                entitywitch.setCustomNameVisible(this.isCustomNameVisible());
             }
 
-            witch.setPersistenceRequired();
-            world.addFreshEntityWithPassengers(witch);
+            entitywitch.setPersistenceRequired();
+            // CraftBukkit start
+            if (CraftEventFactory.callEntityTransformEvent(this, entitywitch, EntityTransformEvent.TransformReason.LIGHTNING).isCancelled()) {
+                return;
+            }
+            world.addAllEntities(entitywitch, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.LIGHTNING);
+            // CraftBukkit end
             this.releaseAllPois();
             this.discard();
         } else {
@@ -724,30 +875,43 @@
 
     }
 
+    @Override
     protected void pickUpItem(ItemEntity item) {
-        ItemStack itemStack = item.getItem();
-        if (this.wantsToPickUp(itemStack)) {
-            SimpleContainer simpleContainer = this.getInventory();
-            boolean bl = simpleContainer.canAddItem(itemStack);
-            if (!bl) {
+        ItemStack itemstack = item.getItem();
+
+        if (this.wantsToPickUp(itemstack)) {
+            SimpleContainer inventorysubcontainer = this.getInventory();
+            boolean flag = inventorysubcontainer.canAddItem(itemstack);
+
+            if (!flag) {
+                return;
+            }
+
+            // CraftBukkit start
+            ItemStack remaining = new SimpleContainer(inventorysubcontainer).addItem(itemstack);
+            if (CraftEventFactory.callEntityPickupItemEvent(this, item, remaining.getCount(), false).isCancelled()) {
                 return;
             }
+            // CraftBukkit end
 
             this.onItemPickup(item);
-            this.take(item, itemStack.getCount());
-            ItemStack itemStack2 = simpleContainer.addItem(itemStack);
-            if (itemStack2.isEmpty()) {
+            this.take(item, itemstack.getCount());
+            ItemStack itemstack1 = inventorysubcontainer.addItem(itemstack);
+
+            if (itemstack1.isEmpty()) {
                 item.discard();
             } else {
-                itemStack.setCount(itemStack2.getCount());
+                itemstack.setCount(itemstack1.getCount());
             }
         }
 
     }
 
+    @Override
     public boolean wantsToPickUp(ItemStack stack) {
         Item item = stack.getItem();
-        return (WANTED_ITEMS.contains(item) || this.getVillagerData().getProfession().getRequestedItems().contains(item)) && this.getInventory().canAddItem(stack);
+
+        return (Villager.WANTED_ITEMS.contains(item) || this.getVillagerData().getProfession().getRequestedItems().contains(item)) && this.getInventory().canAddItem(stack);
     }
 
     public boolean hasExcessFood() {
@@ -759,24 +923,29 @@
     }
 
     private int countFoodPointsInInventory() {
-        SimpleContainer simpleContainer = this.getInventory();
-        return FOOD_POINTS.entrySet().stream().mapToInt((entry) -> {
-            return simpleContainer.countItem(entry.getKey()) * entry.getValue();
+        SimpleContainer inventorysubcontainer = this.getInventory();
+
+        return Villager.FOOD_POINTS.entrySet().stream().mapToInt((entry) -> {
+            return inventorysubcontainer.countItem((Item) entry.getKey()) * (Integer) entry.getValue();
         }).sum();
     }
 
     public boolean hasFarmSeeds() {
-        return this.getInventory().hasAnyOf(ImmutableSet.of(Items.WHEAT_SEEDS, Items.POTATO, Items.CARROT, Items.BEETROOT_SEEDS));
+        return this.getInventory().hasAnyOf((Set) ImmutableSet.of(Items.WHEAT_SEEDS, Items.POTATO, Items.CARROT, Items.BEETROOT_SEEDS));
     }
 
+    @Override
     protected void updateTrades() {
-        VillagerData villagerData = this.getVillagerData();
-        Int2ObjectMap<VillagerTrades.ItemListing[]> int2ObjectMap = VillagerTrades.TRADES.get(villagerData.getProfession());
-        if (int2ObjectMap != null && !int2ObjectMap.isEmpty()) {
-            VillagerTrades.ItemListing[] itemListings = int2ObjectMap.get(villagerData.getLevel());
-            if (itemListings != null) {
-                MerchantOffers merchantOffers = this.getOffers();
-                this.addOffersFromItemListings(merchantOffers, itemListings, 2);
+        VillagerData villagerdata = this.getVillagerData();
+        Int2ObjectMap<VillagerTrades.ItemListing[]> int2objectmap = (Int2ObjectMap) VillagerTrades.TRADES.get(villagerdata.getProfession());
+
+        if (int2objectmap != null && !int2objectmap.isEmpty()) {
+            VillagerTrades.ItemListing[] avillagertrades_imerchantrecipeoption = (VillagerTrades.ItemListing[]) int2objectmap.get(villagerdata.getLevel());
+
+            if (avillagertrades_imerchantrecipeoption != null) {
+                MerchantOffers merchantrecipelist = this.getOffers();
+
+                this.addOffersFromItemListings(merchantrecipelist, avillagertrades_imerchantrecipeoption, 2);
             }
         }
     }
@@ -791,25 +960,28 @@
     }
 
     private void maybeDecayGossip() {
-        long l = this.level.getGameTime();
+        long i = this.level.getGameTime();
+
         if (this.lastGossipDecayTime == 0L) {
-            this.lastGossipDecayTime = l;
-        } else if (l >= this.lastGossipDecayTime + 24000L) {
+            this.lastGossipDecayTime = i;
+        } else if (i >= this.lastGossipDecayTime + 24000L) {
             this.gossips.decay();
-            this.lastGossipDecayTime = l;
+            this.lastGossipDecayTime = i;
         }
     }
 
     public void spawnGolemIfNeeded(ServerLevel world, long time, int requiredCount) {
         if (this.wantsToSpawnGolem(time)) {
-            AABB aABB = this.getBoundingBox().inflate(10.0D, 10.0D, 10.0D);
-            List<Villager> list = world.getEntitiesOfClass(Villager.class, aABB);
-            List<Villager> list2 = list.stream().filter((villager) -> {
-                return villager.wantsToSpawnGolem(time);
+            AABB axisalignedbb = this.getBoundingBox().inflate(10.0D, 10.0D, 10.0D);
+            List<Villager> list = world.getEntitiesOfClass(Villager.class, axisalignedbb);
+            List<Villager> list1 = (List) list.stream().filter((entityvillager) -> {
+                return entityvillager.wantsToSpawnGolem(time);
             }).limit(5L).collect(Collectors.toList());
-            if (list2.size() >= requiredCount) {
-                IronGolem ironGolem = this.trySpawnGolem(world);
-                if (ironGolem != null) {
+
+            if (list1.size() >= requiredCount) {
+                IronGolem entityirongolem = this.trySpawnGolem(world);
+
+                if (entityirongolem != null) {
                     list.forEach(GolemSensor::golemDetected);
                 }
             }
@@ -817,30 +989,43 @@
     }
 
     public boolean wantsToSpawnGolem(long time) {
-        if (!this.golemSpawnConditionsMet(this.level.getGameTime())) {
-            return false;
-        } else {
-            return !this.brain.hasMemoryValue(MemoryModuleType.GOLEM_DETECTED_RECENTLY);
-        }
+        return !this.golemSpawnConditionsMet(this.level.getGameTime()) ? false : !this.brain.hasMemoryValue(MemoryModuleType.GOLEM_DETECTED_RECENTLY);
     }
 
     @Nullable
     private IronGolem trySpawnGolem(ServerLevel world) {
-        BlockPos blockPos = this.blockPosition();
+        BlockPos blockposition = this.blockPosition();
 
-        for(int i = 0; i < 10; ++i) {
-            double d = (double)(world.random.nextInt(16) - 8);
-            double e = (double)(world.random.nextInt(16) - 8);
-            BlockPos blockPos2 = this.findSpawnPositionForGolemInColumn(blockPos, d, e);
-            if (blockPos2 != null) {
-                IronGolem ironGolem = EntityType.IRON_GOLEM.create(world, (CompoundTag)null, (Component)null, (Player)null, blockPos2, MobSpawnType.MOB_SUMMONED, false, false);
-                if (ironGolem != null) {
-                    if (ironGolem.checkSpawnRules(world, MobSpawnType.MOB_SUMMONED) && ironGolem.checkSpawnObstruction(world)) {
-                        world.addFreshEntityWithPassengers(ironGolem);
-                        return ironGolem;
+        for (int i = 0; i < 10; ++i) {
+            double d0 = (double) (world.random.nextInt(16) - 8);
+            double d1 = (double) (world.random.nextInt(16) - 8);
+            BlockPos blockposition1 = this.findSpawnPositionForGolemInColumn(blockposition, d0, d1);
+
+            if (blockposition1 != null) {
+                // Paper start - Call PreCreatureSpawnEvent
+                com.destroystokyo.paper.event.entity.PreCreatureSpawnEvent event;
+                event = new com.destroystokyo.paper.event.entity.PreCreatureSpawnEvent(
+                    net.minecraft.server.MCUtil.toLocation(level, blockposition1),
+                    org.bukkit.entity.EntityType.IRON_GOLEM,
+                    org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.VILLAGE_DEFENSE
+                );
+                if (!event.callEvent()) {
+                    if (event.shouldAbortSpawn()) {
+                        GolemSensor.golemDetected(this); // Set Golem Last Seen to stop it from spawning another one
+                        return null;
                     }
+                    break;
+                }
+                // Paper end
+                IronGolem entityirongolem = (IronGolem) EntityType.IRON_GOLEM.create(world, (CompoundTag) null, (Component) null, (Player) null, blockposition1, MobSpawnType.MOB_SUMMONED, false, false);
 
-                    ironGolem.discard();
+                if (entityirongolem != null) {
+                    if (entityirongolem.checkSpawnRules((LevelAccessor) world, MobSpawnType.MOB_SUMMONED) && entityirongolem.checkSpawnObstruction((LevelReader) world)) {
+                        world.addAllEntities(entityirongolem, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.VILLAGE_DEFENSE); // CraftBukkit
+                        return entityirongolem;
+                    }
+
+                    entityirongolem.discard();
                 }
             }
         }
@@ -850,25 +1035,36 @@
 
     @Nullable
     private BlockPos findSpawnPositionForGolemInColumn(BlockPos pos, double x, double z) {
-        int i = 6;
-        BlockPos blockPos = pos.offset(x, 6.0D, z);
-        BlockState blockState = this.level.getBlockState(blockPos);
+        boolean flag = true;
+        BlockPos blockposition1 = pos.offset(x, 6.0D, z);
+        BlockState iblockdata = this.level.getBlockState(blockposition1);
 
-        for(int j = 6; j >= -6; --j) {
-            BlockPos blockPos2 = blockPos;
-            BlockState blockState2 = blockState;
-            blockPos = blockPos.below();
-            blockState = this.level.getBlockState(blockPos);
-            if ((blockState2.isAir() || blockState2.getMaterial().isLiquid()) && blockState.getMaterial().isSolidBlocking()) {
-                return blockPos2;
+        for (int i = 6; i >= -6; --i) {
+            BlockPos blockposition2 = blockposition1;
+            BlockState iblockdata1 = iblockdata;
+
+            blockposition1 = blockposition1.below();
+            iblockdata = this.level.getBlockState(blockposition1);
+            if ((iblockdata1.isAir() || iblockdata1.getMaterial().isLiquid()) && iblockdata.getMaterial().isSolidBlocking()) {
+                return blockposition2;
             }
         }
 
         return null;
     }
 
+    @Override
     public void onReputationEventFrom(ReputationEventType interaction, Entity entity) {
         if (interaction == ReputationEventType.ZOMBIE_VILLAGER_CURED) {
+            // Paper start - fix MC-181190
+            if (level.paperConfig.fixCuringZombieVillagerDiscountExploit) {
+                final GossipContainer.EntityGossips playerReputation = this.getGossips().getReputations().get(entity.getUUID());
+                if (playerReputation != null) {
+                    playerReputation.remove(GossipType.MAJOR_POSITIVE);
+                    playerReputation.remove(GossipType.MINOR_POSITIVE);
+                }
+            }
+            // Paper end
             this.gossips.add(entity.getUUID(), GossipType.MAJOR_POSITIVE, 20);
             this.gossips.add(entity.getUUID(), GossipType.MINOR_POSITIVE, 25);
         } else if (interaction == ReputationEventType.TRADE) {
@@ -881,6 +1077,7 @@
 
     }
 
+    @Override
     public int getVillagerXp() {
         return this.villagerXp;
     }
@@ -899,32 +1096,32 @@
     }
 
     public void setGossips(Tag nbt) {
-        this.gossips.update(new Dynamic<>(NbtOps.INSTANCE, nbt));
+        this.gossips.update(new Dynamic(NbtOps.INSTANCE, nbt));
     }
 
+    @Override
     protected void sendDebugPackets() {
         super.sendDebugPackets();
-        DebugPackets.sendEntityBrain(this);
+        DebugPackets.sendEntityBrain((LivingEntity) this);
     }
 
+    @Override
     public void startSleeping(BlockPos pos) {
         super.startSleeping(pos);
-        this.brain.setMemory(MemoryModuleType.LAST_SLEPT, this.level.getGameTime());
+        this.brain.setMemory(MemoryModuleType.LAST_SLEPT, this.level.getGameTime()); // CraftBukkit - decompile error
         this.brain.eraseMemory(MemoryModuleType.WALK_TARGET);
         this.brain.eraseMemory(MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE);
     }
 
+    @Override
     public void stopSleeping() {
         super.stopSleeping();
-        this.brain.setMemory(MemoryModuleType.LAST_WOKEN, this.level.getGameTime());
+        this.brain.setMemory(MemoryModuleType.LAST_WOKEN, this.level.getGameTime()); // CraftBukkit - decompile error
     }
 
     private boolean golemSpawnConditionsMet(long worldTime) {
         Optional<Long> optional = this.brain.getMemory(MemoryModuleType.LAST_SLEPT);
-        if (optional.isPresent()) {
-            return worldTime - optional.get() < 24000L;
-        } else {
-            return false;
-        }
+
+        return optional.isPresent() ? worldTime - (Long) optional.get() < 24000L : false;
     }
 }
