--- a/net/minecraft/advancements/critereon/SimpleCriterionTrigger.java
+++ b/net/minecraft/advancements/critereon/SimpleCriterionTrigger.java
@@ -14,31 +14,37 @@
 import net.minecraft.world.level.storage.loot.LootContext;
 
 public abstract class SimpleCriterionTrigger<T extends AbstractCriterionTriggerInstance> implements CriterionTrigger<T> {
-    private final Map<PlayerAdvancements, Set<CriterionTrigger.Listener<T>>> players = Maps.newIdentityHashMap();
+    //private final Map<PlayerAdvancements, Set<CriterionTrigger.Listener<T>>> players = Maps.newIdentityHashMap(); // Paper - moved into AdvancementDataPlayer to fix memory leak
 
+    public SimpleCriterionTrigger() {}
+
+    @Override
     public final void addPlayerListener(PlayerAdvancements manager, CriterionTrigger.Listener<T> conditions) {
-        this.players.computeIfAbsent(manager, (managerx) -> {
+        manager.criterionData.computeIfAbsent(this, (managerx) -> { // Paper - fix AdvancementDataPlayer leak
             return Sets.newHashSet();
         }).add(conditions);
     }
 
+    @Override
     public final void removePlayerListener(PlayerAdvancements manager, CriterionTrigger.Listener<T> conditions) {
-        Set<CriterionTrigger.Listener<T>> set = this.players.get(manager);
+        Set<CriterionTrigger.Listener<T>> set = (Set) manager.criterionData.get(this); // Paper - fix AdvancementDataPlayer leak
         if (set != null) {
             set.remove(conditions);
             if (set.isEmpty()) {
-                this.players.remove(manager);
+                manager.criterionData.remove(this); // Paper - fix AdvancementDataPlayer leak
             }
         }
 
     }
 
+    @Override
     public final void removePlayerListeners(PlayerAdvancements tracker) {
-        this.players.remove(tracker);
+        tracker.criterionData.remove(this); // Paper - fix AdvancementDataPlayer leak
     }
 
     protected abstract T createInstance(JsonObject obj, EntityPredicate.Composite playerPredicate, DeserializationContext predicateDeserializer);
 
+    @Override
     public final T createInstance(JsonObject jsonObject, DeserializationContext deserializationContext) {
         EntityPredicate.Composite composite = EntityPredicate.Composite.fromJson(jsonObject, "player", deserializationContext);
         return this.createInstance(jsonObject, composite, deserializationContext);
@@ -46,7 +52,7 @@
 
     protected void trigger(ServerPlayer player, Predicate<T> tester) {
         PlayerAdvancements playerAdvancements = player.getAdvancements();
-        Set<CriterionTrigger.Listener<T>> set = this.players.get(playerAdvancements);
+        Set<CriterionTrigger.Listener<T>> set = (Set) playerAdvancements.criterionData.get(this); // Paper - fix AdvancementDataPlayer leak
         if (set != null && !set.isEmpty()) {
             LootContext lootContext = EntityPredicate.createContext(player, player);
             List<CriterionTrigger.Listener<T>> list = null;
