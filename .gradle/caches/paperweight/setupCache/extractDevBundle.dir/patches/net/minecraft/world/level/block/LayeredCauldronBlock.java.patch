--- a/net/minecraft/world/level/block/LayeredCauldronBlock.java
+++ b/net/minecraft/world/level/block/LayeredCauldronBlock.java
@@ -13,77 +13,124 @@
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.IntegerProperty;
+import net.minecraft.world.level.block.state.properties.Property;
 import net.minecraft.world.level.material.Fluid;
 import net.minecraft.world.level.material.Fluids;
+// CraftBukkit start
+import org.bukkit.craftbukkit.v1_17_R1.block.CraftBlockState;
+import org.bukkit.event.block.CauldronLevelChangeEvent;
+// CraftBukkit end
 
 public class LayeredCauldronBlock extends AbstractCauldronBlock {
+
     public static final int MIN_FILL_LEVEL = 1;
     public static final int MAX_FILL_LEVEL = 3;
     public static final IntegerProperty LEVEL = BlockStateProperties.LEVEL_CAULDRON;
     private static final int BASE_CONTENT_HEIGHT = 6;
     private static final double HEIGHT_PER_LEVEL = 3.0D;
-    public static final Predicate<Biome.Precipitation> RAIN = (precipitation) -> {
-        return precipitation == Biome.Precipitation.RAIN;
+    public static final Predicate<Biome.Precipitation> RAIN = (biomebase_precipitation) -> {
+        return biomebase_precipitation == Biome.Precipitation.RAIN;
     };
-    public static final Predicate<Biome.Precipitation> SNOW = (precipitation) -> {
-        return precipitation == Biome.Precipitation.SNOW;
+    public static final Predicate<Biome.Precipitation> SNOW = (biomebase_precipitation) -> {
+        return biomebase_precipitation == Biome.Precipitation.SNOW;
     };
     private final Predicate<Biome.Precipitation> fillPredicate;
 
     public LayeredCauldronBlock(BlockBehaviour.Properties settings, Predicate<Biome.Precipitation> precipitationPredicate, Map<Item, CauldronInteraction> behaviorMap) {
         super(settings, behaviorMap);
         this.fillPredicate = precipitationPredicate;
-        this.registerDefaultState(this.stateDefinition.any().setValue(LEVEL, Integer.valueOf(1)));
+        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(LayeredCauldronBlock.LEVEL, 1));
     }
 
+    @Override
     public boolean isFull(BlockState state) {
-        return state.getValue(LEVEL) == 3;
+        return (Integer) state.getValue(LayeredCauldronBlock.LEVEL) == 3;
     }
 
+    @Override
     protected boolean canReceiveStalactiteDrip(Fluid fluid) {
-        return fluid == Fluids.WATER && this.fillPredicate == RAIN;
+        return fluid == Fluids.WATER && this.fillPredicate == LayeredCauldronBlock.RAIN;
     }
 
+    @Override
     protected double getContentHeight(BlockState state) {
-        return (6.0D + (double)state.getValue(LEVEL).intValue() * 3.0D) / 16.0D;
+        return (6.0D + (double) (Integer) state.getValue(LayeredCauldronBlock.LEVEL) * 3.0D) / 16.0D;
     }
 
+    @Override
     public void entityInside(BlockState state, Level world, BlockPos pos, Entity entity) {
+        if (!new io.papermc.paper.event.entity.EntityInsideBlockEvent(entity.getBukkitEntity(), org.bukkit.craftbukkit.v1_17_R1.block.CraftBlock.at(world, pos)).callEvent()) { return; } // Paper
         if (!world.isClientSide && entity.isOnFire() && this.isEntityInsideContent(state, pos, entity)) {
-            entity.clearFire();
+            // CraftBukkit start
             if (entity.mayInteract(world, pos)) {
-                this.handleEntityOnFireInside(state, world, pos);
+                if (!LayeredCauldronBlock.decreaseLevel(state, world, pos, entity, CauldronLevelChangeEvent.ChangeReason.EXTINGUISH)) {
+                    return;
+                }
             }
+            entity.clearFire();
+            // CraftBukkit end
         }
 
     }
 
     protected void handleEntityOnFireInside(BlockState state, Level world, BlockPos pos) {
-        lowerFillLevel(state, world, pos);
+        LayeredCauldronBlock.lowerFillLevel(state, world, pos);
     }
 
     public static void lowerFillLevel(BlockState state, Level world, BlockPos pos) {
-        int i = state.getValue(LEVEL) - 1;
-        world.setBlockAndUpdate(pos, i == 0 ? Blocks.CAULDRON.defaultBlockState() : state.setValue(LEVEL, Integer.valueOf(i)));
+        // CraftBukkit start
+        LayeredCauldronBlock.decreaseLevel(state, world, pos, null, CauldronLevelChangeEvent.ChangeReason.UNKNOWN);
     }
 
+    public static boolean decreaseLevel(BlockState iblockdata, Level world, BlockPos blockposition, Entity entity, CauldronLevelChangeEvent.ChangeReason reason) {
+        int i = (Integer) iblockdata.getValue(LayeredCauldronBlock.LEVEL) - 1;
+
+        return LayeredCauldronBlock.changeLevel(iblockdata, world, blockposition, i == 0 ? Blocks.CAULDRON.defaultBlockState() : iblockdata.setValue(LayeredCauldronBlock.LEVEL, i), entity, reason);
+    }
+
+    // CraftBukkit start
+    public static boolean changeLevel(BlockState iblockdata, Level world, BlockPos blockposition, BlockState newBlock, Entity entity, CauldronLevelChangeEvent.ChangeReason reason) {
+        CraftBlockState newState = CraftBlockState.getBlockState(world, blockposition);
+        newState.setData(newBlock);
+
+        CauldronLevelChangeEvent event = new CauldronLevelChangeEvent(
+                world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()),
+                (entity == null) ? null : entity.getBukkitEntity(), reason, newState
+        );
+        world.getCraftServer().getPluginManager().callEvent(event);
+        if (event.isCancelled()) {
+            return false;
+        }
+        newState.update(true);
+        return true;
+    }
+    // CraftBukkit end
+
+    @Override
     public void handlePrecipitation(BlockState state, Level world, BlockPos pos, Biome.Precipitation precipitation) {
-        if (CauldronBlock.shouldHandlePrecipitation(world, precipitation) && state.getValue(LEVEL) != 3 && this.fillPredicate.test(precipitation)) {
-            world.setBlockAndUpdate(pos, state.cycle(LEVEL));
+        if (CauldronBlock.shouldHandlePrecipitation(world, precipitation) && (Integer) state.getValue(LayeredCauldronBlock.LEVEL) != 3 && this.fillPredicate.test(precipitation)) {
+            LayeredCauldronBlock.changeLevel(state, world, pos, (BlockState) state.cycle((Property) LayeredCauldronBlock.LEVEL), null, CauldronLevelChangeEvent.ChangeReason.NATURAL_FILL); // CraftBukkit
         }
     }
 
+    @Override
     public int getAnalogOutputSignal(BlockState state, Level world, BlockPos pos) {
-        return state.getValue(LEVEL);
+        return (Integer) state.getValue(LayeredCauldronBlock.LEVEL);
     }
 
+    @Override
     protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
-        builder.add(LEVEL);
+        builder.add(LayeredCauldronBlock.LEVEL);
     }
 
+    @Override
     protected void receiveStalactiteDrip(BlockState state, Level world, BlockPos pos, Fluid fluid) {
         if (!this.isFull(state)) {
-            world.setBlockAndUpdate(pos, state.setValue(LEVEL, Integer.valueOf(state.getValue(LEVEL) + 1)));
+            // CraftBukkit start
+            if (!LayeredCauldronBlock.changeLevel(state, world, pos, (BlockState) state.setValue(LayeredCauldronBlock.LEVEL, (Integer) state.getValue(LayeredCauldronBlock.LEVEL) + 1), null, CauldronLevelChangeEvent.ChangeReason.NATURAL_FILL)) {
+                return;
+            }
+            // CraftBukkit end
             world.levelEvent(1047, pos, 0);
         }
     }
