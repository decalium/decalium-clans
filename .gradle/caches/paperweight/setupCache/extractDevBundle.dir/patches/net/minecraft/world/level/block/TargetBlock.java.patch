--- a/net/minecraft/world/level/block/TargetBlock.java
+++ b/net/minecraft/world/level/block/TargetBlock.java
@@ -32,8 +32,13 @@
         this.registerDefaultState(this.stateDefinition.any().setValue(OUTPUT_POWER, Integer.valueOf(0)));
     }
 
+    @Override
     public void onProjectileHit(Level world, BlockState state, BlockHitResult hit, Projectile projectile) {
         int i = updateRedstoneOutput(world, state, hit, projectile);
+        // Paper start
+    }
+    private static void awardTargetHitCriteria(Projectile projectile, BlockHitResult hit, int i) {
+        // Paper end
         Entity entity = projectile.getOwner();
         if (entity instanceof ServerPlayer) {
             ServerPlayer serverPlayer = (ServerPlayer)entity;
@@ -46,6 +51,20 @@
     private static int updateRedstoneOutput(LevelAccessor world, BlockState state, BlockHitResult hitResult, Entity entity) {
         int i = getRedstoneStrength(hitResult, hitResult.getLocation());
         int j = entity instanceof AbstractArrow ? 20 : 8;
+        // Paper start
+        if (entity instanceof Projectile) {
+            final Projectile projectile = (Projectile) entity;
+            final org.bukkit.craftbukkit.v1_17_R1.block.CraftBlock craftBlock = org.bukkit.craftbukkit.v1_17_R1.block.CraftBlock.at(world, hitResult.getBlockPos());
+            final org.bukkit.block.BlockFace blockFace = org.bukkit.craftbukkit.v1_17_R1.block.CraftBlock.notchToBlockFace(hitResult.getDirection());
+            final io.papermc.paper.event.block.TargetHitEvent targetHitEvent = new io.papermc.paper.event.block.TargetHitEvent((org.bukkit.entity.Projectile) projectile.getBukkitEntity(), craftBlock, blockFace, i);
+            if (targetHitEvent.callEvent()) {
+                i = targetHitEvent.getSignalStrength();
+                awardTargetHitCriteria(projectile, hitResult, i);
+            } else {
+                return i;
+            }
+        }
+        // Paper end
         if (!world.getBlockTicks().hasScheduledTick(hitResult.getBlockPos(), state.getBlock())) {
             setOutputPower(world, state, i, hitResult.getBlockPos(), j);
         }
@@ -76,6 +95,7 @@
         world.getBlockTicks().scheduleTick(pos, state.getBlock(), delay);
     }
 
+    @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, Random random) {
         if (state.getValue(OUTPUT_POWER) != 0) {
             world.setBlock(pos, state.setValue(OUTPUT_POWER, Integer.valueOf(0)), 3);
@@ -83,18 +103,22 @@
 
     }
 
+    @Override
     public int getSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
         return state.getValue(OUTPUT_POWER);
     }
 
+    @Override
     public boolean isSignalSource(BlockState state) {
         return true;
     }
 
+    @Override
     protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
         builder.add(OUTPUT_POWER);
     }
 
+    @Override
     public void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
         if (!world.isClientSide() && !state.is(oldState.getBlock())) {
             if (state.getValue(OUTPUT_POWER) > 0 && !world.getBlockTicks().hasScheduledTick(pos, this)) {
