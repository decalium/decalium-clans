--- a/net/minecraft/world/level/block/AzaleaBlock.java
+++ b/net/minecraft/world/level/block/AzaleaBlock.java
@@ -7,12 +7,18 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.grower.AzaleaTreeGrower;
 import net.minecraft.world.level.block.state.BlockBehaviour;
-import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
+// CraftBukkit start
+import org.bukkit.Location;
+import org.bukkit.TreeType;
+import org.bukkit.block.BlockState;
+import org.bukkit.event.world.StructureGrowEvent;
+// CraftBukkit end
 
 public class AzaleaBlock extends BushBlock implements BonemealableBlock {
+
     private static final AzaleaTreeGrower TREE_GROWER = new AzaleaTreeGrower();
     private static final VoxelShape SHAPE = Shapes.or(Block.box(0.0D, 8.0D, 0.0D, 16.0D, 16.0D, 16.0D), Block.box(6.0D, 0.0D, 6.0D, 10.0D, 8.0D, 10.0D));
 
@@ -20,23 +26,51 @@
         super(settings);
     }
 
-    public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return SHAPE;
+    @Override
+    public VoxelShape getShape(net.minecraft.world.level.block.state.BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
+        return AzaleaBlock.SHAPE;
     }
 
-    protected boolean mayPlaceOn(BlockState floor, BlockGetter world, BlockPos pos) {
+    @Override
+    protected boolean mayPlaceOn(net.minecraft.world.level.block.state.BlockState floor, BlockGetter world, BlockPos pos) {
         return floor.is(Blocks.CLAY) || super.mayPlaceOn(floor, world, pos);
     }
 
-    public boolean isValidBonemealTarget(BlockGetter world, BlockPos pos, BlockState state, boolean isClient) {
+    @Override
+    public boolean isValidBonemealTarget(BlockGetter world, BlockPos pos, net.minecraft.world.level.block.state.BlockState state, boolean isClient) {
         return world.getFluidState(pos.above()).isEmpty();
     }
 
-    public boolean isBonemealSuccess(Level world, Random random, BlockPos pos, BlockState state) {
-        return (double)world.random.nextFloat() < 0.45D;
+    @Override
+    public boolean isBonemealSuccess(Level world, Random random, BlockPos pos, net.minecraft.world.level.block.state.BlockState state) {
+        return (double) world.random.nextFloat() < 0.45D;
     }
 
-    public void performBonemeal(ServerLevel world, Random random, BlockPos pos, BlockState state) {
-        TREE_GROWER.growTree(world, world.getChunkSource().getGenerator(), pos, state, random);
+    @Override
+    public void performBonemeal(ServerLevel world, Random random, BlockPos pos, net.minecraft.world.level.block.state.BlockState state) {
+        // CraftBukkit start
+        world.captureTreeGeneration = true;
+        // CraftBukkit end
+        AzaleaBlock.TREE_GROWER.growTree(world, world.getChunkSource().getGenerator(), pos, state, random);
+        // CraftBukkit start
+        world.captureTreeGeneration = false;
+        if (world.capturedBlockStates.size() > 0) {
+            TreeType treeType = SaplingBlock.treeType;
+            SaplingBlock.treeType = null;
+            Location location = new Location(world.getWorld(), pos.getX(), pos.getY(), pos.getZ());
+            java.util.List<BlockState> blocks = new java.util.ArrayList<>(world.capturedBlockStates.values());
+            world.capturedBlockStates.clear();
+            StructureGrowEvent event = null;
+            if (treeType != null) {
+                event = new StructureGrowEvent(location, treeType, false, null, blocks);
+                org.bukkit.Bukkit.getPluginManager().callEvent(event);
+            }
+            if (event == null || !event.isCancelled()) {
+                for (BlockState blockstate : blocks) {
+                    blockstate.update(true);
+                }
+            }
+        }
+        // CraftBukkit end
     }
 }
