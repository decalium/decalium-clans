--- a/net/minecraft/world/level/block/FrostedIceBlock.java
+++ b/net/minecraft/world/level/block/FrostedIceBlock.java
@@ -25,24 +25,28 @@
         this.registerDefaultState(this.stateDefinition.any().setValue(AGE, Integer.valueOf(0)));
     }
 
+    @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, Random random) {
         this.tick(state, world, pos, random);
     }
 
+    @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, Random random) {
+        if (!world.paperConfig.frostedIceEnabled) return; // Paper - add ability to disable frosted ice
         if ((random.nextInt(3) == 0 || this.fewerNeigboursThan(world, pos, 4)) && world.getMaxLocalRawBrightness(pos) > 11 - state.getValue(AGE) - state.getLightBlock(world, pos) && this.slightlyMelt(state, world, pos)) {
             BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos();
 
             for(Direction direction : Direction.values()) {
                 mutableBlockPos.setWithOffset(pos, direction);
-                BlockState blockState = world.getBlockState(mutableBlockPos);
+                BlockState blockState = world.getTypeIfLoaded(mutableBlockPos); // Paper
+                if (blockState == null) { continue; } // Paper
                 if (blockState.is(this) && !this.slightlyMelt(blockState, world, mutableBlockPos)) {
-                    world.getBlockTicks().scheduleTick(mutableBlockPos, this, Mth.nextInt(random, 20, 40));
+                    world.getBlockTicks().scheduleTick(mutableBlockPos, this, Mth.nextInt(random, world.paperConfig.frostedIceDelayMin, world.paperConfig.frostedIceDelayMax)); // Paper - use configurable min/max delay
                 }
             }
 
         } else {
-            world.getBlockTicks().scheduleTick(pos, this, Mth.nextInt(random, 20, 40));
+            world.getBlockTicks().scheduleTick(pos, this, Mth.nextInt(random, world.paperConfig.frostedIceDelayMin, world.paperConfig.frostedIceDelayMax)); // Paper - use configurable min/max delay
         }
     }
 
@@ -57,6 +61,7 @@
         }
     }
 
+    @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block block, BlockPos fromPos, boolean notify) {
         if (block.defaultBlockState().is(this) && this.fewerNeigboursThan(world, pos, 2)) {
             this.melt(state, world, pos);
@@ -71,7 +76,10 @@
 
         for(Direction direction : Direction.values()) {
             mutableBlockPos.setWithOffset(pos, direction);
-            if (world.getBlockState(mutableBlockPos).is(this)) {
+            // Paper start
+            BlockState blockState = world.getTypeIfLoaded(mutableBlockPos);
+            if (blockState != null && blockState.is(this)) {
+                // Paper end
                 ++i;
                 if (i >= maxNeighbors) {
                     return false;
@@ -82,10 +90,12 @@
         return true;
     }
 
+    @Override
     protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
         builder.add(AGE);
     }
 
+    @Override
     public ItemStack getCloneItemStack(BlockGetter world, BlockPos pos, BlockState state) {
         return ItemStack.EMPTY;
     }
