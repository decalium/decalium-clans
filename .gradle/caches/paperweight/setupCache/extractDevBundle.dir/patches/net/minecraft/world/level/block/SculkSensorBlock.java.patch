--- a/net/minecraft/world/level/block/SculkSensorBlock.java
+++ b/net/minecraft/world/level/block/SculkSensorBlock.java
@@ -17,6 +17,7 @@
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.entity.BlockEntityTicker;
 import net.minecraft.world.level.block.entity.BlockEntityType;
@@ -36,56 +37,61 @@
 import net.minecraft.world.level.pathfinder.PathComputationType;
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.VoxelShape;
+// CraftBukkit start
+import org.bukkit.craftbukkit.v1_17_R1.block.CraftBlock;
+import org.bukkit.event.block.BlockRedstoneEvent;
+// CraftBukkit end
 
 public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterloggedBlock {
+
     public static final int ACTIVE_TICKS = 40;
     public static final int COOLDOWN_TICKS = 1;
-    public static final Object2IntMap<GameEvent> VIBRATION_STRENGTH_FOR_EVENT = Object2IntMaps.unmodifiable(Util.make(new Object2IntOpenHashMap<>(), (map) -> {
-        map.put(GameEvent.STEP, 1);
-        map.put(GameEvent.FLAP, 2);
-        map.put(GameEvent.SWIM, 3);
-        map.put(GameEvent.ELYTRA_FREE_FALL, 4);
-        map.put(GameEvent.HIT_GROUND, 5);
-        map.put(GameEvent.SPLASH, 6);
-        map.put(GameEvent.WOLF_SHAKING, 6);
-        map.put(GameEvent.MINECART_MOVING, 6);
-        map.put(GameEvent.RING_BELL, 6);
-        map.put(GameEvent.BLOCK_CHANGE, 6);
-        map.put(GameEvent.PROJECTILE_SHOOT, 7);
-        map.put(GameEvent.DRINKING_FINISH, 7);
-        map.put(GameEvent.PRIME_FUSE, 7);
-        map.put(GameEvent.PROJECTILE_LAND, 8);
-        map.put(GameEvent.EAT, 8);
-        map.put(GameEvent.MOB_INTERACT, 8);
-        map.put(GameEvent.ENTITY_DAMAGED, 8);
-        map.put(GameEvent.EQUIP, 9);
-        map.put(GameEvent.SHEAR, 9);
-        map.put(GameEvent.RAVAGER_ROAR, 9);
-        map.put(GameEvent.BLOCK_CLOSE, 10);
-        map.put(GameEvent.BLOCK_UNSWITCH, 10);
-        map.put(GameEvent.BLOCK_UNPRESS, 10);
-        map.put(GameEvent.BLOCK_DETACH, 10);
-        map.put(GameEvent.DISPENSE_FAIL, 10);
-        map.put(GameEvent.BLOCK_OPEN, 11);
-        map.put(GameEvent.BLOCK_SWITCH, 11);
-        map.put(GameEvent.BLOCK_PRESS, 11);
-        map.put(GameEvent.BLOCK_ATTACH, 11);
-        map.put(GameEvent.ENTITY_PLACE, 12);
-        map.put(GameEvent.BLOCK_PLACE, 12);
-        map.put(GameEvent.FLUID_PLACE, 12);
-        map.put(GameEvent.ENTITY_KILLED, 13);
-        map.put(GameEvent.BLOCK_DESTROY, 13);
-        map.put(GameEvent.FLUID_PICKUP, 13);
-        map.put(GameEvent.FISHING_ROD_REEL_IN, 14);
-        map.put(GameEvent.CONTAINER_CLOSE, 14);
-        map.put(GameEvent.PISTON_CONTRACT, 14);
-        map.put(GameEvent.SHULKER_CLOSE, 14);
-        map.put(GameEvent.PISTON_EXTEND, 15);
-        map.put(GameEvent.CONTAINER_OPEN, 15);
-        map.put(GameEvent.FISHING_ROD_CAST, 15);
-        map.put(GameEvent.EXPLODE, 15);
-        map.put(GameEvent.LIGHTNING_STRIKE, 15);
-        map.put(GameEvent.SHULKER_OPEN, 15);
+    public static final Object2IntMap<GameEvent> VIBRATION_STRENGTH_FOR_EVENT = Object2IntMaps.unmodifiable((Object2IntMap) Util.make((new Object2IntOpenHashMap()), (object2intopenhashmap) -> { // CraftBukkit - decompile error
+        object2intopenhashmap.put(GameEvent.STEP, 1);
+        object2intopenhashmap.put(GameEvent.FLAP, 2);
+        object2intopenhashmap.put(GameEvent.SWIM, 3);
+        object2intopenhashmap.put(GameEvent.ELYTRA_FREE_FALL, 4);
+        object2intopenhashmap.put(GameEvent.HIT_GROUND, 5);
+        object2intopenhashmap.put(GameEvent.SPLASH, 6);
+        object2intopenhashmap.put(GameEvent.WOLF_SHAKING, 6);
+        object2intopenhashmap.put(GameEvent.MINECART_MOVING, 6);
+        object2intopenhashmap.put(GameEvent.RING_BELL, 6);
+        object2intopenhashmap.put(GameEvent.BLOCK_CHANGE, 6);
+        object2intopenhashmap.put(GameEvent.PROJECTILE_SHOOT, 7);
+        object2intopenhashmap.put(GameEvent.DRINKING_FINISH, 7);
+        object2intopenhashmap.put(GameEvent.PRIME_FUSE, 7);
+        object2intopenhashmap.put(GameEvent.PROJECTILE_LAND, 8);
+        object2intopenhashmap.put(GameEvent.EAT, 8);
+        object2intopenhashmap.put(GameEvent.MOB_INTERACT, 8);
+        object2intopenhashmap.put(GameEvent.ENTITY_DAMAGED, 8);
+        object2intopenhashmap.put(GameEvent.EQUIP, 9);
+        object2intopenhashmap.put(GameEvent.SHEAR, 9);
+        object2intopenhashmap.put(GameEvent.RAVAGER_ROAR, 9);
+        object2intopenhashmap.put(GameEvent.BLOCK_CLOSE, 10);
+        object2intopenhashmap.put(GameEvent.BLOCK_UNSWITCH, 10);
+        object2intopenhashmap.put(GameEvent.BLOCK_UNPRESS, 10);
+        object2intopenhashmap.put(GameEvent.BLOCK_DETACH, 10);
+        object2intopenhashmap.put(GameEvent.DISPENSE_FAIL, 10);
+        object2intopenhashmap.put(GameEvent.BLOCK_OPEN, 11);
+        object2intopenhashmap.put(GameEvent.BLOCK_SWITCH, 11);
+        object2intopenhashmap.put(GameEvent.BLOCK_PRESS, 11);
+        object2intopenhashmap.put(GameEvent.BLOCK_ATTACH, 11);
+        object2intopenhashmap.put(GameEvent.ENTITY_PLACE, 12);
+        object2intopenhashmap.put(GameEvent.BLOCK_PLACE, 12);
+        object2intopenhashmap.put(GameEvent.FLUID_PLACE, 12);
+        object2intopenhashmap.put(GameEvent.ENTITY_KILLED, 13);
+        object2intopenhashmap.put(GameEvent.BLOCK_DESTROY, 13);
+        object2intopenhashmap.put(GameEvent.FLUID_PICKUP, 13);
+        object2intopenhashmap.put(GameEvent.FISHING_ROD_REEL_IN, 14);
+        object2intopenhashmap.put(GameEvent.CONTAINER_CLOSE, 14);
+        object2intopenhashmap.put(GameEvent.PISTON_CONTRACT, 14);
+        object2intopenhashmap.put(GameEvent.SHULKER_CLOSE, 14);
+        object2intopenhashmap.put(GameEvent.PISTON_EXTEND, 15);
+        object2intopenhashmap.put(GameEvent.CONTAINER_OPEN, 15);
+        object2intopenhashmap.put(GameEvent.FISHING_ROD_CAST, 15);
+        object2intopenhashmap.put(GameEvent.EXPLODE, 15);
+        object2intopenhashmap.put(GameEvent.LIGHTNING_STRIKE, 15);
+        object2intopenhashmap.put(GameEvent.SHULKER_OPEN, 15);
     }));
     public static final EnumProperty<SculkSensorPhase> PHASE = BlockStateProperties.SCULK_SENSOR_PHASE;
     public static final IntegerProperty POWER = BlockStateProperties.POWER;
@@ -95,7 +101,7 @@
 
     public SculkSensorBlock(BlockBehaviour.Properties settings, int range) {
         super(settings);
-        this.registerDefaultState(this.stateDefinition.any().setValue(PHASE, SculkSensorPhase.INACTIVE).setValue(POWER, Integer.valueOf(0)).setValue(WATERLOGGED, Boolean.valueOf(false)));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(SculkSensorBlock.PHASE, SculkSensorPhase.INACTIVE)).setValue(SculkSensorBlock.POWER, 0)).setValue(SculkSensorBlock.WATERLOGGED, false));
         this.listenerRange = range;
     }
 
@@ -104,50 +110,57 @@
     }
 
     @Nullable
+    @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
-        BlockPos blockPos = ctx.getClickedPos();
-        FluidState fluidState = ctx.getLevel().getFluidState(blockPos);
-        return this.defaultBlockState().setValue(WATERLOGGED, Boolean.valueOf(fluidState.getType() == Fluids.WATER));
+        BlockPos blockposition = ctx.getClickedPos();
+        FluidState fluid = ctx.getLevel().getFluidState(blockposition);
+
+        return (BlockState) this.defaultBlockState().setValue(SculkSensorBlock.WATERLOGGED, fluid.getType() == Fluids.WATER);
     }
 
+    @Override
     public FluidState getFluidState(BlockState state) {
-        return state.getValue(WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(state);
+        return (Boolean) state.getValue(SculkSensorBlock.WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(state);
     }
 
+    @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, Random random) {
-        if (getPhase(state) != SculkSensorPhase.ACTIVE) {
-            if (getPhase(state) == SculkSensorPhase.COOLDOWN) {
-                world.setBlock(pos, state.setValue(PHASE, SculkSensorPhase.INACTIVE), 3);
+        if (SculkSensorBlock.getPhase(state) != SculkSensorPhase.ACTIVE) {
+            if (SculkSensorBlock.getPhase(state) == SculkSensorPhase.COOLDOWN) {
+                world.setBlock(pos, (BlockState) state.setValue(SculkSensorBlock.PHASE, SculkSensorPhase.INACTIVE), 3);
             }
 
         } else {
-            deactivate(world, pos, state);
+            SculkSensorBlock.deactivate((Level) world, pos, state);
         }
     }
 
+    @Override
     public void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
         if (!world.isClientSide() && !state.is(oldState.getBlock())) {
-            if (state.getValue(POWER) > 0 && !world.getBlockTicks().hasScheduledTick(pos, this)) {
-                world.setBlock(pos, state.setValue(POWER, Integer.valueOf(0)), 18);
+            if ((Integer) state.getValue(SculkSensorBlock.POWER) > 0 && !world.getBlockTicks().hasScheduledTick(pos, this)) {
+                world.setBlock(pos, (BlockState) state.setValue(SculkSensorBlock.POWER, 0), 18);
             }
 
             world.getBlockTicks().scheduleTick(new BlockPos(pos), state.getBlock(), 1);
         }
     }
 
+    @Override
     public void onRemove(BlockState state, Level world, BlockPos pos, BlockState newState, boolean moved) {
         if (!state.is(newState.getBlock())) {
-            if (getPhase(state) == SculkSensorPhase.ACTIVE) {
-                updateNeighbours(world, pos);
+            if (SculkSensorBlock.getPhase(state) == SculkSensorPhase.ACTIVE) {
+                SculkSensorBlock.updateNeighbours(world, pos);
             }
 
             super.onRemove(state, world, pos, newState, moved);
         }
     }
 
+    @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
-            world.getLiquidTicks().scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+        if ((Boolean) state.getValue(SculkSensorBlock.WATERLOGGED)) {
+            world.getLiquidTicks().scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay((LevelReader) world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
@@ -159,101 +172,136 @@
     }
 
     @Nullable
+    @Override
     public BlockEntity newBlockEntity(BlockPos pos, BlockState state) {
         return new SculkSensorBlockEntity(pos, state);
     }
 
     @Nullable
+    @Override
     public <T extends BlockEntity> GameEventListener getListener(Level world, T blockEntity) {
-        return blockEntity instanceof SculkSensorBlockEntity ? ((SculkSensorBlockEntity)blockEntity).getListener() : null;
+        return blockEntity instanceof SculkSensorBlockEntity ? ((SculkSensorBlockEntity) blockEntity).getListener() : null;
     }
 
     @Nullable
+    @Override
     public <T extends BlockEntity> BlockEntityTicker<T> getTicker(Level world, BlockState state, BlockEntityType<T> type) {
-        return !world.isClientSide ? createTickerHelper(type, BlockEntityType.SCULK_SENSOR, (worldx, pos, statex, blockEntity) -> {
-            blockEntity.getListener().tick(worldx);
+        return !world.isClientSide ? createTickerHelper(type, BlockEntityType.SCULK_SENSOR, (world1, blockposition, iblockdata1, sculksensorblockentity) -> {
+            sculksensorblockentity.getListener().tick(world1);
         }) : null;
     }
 
+    @Override
     public RenderShape getRenderShape(BlockState state) {
         return RenderShape.MODEL;
     }
 
+    @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return SHAPE;
+        return SculkSensorBlock.SHAPE;
     }
 
+    @Override
     public boolean isSignalSource(BlockState state) {
         return true;
     }
 
+    @Override
     public int getSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return state.getValue(POWER);
+        return (Integer) state.getValue(SculkSensorBlock.POWER);
     }
 
     public static SculkSensorPhase getPhase(BlockState state) {
-        return state.getValue(PHASE);
+        return (SculkSensorPhase) state.getValue(SculkSensorBlock.PHASE);
     }
 
     public static boolean canActivate(BlockState state) {
-        return getPhase(state) == SculkSensorPhase.INACTIVE;
+        return SculkSensorBlock.getPhase(state) == SculkSensorPhase.INACTIVE;
     }
 
     public static void deactivate(Level world, BlockPos pos, BlockState state) {
-        world.setBlock(pos, state.setValue(PHASE, SculkSensorPhase.COOLDOWN).setValue(POWER, Integer.valueOf(0)), 3);
+        // CraftBukkit start
+        BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(CraftBlock.at(world, pos), state.getValue(SculkSensorBlock.POWER), 0);
+        world.getCraftServer().getPluginManager().callEvent(eventRedstone);
+
+        if (eventRedstone.getNewCurrent() > 0) {
+            world.setBlock(pos, state.setValue(SculkSensorBlock.POWER, eventRedstone.getNewCurrent()), 3);
+            return;
+        }
+        // CraftBukkit end
+        world.setBlock(pos, (BlockState) ((BlockState) state.setValue(SculkSensorBlock.PHASE, SculkSensorPhase.COOLDOWN)).setValue(SculkSensorBlock.POWER, 0), 3);
         world.getBlockTicks().scheduleTick(new BlockPos(pos), state.getBlock(), 1);
-        if (!state.getValue(WATERLOGGED)) {
-            world.playSound((Player)null, pos, SoundEvents.SCULK_CLICKING_STOP, SoundSource.BLOCKS, 1.0F, world.random.nextFloat() * 0.2F + 0.8F);
+        if (!(Boolean) state.getValue(SculkSensorBlock.WATERLOGGED)) {
+            world.playSound((Player) null, pos, SoundEvents.SCULK_CLICKING_STOP, SoundSource.BLOCKS, 1.0F, world.random.nextFloat() * 0.2F + 0.8F);
         }
 
-        updateNeighbours(world, pos);
+        SculkSensorBlock.updateNeighbours(world, pos);
     }
 
     public static void activate(Level world, BlockPos pos, BlockState state, int power) {
-        world.setBlock(pos, state.setValue(PHASE, SculkSensorPhase.ACTIVE).setValue(POWER, Integer.valueOf(power)), 3);
+        // CraftBukkit start
+        BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(CraftBlock.at(world, pos), state.getValue(SculkSensorBlock.POWER), power);
+        world.getCraftServer().getPluginManager().callEvent(eventRedstone);
+
+        if (eventRedstone.getNewCurrent() <= 0) {
+            return;
+        }
+        power = eventRedstone.getNewCurrent();
+        // CraftBukkit end
+        world.setBlock(pos, (BlockState) ((BlockState) state.setValue(SculkSensorBlock.PHASE, SculkSensorPhase.ACTIVE)).setValue(SculkSensorBlock.POWER, power), 3);
         world.getBlockTicks().scheduleTick(new BlockPos(pos), state.getBlock(), 40);
-        updateNeighbours(world, pos);
-        if (!state.getValue(WATERLOGGED)) {
-            world.playSound((Player)null, (double)pos.getX() + 0.5D, (double)pos.getY() + 0.5D, (double)pos.getZ() + 0.5D, SoundEvents.SCULK_CLICKING, SoundSource.BLOCKS, 1.0F, world.random.nextFloat() * 0.2F + 0.8F);
+        SculkSensorBlock.updateNeighbours(world, pos);
+        if (!(Boolean) state.getValue(SculkSensorBlock.WATERLOGGED)) {
+            world.playSound((Player) null, (double) pos.getX() + 0.5D, (double) pos.getY() + 0.5D, (double) pos.getZ() + 0.5D, SoundEvents.SCULK_CLICKING, SoundSource.BLOCKS, 1.0F, world.random.nextFloat() * 0.2F + 0.8F);
         }
 
     }
 
+    @Override
     public void animateTick(BlockState state, Level world, BlockPos pos, Random random) {
-        if (getPhase(state) == SculkSensorPhase.ACTIVE) {
-            Direction direction = Direction.getRandom(random);
-            if (direction != Direction.UP && direction != Direction.DOWN) {
-                double d = (double)pos.getX() + 0.5D + (direction.getStepX() == 0 ? 0.5D - random.nextDouble() : (double)direction.getStepX() * 0.6D);
-                double e = (double)pos.getY() + 0.25D;
-                double f = (double)pos.getZ() + 0.5D + (direction.getStepZ() == 0 ? 0.5D - random.nextDouble() : (double)direction.getStepZ() * 0.6D);
-                double g = (double)random.nextFloat() * 0.04D;
-                world.addParticle(DustColorTransitionOptions.SCULK_TO_REDSTONE, d, e, f, 0.0D, g, 0.0D);
+        if (SculkSensorBlock.getPhase(state) == SculkSensorPhase.ACTIVE) {
+            Direction enumdirection = Direction.getRandom(random);
+
+            if (enumdirection != Direction.UP && enumdirection != Direction.DOWN) {
+                double d0 = (double) pos.getX() + 0.5D + (enumdirection.getStepX() == 0 ? 0.5D - random.nextDouble() : (double) enumdirection.getStepX() * 0.6D);
+                double d1 = (double) pos.getY() + 0.25D;
+                double d2 = (double) pos.getZ() + 0.5D + (enumdirection.getStepZ() == 0 ? 0.5D - random.nextDouble() : (double) enumdirection.getStepZ() * 0.6D);
+                double d3 = (double) random.nextFloat() * 0.04D;
+
+                world.addParticle(DustColorTransitionOptions.SCULK_TO_REDSTONE, d0, d1, d2, 0.0D, d3, 0.0D);
             }
         }
     }
 
+    @Override
     protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
-        builder.add(PHASE, POWER, WATERLOGGED);
+        builder.add(SculkSensorBlock.PHASE, SculkSensorBlock.POWER, SculkSensorBlock.WATERLOGGED);
     }
 
+    @Override
     public boolean hasAnalogOutputSignal(BlockState state) {
         return true;
     }
 
+    @Override
     public int getAnalogOutputSignal(BlockState state, Level world, BlockPos pos) {
-        BlockEntity blockEntity = world.getBlockEntity(pos);
-        if (blockEntity instanceof SculkSensorBlockEntity) {
-            SculkSensorBlockEntity sculkSensorBlockEntity = (SculkSensorBlockEntity)blockEntity;
-            return getPhase(state) == SculkSensorPhase.ACTIVE ? sculkSensorBlockEntity.getLastVibrationFrequency() : 0;
+        BlockEntity tileentity = world.getBlockEntity(pos);
+
+        if (tileentity instanceof SculkSensorBlockEntity) {
+            SculkSensorBlockEntity sculksensorblockentity = (SculkSensorBlockEntity) tileentity;
+
+            return SculkSensorBlock.getPhase(state) == SculkSensorPhase.ACTIVE ? sculksensorblockentity.getLastVibrationFrequency() : 0;
         } else {
             return 0;
         }
     }
 
+    @Override
     public boolean isPathfindable(BlockState state, BlockGetter world, BlockPos pos, PathComputationType type) {
         return false;
     }
 
+    @Override
     public boolean useShapeForLightOcclusion(BlockState state) {
         return true;
     }
