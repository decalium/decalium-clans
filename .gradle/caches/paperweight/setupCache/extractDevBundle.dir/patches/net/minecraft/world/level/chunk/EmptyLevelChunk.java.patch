--- a/net/minecraft/world/level/chunk/EmptyLevelChunk.java
+++ b/net/minecraft/world/level/chunk/EmptyLevelChunk.java
@@ -19,48 +19,65 @@
         super(world, pos, new EmptyLevelChunk.EmptyChunkBiomeContainer(world));
     }
 
+    // Paper start
+    @Override public BlockState getType(int x, int y, int z) {
+        return Blocks.VOID_AIR.defaultBlockState();
+    }
+    // Paper end
+    @Override
     public BlockState getBlockState(BlockPos pos) {
         return Blocks.VOID_AIR.defaultBlockState();
     }
 
     @Nullable
+    @Override
     public BlockState setBlockState(BlockPos pos, BlockState state, boolean moved) {
         return null;
     }
 
+    @Override
     public FluidState getFluidState(BlockPos pos) {
         return Fluids.EMPTY.defaultFluidState();
     }
 
+    @Override
     public int getLightEmission(BlockPos pos) {
         return 0;
     }
 
     @Nullable
+    @Override
     public BlockEntity getBlockEntity(BlockPos pos, LevelChunk.EntityCreationType creationType) {
         return null;
     }
 
+    @Override
     public void addAndRegisterBlockEntity(BlockEntity blockEntity) {
     }
 
+    @Override
     public void setBlockEntity(BlockEntity blockEntity) {
     }
 
+    @Override
     public void removeBlockEntity(BlockPos pos) {
     }
 
+    @Override
     public void markUnsaved() {
     }
 
+    @Override
     public boolean isEmpty() {
         return true;
     }
 
+    @Override
     public boolean isYSpaceEmpty(int lowerHeight, int upperHeight) {
         return true;
     }
 
+    @Override
     public ChunkHolder.FullChunkStatus getFullStatus() {
         return ChunkHolder.FullChunkStatus.BORDER;
     }
@@ -69,13 +86,15 @@
         private static final Biome[] EMPTY_BIOMES = new Biome[0];
 
         public EmptyChunkBiomeContainer(Level world) {
-            super(world.registryAccess().registryOrThrow(Registry.BIOME_REGISTRY), world, EMPTY_BIOMES);
+            super(net.minecraft.server.MinecraftServer.getServer().registryAccess().registryOrThrow(Registry.BIOME_REGISTRY), world, EMPTY_BIOMES); // Paper - Anti-Xray - The world isnt ready yet, use server singleton for registry
         }
 
+        @Override
         public int[] writeBiomes() {
             throw new UnsupportedOperationException("Can not write biomes of an empty chunk");
         }
 
+        @Override
         public Biome getNoiseBiome(int biomeX, int biomeY, int biomeZ) {
             return Biomes.PLAINS;
         }
