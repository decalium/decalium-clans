--- a/net/minecraft/server/players/GameProfileCache.java
+++ b/net/minecraft/server/players/GameProfileCache.java
@@ -1,3 +1,4 @@
+// mc-dev import
 package net.minecraft.server.players;
 
 import com.google.common.collect.ImmutableList;
@@ -14,21 +15,23 @@
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.GameProfileRepository;
 import com.mojang.authlib.ProfileLookupCallback;
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
-import java.io.Reader;
-import java.io.Writer;
 import java.nio.charset.StandardCharsets;
 import java.text.DateFormat;
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
+import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.Comparator;
 import java.util.Date;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.UUID;
 import java.util.concurrent.CompletableFuture;
@@ -44,6 +47,7 @@
 import org.apache.logging.log4j.Logger;
 
 public class GameProfileCache {
+
     private static final Logger LOGGER = LogManager.getLogger();
     private static final int GAMEPROFILES_MRU_LIMIT = 1000;
     private static final int GAMEPROFILES_EXPIRATION_MONTHS = 1;
@@ -65,88 +69,106 @@
     }
 
     private void safeAdd(GameProfileCache.GameProfileInfo entry) {
-        GameProfile gameProfile = entry.getProfile();
+        GameProfile gameprofile = entry.getProfile();
+
         entry.setLastAccess(this.getNextOperation());
-        String string = gameProfile.getName();
-        if (string != null) {
-            this.profilesByName.put(string.toLowerCase(Locale.ROOT), entry);
+        String s = gameprofile.getName();
+
+        if (s != null) {
+            this.profilesByName.put(s.toLowerCase(Locale.ROOT), entry);
         }
 
-        UUID uUID = gameProfile.getId();
-        if (uUID != null) {
-            this.profilesByUUID.put(uUID, entry);
+        UUID uuid = gameprofile.getId();
+
+        if (uuid != null) {
+            this.profilesByUUID.put(uuid, entry);
         }
 
     }
 
     private static Optional<GameProfile> lookupGameProfile(GameProfileRepository repository, String name) {
-        final AtomicReference<GameProfile> atomicReference = new AtomicReference<>();
-        ProfileLookupCallback profileLookupCallback = new ProfileLookupCallback() {
-            public void onProfileLookupSucceeded(GameProfile gameProfile) {
-                atomicReference.set(gameProfile);
+        final AtomicReference<GameProfile> atomicreference = new AtomicReference();
+        ProfileLookupCallback profilelookupcallback = new ProfileLookupCallback() {
+            public void onProfileLookupSucceeded(GameProfile gameprofile) {
+                atomicreference.set(gameprofile);
             }
 
-            public void onProfileLookupFailed(GameProfile gameProfile, Exception exception) {
-                atomicReference.set((GameProfile)null);
+            public void onProfileLookupFailed(GameProfile gameprofile, Exception exception) {
+                atomicreference.set(null); // CraftBukkit - decompile error
             }
         };
-        repository.findProfilesByNames(new String[]{name}, Agent.MINECRAFT, profileLookupCallback);
-        GameProfile gameProfile = atomicReference.get();
-        if (!usesAuthentication() && gameProfile == null) {
-            UUID uUID = Player.createPlayerUUID(new GameProfile((UUID)null, name));
-            return Optional.of(new GameProfile(uUID, name));
+
+        if (com.destroystokyo.paper.PaperConfig.isProxyOnlineMode()) // Paper - only run in online mode - 100 COL
+        repository.findProfilesByNames(new String[]{name}, Agent.MINECRAFT, profilelookupcallback);
+        GameProfile gameprofile = (GameProfile) atomicreference.get();
+
+        if (!GameProfileCache.usesAuthentication() && gameprofile == null && !org.bukkit.craftbukkit.libs.org.apache.commons.lang3.StringUtils.isBlank(name)) { // Paper - Don't lookup a profile with a blank name
+            UUID uuid = Player.createPlayerUUID(new GameProfile((UUID) null, name));
+
+            return Optional.of(new GameProfile(uuid, name));
         } else {
-            return Optional.ofNullable(gameProfile);
+            return Optional.ofNullable(gameprofile);
         }
     }
 
     public static void setUsesAuthentication(boolean value) {
-        usesAuthentication = value;
+        GameProfileCache.usesAuthentication = value;
     }
 
     private static boolean usesAuthentication() {
-        return usesAuthentication;
+        return com.destroystokyo.paper.PaperConfig.isProxyOnlineMode(); // Paper
     }
 
-    public void add(GameProfile profile) {
+    public synchronized void add(GameProfile profile) { // Paper - synchronize
         Calendar calendar = Calendar.getInstance();
+
         calendar.setTime(new Date());
         calendar.add(2, 1);
         Date date = calendar.getTime();
-        GameProfileCache.GameProfileInfo gameProfileInfo = new GameProfileCache.GameProfileInfo(profile, date);
-        this.safeAdd(gameProfileInfo);
-        this.save();
+        GameProfileCache.GameProfileInfo usercache_usercacheentry = new GameProfileCache.GameProfileInfo(profile, date);
+
+        this.safeAdd(usercache_usercacheentry);
+        if( !org.spigotmc.SpigotConfig.saveUserCacheOnStopOnly ) this.save(true); // Spigot - skip saving if disabled // Paper - async
     }
 
     private long getNextOperation() {
         return this.operationCount.incrementAndGet();
     }
 
-    public Optional<GameProfile> get(String name) {
-        String string = name.toLowerCase(Locale.ROOT);
-        GameProfileCache.GameProfileInfo gameProfileInfo = this.profilesByName.get(string);
-        boolean bl = false;
-        if (gameProfileInfo != null && (new Date()).getTime() >= gameProfileInfo.expirationDate.getTime()) {
-            this.profilesByUUID.remove(gameProfileInfo.getProfile().getId());
-            this.profilesByName.remove(gameProfileInfo.getProfile().getName().toLowerCase(Locale.ROOT));
-            bl = true;
-            gameProfileInfo = null;
+    // Paper start
+    @Nullable public GameProfile getProfileIfCached(String name) {
+        GameProfileCache.GameProfileInfo entry = this.profilesByName.get(name.toLowerCase(Locale.ROOT));
+        return entry == null ? null : entry.getProfile();
+    }
+    // Paper end
+
+    public synchronized Optional<GameProfile> get(String name) { // Paper - synchronize
+        String s1 = name.toLowerCase(Locale.ROOT);
+        GameProfileCache.GameProfileInfo usercache_usercacheentry = (GameProfileCache.GameProfileInfo) this.profilesByName.get(s1);
+        boolean flag = false;
+
+        if (usercache_usercacheentry != null && (new Date()).getTime() >= usercache_usercacheentry.expirationDate.getTime()) {
+            this.profilesByUUID.remove(usercache_usercacheentry.getProfile().getId());
+            this.profilesByName.remove(usercache_usercacheentry.getProfile().getName().toLowerCase(Locale.ROOT));
+            flag = true;
+            usercache_usercacheentry = null;
         }
 
-        Optional<GameProfile> optional;
-        if (gameProfileInfo != null) {
-            gameProfileInfo.setLastAccess(this.getNextOperation());
-            optional = Optional.of(gameProfileInfo.getProfile());
+        Optional optional;
+
+        if (usercache_usercacheentry != null) {
+            usercache_usercacheentry.setLastAccess(this.getNextOperation());
+            optional = Optional.of(usercache_usercacheentry.getProfile());
         } else {
-            optional = lookupGameProfile(this.profileRepository, string);
+            optional = GameProfileCache.lookupGameProfile(this.profileRepository, name); // Spigot - use correct case for offline players
             if (optional.isPresent()) {
-                this.add(optional.get());
-                bl = false;
+                this.add((GameProfile) optional.get());
+                flag = false;
             }
         }
 
-        if (bl) {
-            this.save();
+        if (flag && !org.spigotmc.SpigotConfig.saveUserCacheOnStopOnly) { // Spigot - skip saving if disabled
+            this.save(true); // Paper
         }
 
         return optional;
@@ -156,18 +178,19 @@
         if (this.executor == null) {
             throw new IllegalStateException("No executor");
         } else {
-            CompletableFuture<Optional<GameProfile>> completableFuture = this.requests.get(username);
-            if (completableFuture != null) {
-                this.requests.put(username, completableFuture.whenCompleteAsync((profile, throwable) -> {
-                    consumer.accept(profile);
+            CompletableFuture<Optional<GameProfile>> completablefuture = (CompletableFuture) this.requests.get(username);
+
+            if (completablefuture != null) {
+                this.requests.put(username, completablefuture.whenCompleteAsync((optional, throwable) -> {
+                    consumer.accept(optional);
                 }, this.executor));
             } else {
                 this.requests.put(username, CompletableFuture.supplyAsync(() -> {
                     return this.get(username);
-                }, Util.backgroundExecutor()).whenCompleteAsync((profile, throwable) -> {
+                }, Util.backgroundExecutor()).whenCompleteAsync((optional, throwable) -> {
                     this.requests.remove(username);
-                }, this.executor).whenCompleteAsync((profile, throwable) -> {
-                    consumer.accept(profile);
+                }, this.executor).whenCompleteAsync((optional, throwable) -> {
+                    consumer.accept(optional);
                 }, this.executor));
             }
 
@@ -175,12 +198,13 @@
     }
 
     public Optional<GameProfile> get(UUID uuid) {
-        GameProfileCache.GameProfileInfo gameProfileInfo = this.profilesByUUID.get(uuid);
-        if (gameProfileInfo == null) {
+        GameProfileCache.GameProfileInfo usercache_usercacheentry = (GameProfileCache.GameProfileInfo) this.profilesByUUID.get(uuid);
+
+        if (usercache_usercacheentry == null) {
             return Optional.empty();
         } else {
-            gameProfileInfo.setLastAccess(this.getNextOperation());
-            return Optional.of(gameProfileInfo.getProfile());
+            usercache_usercacheentry.setLastAccess(this.getNextOperation());
+            return Optional.of(usercache_usercacheentry.getProfile());
         }
     }
 
@@ -193,128 +217,155 @@
     }
 
     public List<GameProfileCache.GameProfileInfo> load() {
-        List<GameProfileCache.GameProfileInfo> list = Lists.newArrayList();
+        ArrayList arraylist = Lists.newArrayList();
 
         try {
-            Reader reader = Files.newReader(this.file, StandardCharsets.UTF_8);
+            BufferedReader bufferedreader = Files.newReader(this.file, StandardCharsets.UTF_8);
+
+            label54:
+            {
+                ArrayList arraylist1;
 
-            Object var9;
-            label61: {
                 try {
-                    JsonArray jsonArray = this.gson.fromJson(reader, JsonArray.class);
-                    if (jsonArray == null) {
-                        var9 = list;
-                        break label61;
+                    JsonArray jsonarray = (JsonArray) this.gson.fromJson(bufferedreader, JsonArray.class);
+
+                    if (jsonarray != null) {
+                        DateFormat dateformat = GameProfileCache.createDateFormat();
+
+                        jsonarray.forEach((jsonelement) -> {
+                            Optional optional = GameProfileCache.readGameProfile(jsonelement, dateformat);
+
+                            Objects.requireNonNull(arraylist);
+                            optional.ifPresent(arraylist::add);
+                        });
+                        break label54;
                     }
 
-                    DateFormat dateFormat = createDateFormat();
-                    jsonArray.forEach((json) -> {
-                        readGameProfile(json, dateFormat).ifPresent(list::add);
-                    });
-                } catch (Throwable var6) {
-                    if (reader != null) {
+                    arraylist1 = arraylist;
+                } catch (Throwable throwable) {
+                    if (bufferedreader != null) {
                         try {
-                            reader.close();
-                        } catch (Throwable var5) {
-                            var6.addSuppressed(var5);
+                            bufferedreader.close();
+                        } catch (Throwable throwable1) {
+                            throwable.addSuppressed(throwable1);
                         }
                     }
 
-                    throw var6;
+                    throw throwable;
                 }
 
-                if (reader != null) {
-                    reader.close();
+                if (bufferedreader != null) {
+                    bufferedreader.close();
                 }
 
-                return list;
+                return arraylist1;
             }
 
-            if (reader != null) {
-                reader.close();
+            if (bufferedreader != null) {
+                bufferedreader.close();
             }
-
-            return (List<GameProfileCache.GameProfileInfo>)var9;
-        } catch (FileNotFoundException var7) {
-        } catch (JsonParseException | IOException var8) {
-            LOGGER.warn("Failed to load profile cache {}", this.file, var8);
+        } catch (FileNotFoundException filenotfoundexception) {
+            ;
+        // Spigot Start
+        } catch (com.google.gson.JsonSyntaxException | NullPointerException ex) {
+            StoredUserList.LOGGER.warn( "Usercache.json is corrupted or has bad formatting. Deleting it to prevent further issues." );
+            this.file.delete();
+        // Spigot End
+        } catch (JsonParseException | IOException ioexception) {
+            GameProfileCache.LOGGER.warn("Failed to load profile cache {}", this.file, ioexception);
         }
 
-        return list;
+        return arraylist;
     }
 
-    public void save() {
-        JsonArray jsonArray = new JsonArray();
-        DateFormat dateFormat = createDateFormat();
-        this.getTopMRUProfiles(1000).forEach((entry) -> {
-            jsonArray.add(writeGameProfile(entry, dateFormat));
+    public void save(boolean asyncSave) { // Paper
+        JsonArray jsonarray = new JsonArray();
+        DateFormat dateformat = GameProfileCache.createDateFormat();
+
+        this.getTopMRUProfiles(org.spigotmc.SpigotConfig.userCacheCap).forEach((usercache_usercacheentry) -> { // Spigot
+            jsonarray.add(GameProfileCache.writeGameProfile(usercache_usercacheentry, dateformat));
         });
-        String string = this.gson.toJson((JsonElement)jsonArray);
+        String s = this.gson.toJson(jsonarray);
+        Runnable save = () -> { // Paper
 
         try {
-            Writer writer = Files.newWriter(this.file, StandardCharsets.UTF_8);
+            BufferedWriter bufferedwriter = Files.newWriter(this.file, StandardCharsets.UTF_8);
 
             try {
-                writer.write(string);
-            } catch (Throwable var8) {
-                if (writer != null) {
+                bufferedwriter.write(s);
+            } catch (Throwable throwable) {
+                if (bufferedwriter != null) {
                     try {
-                        writer.close();
-                    } catch (Throwable var7) {
-                        var8.addSuppressed(var7);
+                        bufferedwriter.close();
+                    } catch (Throwable throwable1) {
+                        throwable.addSuppressed(throwable1);
                     }
                 }
 
-                throw var8;
+                throw throwable;
             }
 
-            if (writer != null) {
-                writer.close();
+            if (bufferedwriter != null) {
+                bufferedwriter.close();
             }
-        } catch (IOException var9) {
+        } catch (IOException ioexception) {
+            ;
         }
-
+        // Paper start
+        };
+        if (asyncSave) {
+            net.minecraft.server.MCUtil.scheduleAsyncTask(save);
+        } else {
+            save.run();
+        }
+        // Paper end
     }
 
     private Stream<GameProfileCache.GameProfileInfo> getTopMRUProfiles(int limit) {
-        return ImmutableList.copyOf(this.profilesByUUID.values()).stream().sorted(Comparator.comparing(GameProfileCache.GameProfileInfo::getLastAccess).reversed()).limit((long)limit);
+        return ImmutableList.copyOf(this.profilesByUUID.values()).stream().sorted(Comparator.comparing(GameProfileCache.GameProfileInfo::getLastAccess).reversed()).limit((long) limit);
     }
 
     private static JsonElement writeGameProfile(GameProfileCache.GameProfileInfo entry, DateFormat dateFormat) {
-        JsonObject jsonObject = new JsonObject();
-        jsonObject.addProperty("name", entry.getProfile().getName());
-        UUID uUID = entry.getProfile().getId();
-        jsonObject.addProperty("uuid", uUID == null ? "" : uUID.toString());
-        jsonObject.addProperty("expiresOn", dateFormat.format(entry.getExpirationDate()));
-        return jsonObject;
+        JsonObject jsonobject = new JsonObject();
+
+        jsonobject.addProperty("name", entry.getProfile().getName());
+        UUID uuid = entry.getProfile().getId();
+
+        jsonobject.addProperty("uuid", uuid == null ? "" : uuid.toString());
+        jsonobject.addProperty("expiresOn", dateFormat.format(entry.getExpirationDate()));
+        return jsonobject;
     }
 
     private static Optional<GameProfileCache.GameProfileInfo> readGameProfile(JsonElement json, DateFormat dateFormat) {
         if (json.isJsonObject()) {
-            JsonObject jsonObject = json.getAsJsonObject();
-            JsonElement jsonElement = jsonObject.get("name");
-            JsonElement jsonElement2 = jsonObject.get("uuid");
-            JsonElement jsonElement3 = jsonObject.get("expiresOn");
-            if (jsonElement != null && jsonElement2 != null) {
-                String string = jsonElement2.getAsString();
-                String string2 = jsonElement.getAsString();
+            JsonObject jsonobject = json.getAsJsonObject();
+            JsonElement jsonelement1 = jsonobject.get("name");
+            JsonElement jsonelement2 = jsonobject.get("uuid");
+            JsonElement jsonelement3 = jsonobject.get("expiresOn");
+
+            if (jsonelement1 != null && jsonelement2 != null) {
+                String s = jsonelement2.getAsString();
+                String s1 = jsonelement1.getAsString();
                 Date date = null;
-                if (jsonElement3 != null) {
+
+                if (jsonelement3 != null) {
                     try {
-                        date = dateFormat.parse(jsonElement3.getAsString());
-                    } catch (ParseException var12) {
+                        date = dateFormat.parse(jsonelement3.getAsString());
+                    } catch (ParseException parseexception) {
+                        ;
                     }
                 }
 
-                if (string2 != null && string != null && date != null) {
-                    UUID uUID;
+                if (s1 != null && s != null && date != null) {
+                    UUID uuid;
+
                     try {
-                        uUID = UUID.fromString(string);
-                    } catch (Throwable var11) {
+                        uuid = UUID.fromString(s);
+                    } catch (Throwable throwable) {
                         return Optional.empty();
                     }
 
-                    return Optional.of(new GameProfileCache.GameProfileInfo(new GameProfile(uUID, string2), date));
+                    return Optional.of(new GameProfileCache.GameProfileInfo(new GameProfile(uuid, s1), date));
                 } else {
                     return Optional.empty();
                 }
@@ -326,7 +377,8 @@
         }
     }
 
-    static class GameProfileInfo {
+    private static class GameProfileInfo {
+
         private final GameProfile profile;
         final Date expirationDate;
         private volatile long lastAccess;
