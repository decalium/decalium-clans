--- a/net/minecraft/world/entity/monster/Phantom.java
+++ b/net/minecraft/world/entity/monster/Phantom.java
@@ -2,9 +2,11 @@
 
 import java.util.Comparator;
 import java.util.EnumSet;
+import java.util.Iterator;
 import java.util.List;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.Vec3i;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.syncher.EntityDataAccessor;
@@ -41,28 +43,35 @@
 import net.minecraft.world.phys.Vec3;
 
 public class Phantom extends FlyingMob implements Enemy {
+
     public static final float FLAP_DEGREES_PER_TICK = 7.448451F;
     public static final int TICKS_PER_FLAP = Mth.ceil(24.166098F);
     private static final EntityDataAccessor<Integer> ID_SIZE = SynchedEntityData.defineId(Phantom.class, EntityDataSerializers.INT);
-    Vec3 moveTargetPoint = Vec3.ZERO;
-    BlockPos anchorPoint = BlockPos.ZERO;
-    Phantom.AttackPhase attackPhase = Phantom.AttackPhase.CIRCLE;
+    Vec3 moveTargetPoint;
+    BlockPos anchorPoint;
+    Phantom.AttackPhase attackPhase;
 
     public Phantom(EntityType<? extends Phantom> type, Level world) {
         super(type, world);
+        this.moveTargetPoint = Vec3.ZERO;
+        this.anchorPoint = BlockPos.ZERO;
+        this.attackPhase = Phantom.AttackPhase.CIRCLE;
         this.xpReward = 5;
         this.moveControl = new Phantom.PhantomMoveControl(this);
         this.lookControl = new Phantom.PhantomLookControl(this);
     }
 
+    @Override
     public boolean isFlapping() {
-        return (this.getUniqueFlapTickOffset() + this.tickCount) % TICKS_PER_FLAP == 0;
+        return (this.getUniqueFlapTickOffset() + this.tickCount) % Phantom.TICKS_PER_FLAP == 0;
     }
 
+    @Override
     protected BodyRotationControl createBodyControl() {
         return new Phantom.PhantomBodyRotationControl(this);
     }
 
+    @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(1, new Phantom.PhantomAttackStrategyGoal());
         this.goalSelector.addGoal(2, new Phantom.PhantomSweepAttackGoal());
@@ -70,30 +79,33 @@
         this.targetSelector.addGoal(1, new Phantom.PhantomAttackPlayerTargetGoal());
     }
 
+    @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(ID_SIZE, 0);
+        this.entityData.define(Phantom.ID_SIZE, 0);
     }
 
     public void setPhantomSize(int size) {
-        this.entityData.set(ID_SIZE, Mth.clamp(size, 0, 64));
+        this.entityData.set(Phantom.ID_SIZE, Mth.clamp(size, 0, 64));
     }
 
     private void updatePhantomSizeInfo() {
         this.refreshDimensions();
-        this.getAttribute(Attributes.ATTACK_DAMAGE).setBaseValue((double)(6 + this.getPhantomSize()));
+        this.getAttribute(Attributes.ATTACK_DAMAGE).setBaseValue((double) (6 + this.getPhantomSize()));
     }
 
     public int getPhantomSize() {
-        return this.entityData.get(ID_SIZE);
+        return (Integer) this.entityData.get(Phantom.ID_SIZE);
     }
 
+    @Override
     protected float getStandingEyeHeight(Pose pose, EntityDimensions dimensions) {
         return dimensions.height * 0.35F;
     }
 
+    @Override
     public void onSyncedDataUpdated(EntityDataAccessor<?> data) {
-        if (ID_SIZE.equals(data)) {
+        if (Phantom.ID_SIZE.equals(data)) {
             this.updatePhantomSizeInfo();
         }
 
@@ -104,47 +116,55 @@
         return this.getId() * 3;
     }
 
+    @Override
     protected boolean shouldDespawnInPeaceful() {
         return true;
     }
 
+    @Override
     public void tick() {
         super.tick();
         if (this.level.isClientSide) {
-            float f = Mth.cos((float)(this.getUniqueFlapTickOffset() + this.tickCount) * 7.448451F * ((float)Math.PI / 180F) + (float)Math.PI);
-            float g = Mth.cos((float)(this.getUniqueFlapTickOffset() + this.tickCount + 1) * 7.448451F * ((float)Math.PI / 180F) + (float)Math.PI);
-            if (f > 0.0F && g <= 0.0F) {
+            float f = Mth.cos((float) (this.getUniqueFlapTickOffset() + this.tickCount) * 7.448451F * 0.017453292F + 3.1415927F);
+            float f1 = Mth.cos((float) (this.getUniqueFlapTickOffset() + this.tickCount + 1) * 7.448451F * 0.017453292F + 3.1415927F);
+
+            if (f > 0.0F && f1 <= 0.0F) {
                 this.level.playLocalSound(this.getX(), this.getY(), this.getZ(), SoundEvents.PHANTOM_FLAP, this.getSoundSource(), 0.95F + this.random.nextFloat() * 0.05F, 0.95F + this.random.nextFloat() * 0.05F, false);
             }
 
             int i = this.getPhantomSize();
-            float h = Mth.cos(this.getYRot() * ((float)Math.PI / 180F)) * (1.3F + 0.21F * (float)i);
-            float j = Mth.sin(this.getYRot() * ((float)Math.PI / 180F)) * (1.3F + 0.21F * (float)i);
-            float k = (0.3F + f * 0.45F) * ((float)i * 0.2F + 1.0F);
-            this.level.addParticle(ParticleTypes.MYCELIUM, this.getX() + (double)h, this.getY() + (double)k, this.getZ() + (double)j, 0.0D, 0.0D, 0.0D);
-            this.level.addParticle(ParticleTypes.MYCELIUM, this.getX() - (double)h, this.getY() + (double)k, this.getZ() - (double)j, 0.0D, 0.0D, 0.0D);
+            float f2 = Mth.cos(this.getYRot() * 0.017453292F) * (1.3F + 0.21F * (float) i);
+            float f3 = Mth.sin(this.getYRot() * 0.017453292F) * (1.3F + 0.21F * (float) i);
+            float f4 = (0.3F + f * 0.45F) * ((float) i * 0.2F + 1.0F);
+
+            this.level.addParticle(ParticleTypes.MYCELIUM, this.getX() + (double) f2, this.getY() + (double) f4, this.getZ() + (double) f3, 0.0D, 0.0D, 0.0D);
+            this.level.addParticle(ParticleTypes.MYCELIUM, this.getX() - (double) f2, this.getY() + (double) f4, this.getZ() - (double) f3, 0.0D, 0.0D, 0.0D);
         }
 
     }
 
+    @Override
     public void aiStep() {
-        if (this.isAlive() && this.isSunBurnTick()) {
+        if (this.isAlive() && shouldBurnInDay && this.isSunBurnTick()) { // Paper - Configurable Burning
             this.setSecondsOnFire(8);
         }
 
         super.aiStep();
     }
 
+    @Override
     protected void customServerAiStep() {
         super.customServerAiStep();
     }
 
+    @Override
     public SpawnGroupData finalizeSpawn(ServerLevelAccessor world, DifficultyInstance difficulty, MobSpawnType spawnReason, @Nullable SpawnGroupData entityData, @Nullable CompoundTag entityNbt) {
         this.anchorPoint = this.blockPosition().above(5);
         this.setPhantomSize(0);
         return super.finalizeSpawn(world, difficulty, spawnReason, entityData, entityNbt);
     }
 
+    @Override
     public void readAdditionalSaveData(CompoundTag nbt) {
         super.readAdditionalSaveData(nbt);
         if (nbt.contains("AX")) {
@@ -152,110 +172,203 @@
         }
 
         this.setPhantomSize(nbt.getInt("Size"));
+        // Paper start
+        if (nbt.hasUUID("Paper.SpawningEntity")) {
+            this.spawningEntity = nbt.getUUID("Paper.SpawningEntity");
+        }
+        if (nbt.contains("Paper.ShouldBurnInDay")) {
+            this.shouldBurnInDay = nbt.getBoolean("Paper.ShouldBurnInDay");
+        }
+        // Paper end
     }
 
+    @Override
     public void addAdditionalSaveData(CompoundTag nbt) {
         super.addAdditionalSaveData(nbt);
         nbt.putInt("AX", this.anchorPoint.getX());
         nbt.putInt("AY", this.anchorPoint.getY());
         nbt.putInt("AZ", this.anchorPoint.getZ());
         nbt.putInt("Size", this.getPhantomSize());
+        // Paper start
+        if (this.spawningEntity != null) {
+            nbt.putUUID("Paper.SpawningEntity", this.spawningEntity);
+        }
+        nbt.putBoolean("Paper.ShouldBurnInDay", shouldBurnInDay);
+        // Paper end
     }
 
+    @Override
     public boolean shouldRenderAtSqrDistance(double distance) {
         return true;
     }
 
+    @Override
     public SoundSource getSoundSource() {
         return SoundSource.HOSTILE;
     }
 
+    @Override
     protected SoundEvent getAmbientSound() {
         return SoundEvents.PHANTOM_AMBIENT;
     }
 
+    @Override
     protected SoundEvent getHurtSound(DamageSource source) {
         return SoundEvents.PHANTOM_HURT;
     }
 
+    @Override
     protected SoundEvent getDeathSound() {
         return SoundEvents.PHANTOM_DEATH;
     }
 
+    @Override
     public MobType getMobType() {
         return MobType.UNDEAD;
     }
 
-    protected float getSoundVolume() {
+    @Override
+    public float getSoundVolume() {
         return 1.0F;
     }
 
+    @Override
     public boolean canAttackType(EntityType<?> type) {
         return true;
     }
 
+    @Override
     public EntityDimensions getDimensions(Pose pose) {
         int i = this.getPhantomSize();
-        EntityDimensions entityDimensions = super.getDimensions(pose);
-        float f = (entityDimensions.width + 0.2F * (float)i) / entityDimensions.width;
-        return entityDimensions.scale(f);
+        EntityDimensions entitysize = super.getDimensions(pose);
+        float f = (entitysize.width + 0.2F * (float) i) / entitysize.width;
+
+        return entitysize.scale(f);
     }
 
-    static enum AttackPhase {
-        CIRCLE,
-        SWOOP;
+    // Paper start
+    java.util.UUID spawningEntity;
+
+    public java.util.UUID getSpawningEntity() {
+        return spawningEntity;
     }
+    public void setSpawningEntity(java.util.UUID entity) { this.spawningEntity = entity; }
 
-    class PhantomAttackPlayerTargetGoal extends Goal {
-        private final TargetingConditions attackTargeting = TargetingConditions.forCombat().range(64.0D);
-        private int nextScanTick = 20;
+    private boolean shouldBurnInDay = true;
+    public boolean shouldBurnInDay() { return shouldBurnInDay; }
+    public void setShouldBurnInDay(boolean shouldBurnInDay) { this.shouldBurnInDay = shouldBurnInDay; }
+    // Paper end
+    private static enum AttackPhase {
 
-        public boolean canUse() {
-            if (this.nextScanTick > 0) {
-                --this.nextScanTick;
-                return false;
-            } else {
-                this.nextScanTick = 60;
-                List<Player> list = Phantom.this.level.getNearbyPlayers(this.attackTargeting, Phantom.this, Phantom.this.getBoundingBox().inflate(16.0D, 64.0D, 16.0D));
-                if (!list.isEmpty()) {
-                    list.sort(Comparator.comparing(Entity::getY).reversed());
+        CIRCLE, SWOOP;
 
-                    for(Player player : list) {
-                        if (Phantom.this.canAttack(player, TargetingConditions.DEFAULT)) {
-                            Phantom.this.setTarget(player);
-                            return true;
-                        }
-                    }
+        private AttackPhase() {}
+    }
+
+    private class PhantomMoveControl extends MoveControl {
+
+        private float speed = 0.1F;
+
+        public PhantomMoveControl(Mob entity) {
+            super(entity);
+        }
+
+        @Override
+        public void tick() {
+            if (Phantom.this.horizontalCollision) {
+                Phantom.this.setYRot(Phantom.this.getYRot() + 180.0F);
+                this.speed = 0.1F;
+            }
+
+            float f = (float) (Phantom.this.moveTargetPoint.x - Phantom.this.getX());
+            float f1 = (float) (Phantom.this.moveTargetPoint.y - Phantom.this.getY());
+            float f2 = (float) (Phantom.this.moveTargetPoint.z - Phantom.this.getZ());
+            double d0 = (double) Mth.sqrt(f * f + f2 * f2);
+
+            if (Math.abs(d0) > 9.999999747378752E-6D) {
+                double d1 = 1.0D - (double) Mth.abs(f1 * 0.7F) / d0;
+
+                f = (float) ((double) f * d1);
+                f2 = (float) ((double) f2 * d1);
+                d0 = (double) Mth.sqrt(f * f + f2 * f2);
+                double d2 = (double) Mth.sqrt(f * f + f2 * f2 + f1 * f1);
+                float f3 = Phantom.this.getYRot();
+                float f4 = (float) Mth.atan2((double) f2, (double) f);
+                float f5 = Mth.wrapDegrees(Phantom.this.getYRot() + 90.0F);
+                float f6 = Mth.wrapDegrees(f4 * 57.295776F);
+
+                Phantom.this.setYRot(Mth.approachDegrees(f5, f6, 4.0F) - 90.0F);
+                Phantom.this.yBodyRot = Phantom.this.getYRot();
+                if (Mth.degreesDifferenceAbs(f3, Phantom.this.getYRot()) < 3.0F) {
+                    this.speed = Mth.approach(this.speed, 1.8F, 0.005F * (1.8F / this.speed));
+                } else {
+                    this.speed = Mth.approach(this.speed, 0.2F, 0.025F);
                 }
 
-                return false;
+                float f7 = (float) (-(Mth.atan2((double) (-f1), d0) * 57.2957763671875D));
+
+                Phantom.this.setXRot(f7);
+                float f8 = Phantom.this.getYRot() + 90.0F;
+                double d3 = (double) (this.speed * Mth.cos(f8 * 0.017453292F)) * Math.abs((double) f / d2);
+                double d4 = (double) (this.speed * Mth.sin(f8 * 0.017453292F)) * Math.abs((double) f2 / d2);
+                double d5 = (double) (this.speed * Mth.sin(f7 * 0.017453292F)) * Math.abs((double) f1 / d2);
+                Vec3 vec3d = Phantom.this.getDeltaMovement();
+
+                Phantom.this.setDeltaMovement(vec3d.add((new Vec3(d3, d5, d4)).subtract(vec3d).scale(0.2D)));
             }
+
         }
+    }
 
-        public boolean canContinueToUse() {
-            LivingEntity livingEntity = Phantom.this.getTarget();
-            return livingEntity != null ? Phantom.this.canAttack(livingEntity, TargetingConditions.DEFAULT) : false;
+    private class PhantomLookControl extends LookControl {
+
+        public PhantomLookControl(Mob entity) {
+            super(entity);
         }
+
+        @Override
+        public void tick() {}
     }
 
-    class PhantomAttackStrategyGoal extends Goal {
+    private class PhantomBodyRotationControl extends BodyRotationControl {
+
+        public PhantomBodyRotationControl(Mob entity) {
+            super(entity);
+        }
+
+        @Override
+        public void clientTick() {
+            Phantom.this.yHeadRot = Phantom.this.yBodyRot;
+            Phantom.this.yBodyRot = Phantom.this.getYRot();
+        }
+    }
+
+    private class PhantomAttackStrategyGoal extends Goal {
+
         private int nextSweepTick;
 
+        PhantomAttackStrategyGoal() {}
+
+        @Override
         public boolean canUse() {
-            LivingEntity livingEntity = Phantom.this.getTarget();
-            return livingEntity != null ? Phantom.this.canAttack(Phantom.this.getTarget(), TargetingConditions.DEFAULT) : false;
+            LivingEntity entityliving = Phantom.this.getTarget();
+
+            return entityliving != null ? Phantom.this.canAttack(Phantom.this.getTarget(), TargetingConditions.DEFAULT) : false;
         }
 
+        @Override
         public void start() {
             this.nextSweepTick = 10;
             Phantom.this.attackPhase = Phantom.AttackPhase.CIRCLE;
             this.setAnchorAboveTarget();
         }
 
+        @Override
         public void stop() {
             Phantom.this.anchorPoint = Phantom.this.level.getHeightmapPos(Heightmap.Types.MOTION_BLOCKING, Phantom.this.anchorPoint).above(10 + Phantom.this.random.nextInt(20));
         }
 
+        @Override
         public void tick() {
             if (Phantom.this.attackPhase == Phantom.AttackPhase.CIRCLE) {
                 --this.nextSweepTick;
@@ -278,27 +391,94 @@
         }
     }
 
-    class PhantomBodyRotationControl extends BodyRotationControl {
-        public PhantomBodyRotationControl(Mob entity) {
-            super(entity);
+    private class PhantomSweepAttackGoal extends Phantom.PhantomMoveTargetGoal {
+
+        PhantomSweepAttackGoal() {
+            super();
         }
 
-        public void clientTick() {
-            Phantom.this.yHeadRot = Phantom.this.yBodyRot;
-            Phantom.this.yBodyRot = Phantom.this.getYRot();
+        @Override
+        public boolean canUse() {
+            return Phantom.this.getTarget() != null && Phantom.this.attackPhase == Phantom.AttackPhase.SWOOP;
+        }
+
+        @Override
+        public boolean canContinueToUse() {
+            LivingEntity entityliving = Phantom.this.getTarget();
+
+            if (entityliving == null) {
+                return false;
+            } else if (!entityliving.isAlive()) {
+                return false;
+            } else if (entityliving instanceof Player && (((Player) entityliving).isSpectator() || ((Player) entityliving).isCreative())) {
+                return false;
+            } else if (!this.canUse()) {
+                return false;
+            } else {
+                if (Phantom.this.tickCount % 20 == 0) {
+                    List<Cat> list = Phantom.this.level.getEntitiesOfClass(Cat.class, Phantom.this.getBoundingBox().inflate(16.0D), EntitySelector.ENTITY_STILL_ALIVE);
+
+                    if (!list.isEmpty()) {
+                        Iterator iterator = list.iterator();
+
+                        while (iterator.hasNext()) {
+                            Cat entitycat = (Cat) iterator.next();
+
+                            entitycat.hiss();
+                        }
+
+                        return false;
+                    }
+                }
+
+                return true;
+            }
+        }
+
+        @Override
+        public void start() {}
+
+        @Override
+        public void stop() {
+            Phantom.this.setTarget((LivingEntity) null);
+            Phantom.this.attackPhase = Phantom.AttackPhase.CIRCLE;
+        }
+
+        @Override
+        public void tick() {
+            LivingEntity entityliving = Phantom.this.getTarget();
+
+            Phantom.this.moveTargetPoint = new Vec3(entityliving.getX(), entityliving.getY(0.5D), entityliving.getZ());
+            if (Phantom.this.getBoundingBox().inflate(0.20000000298023224D).intersects(entityliving.getBoundingBox())) {
+                Phantom.this.doHurtTarget(entityliving);
+                Phantom.this.attackPhase = Phantom.AttackPhase.CIRCLE;
+                if (!Phantom.this.isSilent()) {
+                    Phantom.this.level.levelEvent(1039, Phantom.this.blockPosition(), 0);
+                }
+            } else if (Phantom.this.horizontalCollision || Phantom.this.hurtTime > 0) {
+                Phantom.this.attackPhase = Phantom.AttackPhase.CIRCLE;
+            }
+
         }
     }
 
-    class PhantomCircleAroundAnchorGoal extends Phantom.PhantomMoveTargetGoal {
+    private class PhantomCircleAroundAnchorGoal extends Phantom.PhantomMoveTargetGoal {
+
         private float angle;
         private float distance;
         private float height;
         private float clockwise;
 
+        PhantomCircleAroundAnchorGoal() {
+            super();
+        }
+
+        @Override
         public boolean canUse() {
             return Phantom.this.getTarget() == null || Phantom.this.attackPhase == Phantom.AttackPhase.CIRCLE;
         }
 
+        @Override
         public void start() {
             this.distance = 5.0F + Phantom.this.random.nextFloat() * 10.0F;
             this.height = -4.0F + Phantom.this.random.nextFloat() * 9.0F;
@@ -306,6 +486,7 @@
             this.selectNext();
         }
 
+        @Override
         public void tick() {
             if (Phantom.this.random.nextInt(350) == 0) {
                 this.height = -4.0F + Phantom.this.random.nextFloat() * 9.0F;
@@ -320,7 +501,7 @@
             }
 
             if (Phantom.this.random.nextInt(450) == 0) {
-                this.angle = Phantom.this.random.nextFloat() * 2.0F * (float)Math.PI;
+                this.angle = Phantom.this.random.nextFloat() * 2.0F * 3.1415927F;
                 this.selectNext();
             }
 
@@ -345,69 +526,56 @@
                 Phantom.this.anchorPoint = Phantom.this.blockPosition();
             }
 
-            this.angle += this.clockwise * 15.0F * ((float)Math.PI / 180F);
-            Phantom.this.moveTargetPoint = Vec3.atLowerCornerOf(Phantom.this.anchorPoint).add((double)(this.distance * Mth.cos(this.angle)), (double)(-4.0F + this.height), (double)(this.distance * Mth.sin(this.angle)));
+            this.angle += this.clockwise * 15.0F * 0.017453292F;
+            Phantom.this.moveTargetPoint = Vec3.atLowerCornerOf((Vec3i) Phantom.this.anchorPoint).add((double) (this.distance * Mth.cos(this.angle)), (double) (-4.0F + this.height), (double) (this.distance * Mth.sin(this.angle)));
         }
     }
 
-    class PhantomLookControl extends LookControl {
-        public PhantomLookControl(Mob entity) {
-            super(entity);
-        }
+    private class PhantomAttackPlayerTargetGoal extends Goal {
 
-        public void tick() {
-        }
-    }
+        private final TargetingConditions attackTargeting = TargetingConditions.forCombat().range(64.0D);
+        private int nextScanTick = 20;
 
-    class PhantomMoveControl extends MoveControl {
-        private float speed = 0.1F;
+        PhantomAttackPlayerTargetGoal() {}
 
-        public PhantomMoveControl(Mob owner) {
-            super(owner);
-        }
+        @Override
+        public boolean canUse() {
+            if (this.nextScanTick > 0) {
+                --this.nextScanTick;
+                return false;
+            } else {
+                this.nextScanTick = 60;
+                List<Player> list = Phantom.this.level.getNearbyPlayers(this.attackTargeting, (LivingEntity) Phantom.this, Phantom.this.getBoundingBox().inflate(16.0D, 64.0D, 16.0D));
 
-        public void tick() {
-            if (Phantom.this.horizontalCollision) {
-                Phantom.this.setYRot(Phantom.this.getYRot() + 180.0F);
-                this.speed = 0.1F;
-            }
+                if (!list.isEmpty()) {
+                    list.sort(Comparator.<Player, Double>comparing(Entity::getY).reversed()); // Paper - remap fix
+                    Iterator iterator = list.iterator();
 
-            float f = (float)(Phantom.this.moveTargetPoint.x - Phantom.this.getX());
-            float g = (float)(Phantom.this.moveTargetPoint.y - Phantom.this.getY());
-            float h = (float)(Phantom.this.moveTargetPoint.z - Phantom.this.getZ());
-            double d = (double)Mth.sqrt(f * f + h * h);
-            if (Math.abs(d) > (double)1.0E-5F) {
-                double e = 1.0D - (double)Mth.abs(g * 0.7F) / d;
-                f = (float)((double)f * e);
-                h = (float)((double)h * e);
-                d = (double)Mth.sqrt(f * f + h * h);
-                double i = (double)Mth.sqrt(f * f + h * h + g * g);
-                float j = Phantom.this.getYRot();
-                float k = (float)Mth.atan2((double)h, (double)f);
-                float l = Mth.wrapDegrees(Phantom.this.getYRot() + 90.0F);
-                float m = Mth.wrapDegrees(k * (180F / (float)Math.PI));
-                Phantom.this.setYRot(Mth.approachDegrees(l, m, 4.0F) - 90.0F);
-                Phantom.this.yBodyRot = Phantom.this.getYRot();
-                if (Mth.degreesDifferenceAbs(j, Phantom.this.getYRot()) < 3.0F) {
-                    this.speed = Mth.approach(this.speed, 1.8F, 0.005F * (1.8F / this.speed));
-                } else {
-                    this.speed = Mth.approach(this.speed, 0.2F, 0.025F);
+                    while (iterator.hasNext()) {
+                        Player entityhuman = (Player) iterator.next();
+
+                        if (Phantom.this.canAttack((LivingEntity) entityhuman, TargetingConditions.DEFAULT)) {
+                            if (!level.paperConfig.phantomOnlyAttackInsomniacs || EntitySelector.isInsomniac.test(entityhuman)) // Paper
+                            Phantom.this.setGoalTarget(entityhuman, org.bukkit.event.entity.EntityTargetEvent.TargetReason.CLOSEST_PLAYER, true); // CraftBukkit - reason
+                            return true;
+                        }
+                    }
                 }
 
-                float n = (float)(-(Mth.atan2((double)(-g), d) * (double)(180F / (float)Math.PI)));
-                Phantom.this.setXRot(n);
-                float o = Phantom.this.getYRot() + 90.0F;
-                double p = (double)(this.speed * Mth.cos(o * ((float)Math.PI / 180F))) * Math.abs((double)f / i);
-                double q = (double)(this.speed * Mth.sin(o * ((float)Math.PI / 180F))) * Math.abs((double)h / i);
-                double r = (double)(this.speed * Mth.sin(n * ((float)Math.PI / 180F))) * Math.abs((double)g / i);
-                Vec3 vec3 = Phantom.this.getDeltaMovement();
-                Phantom.this.setDeltaMovement(vec3.add((new Vec3(p, r, q)).subtract(vec3).scale(0.2D)));
+                return false;
             }
+        }
 
+        @Override
+        public boolean canContinueToUse() {
+            LivingEntity entityliving = Phantom.this.getTarget();
+
+            return entityliving != null ? Phantom.this.canAttack(entityliving, TargetingConditions.DEFAULT) : false;
         }
     }
 
-    abstract class PhantomMoveTargetGoal extends Goal {
+    private abstract class PhantomMoveTargetGoal extends Goal {
+
         public PhantomMoveTargetGoal() {
             this.setFlags(EnumSet.of(Goal.Flag.MOVE));
         }
@@ -416,61 +584,4 @@
             return Phantom.this.moveTargetPoint.distanceToSqr(Phantom.this.getX(), Phantom.this.getY(), Phantom.this.getZ()) < 4.0D;
         }
     }
-
-    class PhantomSweepAttackGoal extends Phantom.PhantomMoveTargetGoal {
-        public boolean canUse() {
-            return Phantom.this.getTarget() != null && Phantom.this.attackPhase == Phantom.AttackPhase.SWOOP;
-        }
-
-        public boolean canContinueToUse() {
-            LivingEntity livingEntity = Phantom.this.getTarget();
-            if (livingEntity == null) {
-                return false;
-            } else if (!livingEntity.isAlive()) {
-                return false;
-            } else if (!(livingEntity instanceof Player) || !((Player)livingEntity).isSpectator() && !((Player)livingEntity).isCreative()) {
-                if (!this.canUse()) {
-                    return false;
-                } else {
-                    if (Phantom.this.tickCount % 20 == 0) {
-                        List<Cat> list = Phantom.this.level.getEntitiesOfClass(Cat.class, Phantom.this.getBoundingBox().inflate(16.0D), EntitySelector.ENTITY_STILL_ALIVE);
-                        if (!list.isEmpty()) {
-                            for(Cat cat : list) {
-                                cat.hiss();
-                            }
-
-                            return false;
-                        }
-                    }
-
-                    return true;
-                }
-            } else {
-                return false;
-            }
-        }
-
-        public void start() {
-        }
-
-        public void stop() {
-            Phantom.this.setTarget((LivingEntity)null);
-            Phantom.this.attackPhase = Phantom.AttackPhase.CIRCLE;
-        }
-
-        public void tick() {
-            LivingEntity livingEntity = Phantom.this.getTarget();
-            Phantom.this.moveTargetPoint = new Vec3(livingEntity.getX(), livingEntity.getY(0.5D), livingEntity.getZ());
-            if (Phantom.this.getBoundingBox().inflate((double)0.2F).intersects(livingEntity.getBoundingBox())) {
-                Phantom.this.doHurtTarget(livingEntity);
-                Phantom.this.attackPhase = Phantom.AttackPhase.CIRCLE;
-                if (!Phantom.this.isSilent()) {
-                    Phantom.this.level.levelEvent(1039, Phantom.this.blockPosition(), 0);
-                }
-            } else if (Phantom.this.horizontalCollision || Phantom.this.hurtTime > 0) {
-                Phantom.this.attackPhase = Phantom.AttackPhase.CIRCLE;
-            }
-
-        }
-    }
 }
