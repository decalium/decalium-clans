--- a/net/minecraft/world/entity/ai/goal/GoalSelector.java
+++ b/net/minecraft/world/entity/ai/goal/GoalSelector.java
@@ -15,20 +15,25 @@
 public class GoalSelector {
     private static final Logger LOGGER = LogManager.getLogger();
     private static final WrappedGoal NO_GOAL = new WrappedGoal(Integer.MAX_VALUE, new Goal() {
+        @Override
         public boolean canUse() {
             return false;
         }
     }) {
+        @Override
         public boolean isRunning() {
             return false;
         }
     };
     private final Map<Goal.Flag, WrappedGoal> lockedFlags = new EnumMap<>(Goal.Flag.class);
-    private final Set<WrappedGoal> availableGoals = Sets.newLinkedHashSet();
+    public final Set<WrappedGoal> availableGoals = Sets.newLinkedHashSet();
     private final Supplier<ProfilerFiller> profiler;
-    private final EnumSet<Goal.Flag> disabledFlags = EnumSet.noneOf(Goal.Flag.class);
+    private final EnumSet<Goal.Flag> disabledFlags = EnumSet.noneOf(Goal.Flag.class); // Paper unused, but dummy to prevent plugins from crashing as hard. Theyll need to support paper in a special case if this is super important, but really doesn't seem like it would be.
+    private final com.destroystokyo.paper.util.set.OptimizedSmallEnumSet<net.minecraft.world.entity.ai.goal.Goal.Flag> goalTypes = new com.destroystokyo.paper.util.set.OptimizedSmallEnumSet<>(Goal.Flag.class); // Paper - remove streams from pathfindergoalselector
     private int tickCount;
     private int newGoalRate = 3;
+    private int curRate;
+    private static final Goal.Flag[] PATHFINDER_GOAL_TYPES = Goal.Flag.values(); // Paper - remove streams from pathfindergoalselector
 
     public GoalSelector(Supplier<ProfilerFiller> profiler) {
         this.profiler = profiler;
@@ -43,48 +48,110 @@
         this.availableGoals.clear();
     }
 
+    // Paper start
+    public boolean inactiveTick() {
+        this.curRate++;
+        return this.curRate % this.newGoalRate == 0;
+    }
+    public boolean hasTasks() {
+        for (WrappedGoal task : this.availableGoals) {
+            if (task.isRunning()) {
+                return true;
+            }
+        }
+        return false;
+    }
+    // Paper end
     public void removeGoal(Goal goal) {
-        this.availableGoals.stream().filter((wrappedGoal) -> {
-            return wrappedGoal.getGoal() == goal;
-        }).filter(WrappedGoal::isRunning).forEach(WrappedGoal::stop);
-        this.availableGoals.removeIf((wrappedGoal) -> {
-            return wrappedGoal.getGoal() == goal;
-        });
+        // Paper start - remove streams from pathfindergoalselector
+        for (java.util.Iterator<WrappedGoal> iterator = this.availableGoals.iterator(); iterator.hasNext();) {
+            WrappedGoal goalWrapped = iterator.next();
+            if (goalWrapped.getGoal() != goal) {
+                continue;
+            }
+            if (goalWrapped.isRunning()) {
+                goalWrapped.stop();
+            }
+            iterator.remove();
+        }
+        // Paper end - remove streams from pathfindergoalselector
     }
 
     public void tick() {
         ProfilerFiller profilerFiller = this.profiler.get();
         profilerFiller.push("goalCleanup");
-        this.getRunningGoals().filter((wrappedGoal) -> {
-            return !wrappedGoal.isRunning() || wrappedGoal.getFlags().stream().anyMatch(this.disabledFlags::contains) || !wrappedGoal.canContinueToUse();
-        }).forEach(Goal::stop);
-        this.lockedFlags.forEach((flag, wrappedGoal) -> {
+        // Paper start - remove streams from pathfindergoalselector
+        for (java.util.Iterator<WrappedGoal> iterator = this.availableGoals.iterator(); iterator.hasNext();) {
+            WrappedGoal wrappedGoal = iterator.next();
             if (!wrappedGoal.isRunning()) {
-                this.lockedFlags.remove(flag);
+                continue;
+            }
+            if (!this.goalTypes.hasCommonElements(wrappedGoal.getGoalTypes()) && wrappedGoal.canContinueToUse()) {
+                continue;
+            }
+            wrappedGoal.stop();
+        }
+        // Paper end - remove streams from pathfindergoalselector
+        this.lockedFlags.forEach((pathfindergoal_type, pathfindergoalwrapped) -> {
+            if (!pathfindergoalwrapped.isRunning()) {
+                this.lockedFlags.remove(pathfindergoal_type);
             }
 
         });
         profilerFiller.pop();
         profilerFiller.push("goalUpdate");
-        this.availableGoals.stream().filter((wrappedGoal) -> {
-            return !wrappedGoal.isRunning();
-        }).filter((wrappedGoal) -> {
-            return wrappedGoal.getFlags().stream().noneMatch(this.disabledFlags::contains);
-        }).filter((wrappedGoal) -> {
-            return wrappedGoal.getFlags().stream().allMatch((flag) -> {
-                return this.lockedFlags.getOrDefault(flag, NO_GOAL).canBeReplacedBy(wrappedGoal);
-            });
-        }).filter(WrappedGoal::canUse).forEach((wrappedGoal) -> {
-            wrappedGoal.getFlags().forEach((flag) -> {
-                WrappedGoal wrappedGoal2 = this.lockedFlags.getOrDefault(flag, NO_GOAL);
-                wrappedGoal2.stop();
-                this.lockedFlags.put(flag, wrappedGoal);
-            });
+
+        // Paper start - remove streams from pathfindergoalselector
+        goal_update_loop: for (java.util.Iterator<WrappedGoal> iterator = this.availableGoals.iterator(); iterator.hasNext();) {
+            WrappedGoal wrappedGoal = iterator.next();
+            if (wrappedGoal.isRunning()) {
+                continue;
+            }
+
+            com.destroystokyo.paper.util.set.OptimizedSmallEnumSet<net.minecraft.world.entity.ai.goal.Goal.Flag> wrappedGoalSet = wrappedGoal.getGoalTypes();
+
+            if (this.goalTypes.hasCommonElements(wrappedGoalSet)) {
+                continue;
+            }
+
+            long iterator1 = wrappedGoalSet.getBackingSet();
+            int wrappedGoalSize = wrappedGoalSet.size();
+            for (int i = 0; i < wrappedGoalSize; ++i) {
+                Goal.Flag type = PATHFINDER_GOAL_TYPES[Long.numberOfTrailingZeros(iterator1)];
+                iterator1 ^= com.destroystokyo.paper.util.math.IntegerUtil.getTrailingBit(iterator1);
+                WrappedGoal wrapped = this.lockedFlags.getOrDefault(type, GoalSelector.NO_GOAL);
+                if (!wrapped.canBeReplacedBy(wrappedGoal)) {
+                    continue goal_update_loop;
+                }
+            }
+
+            if (!wrappedGoal.canUse()) {
+                continue;
+            }
+
+            iterator1 = wrappedGoalSet.getBackingSet();
+            wrappedGoalSize = wrappedGoalSet.size();
+            for (int i = 0; i < wrappedGoalSize; ++i) {
+                Goal.Flag type = PATHFINDER_GOAL_TYPES[Long.numberOfTrailingZeros(iterator1)];
+                iterator1 ^= com.destroystokyo.paper.util.math.IntegerUtil.getTrailingBit(iterator1);
+                WrappedGoal wrapped = this.lockedFlags.getOrDefault(type, GoalSelector.NO_GOAL);
+
+                wrapped.stop();
+                this.lockedFlags.put(type, wrappedGoal);
+            }
             wrappedGoal.start();
-        });
+        }
+        // Paper end - remove streams from pathfindergoalselector
         profilerFiller.pop();
         profilerFiller.push("goalTick");
-        this.getRunningGoals().forEach(WrappedGoal::tick);
+        // Paper start - remove streams from pathfindergoalselector
+        for (java.util.Iterator<WrappedGoal> iterator = this.availableGoals.iterator(); iterator.hasNext();) {
+            WrappedGoal wrappedGoal = iterator.next();
+            if (wrappedGoal.isRunning()) {
+                wrappedGoal.tick();
+            }
+        }
+        // Paper end - remove streams from pathfindergoalselector
         profilerFiller.pop();
     }
 
@@ -101,11 +168,11 @@
     }
 
     public void disableControlFlag(Goal.Flag control) {
-        this.disabledFlags.add(control);
+        this.goalTypes.addUnchecked(control); // Paper - remove streams from pathfindergoalselector
     }
 
     public void enableControlFlag(Goal.Flag control) {
-        this.disabledFlags.remove(control);
+        this.goalTypes.removeUnchecked(control); // Paper - remove streams from pathfindergoalselector
     }
 
     public void setControlFlag(Goal.Flag control, boolean enabled) {
