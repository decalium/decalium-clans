--- a/net/minecraft/world/entity/monster/Silverfish.java
+++ b/net/minecraft/world/entity/monster/Silverfish.java
@@ -32,26 +32,30 @@
 import net.minecraft.world.level.block.state.BlockState;
 
 public class Silverfish extends Monster {
+
     private Silverfish.SilverfishWakeUpFriendsGoal friendsGoal;
 
     public Silverfish(EntityType<? extends Silverfish> type, Level world) {
         super(type, world);
     }
 
+    @Override
     protected void registerGoals() {
         this.friendsGoal = new Silverfish.SilverfishWakeUpFriendsGoal(this);
         this.goalSelector.addGoal(1, new FloatGoal(this));
         this.goalSelector.addGoal(3, this.friendsGoal);
         this.goalSelector.addGoal(4, new MeleeAttackGoal(this, 1.0D, false));
         this.goalSelector.addGoal(5, new Silverfish.SilverfishMergeWithStoneGoal(this));
-        this.targetSelector.addGoal(1, (new HurtByTargetGoal(this)).setAlertOthers());
+        this.targetSelector.addGoal(1, (new HurtByTargetGoal(this, new Class[0])).setAlertOthers(new Class[0])); // CraftBukkit - decompile error
         this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, true));
     }
 
+    @Override
     public double getMyRidingOffset() {
         return 0.1D;
     }
 
+    @Override
     protected float getStandingEyeHeight(Pose pose, EntityDimensions dimensions) {
         return 0.13F;
     }
@@ -60,26 +64,32 @@
         return Monster.createMonsterAttributes().add(Attributes.MAX_HEALTH, 8.0D).add(Attributes.MOVEMENT_SPEED, 0.25D).add(Attributes.ATTACK_DAMAGE, 1.0D);
     }
 
+    @Override
     protected Entity.MovementEmission getMovementEmission() {
         return Entity.MovementEmission.EVENTS;
     }
 
+    @Override
     protected SoundEvent getAmbientSound() {
         return SoundEvents.SILVERFISH_AMBIENT;
     }
 
+    @Override
     protected SoundEvent getHurtSound(DamageSource source) {
         return SoundEvents.SILVERFISH_HURT;
     }
 
+    @Override
     protected SoundEvent getDeathSound() {
         return SoundEvents.SILVERFISH_DEATH;
     }
 
+    @Override
     protected void playStepSound(BlockPos pos, BlockState state) {
         this.playSound(SoundEvents.SILVERFISH_STEP, 0.15F, 1.0F);
     }
 
+    @Override
     public boolean hurt(DamageSource source, float amount) {
         if (this.isInvulnerableTo(source)) {
             return false;
@@ -92,34 +102,100 @@
         }
     }
 
+    @Override
     public void tick() {
         this.yBodyRot = this.getYRot();
         super.tick();
     }
 
+    @Override
     public void setYBodyRot(float bodyYaw) {
         this.setYRot(bodyYaw);
         super.setYBodyRot(bodyYaw);
     }
 
+    @Override
     public float getWalkTargetValue(BlockPos pos, LevelReader world) {
         return InfestedBlock.isCompatibleHostBlock(world.getBlockState(pos.below())) ? 10.0F : super.getWalkTargetValue(pos, world);
     }
 
     public static boolean checkSliverfishSpawnRules(EntityType<Silverfish> type, LevelAccessor world, MobSpawnType spawnReason, BlockPos pos, Random random) {
         if (checkAnyLightMonsterSpawnRules(type, world, spawnReason, pos, random)) {
-            Player player = world.getNearestPlayer((double)pos.getX() + 0.5D, (double)pos.getY() + 0.5D, (double)pos.getZ() + 0.5D, 5.0D, true);
-            return player == null;
+            Player entityhuman = world.getNearestPlayer((double) pos.getX() + 0.5D, (double) pos.getY() + 0.5D, (double) pos.getZ() + 0.5D, 5.0D, true);
+
+            return !(entityhuman != null && !entityhuman.affectsSpawning) && entityhuman == null; // Paper - Affects Spawning API
         } else {
             return false;
         }
     }
 
+    @Override
     public MobType getMobType() {
         return MobType.ARTHROPOD;
     }
 
-    static class SilverfishMergeWithStoneGoal extends RandomStrollGoal {
+    private static class SilverfishWakeUpFriendsGoal extends Goal {
+
+        private final Silverfish silverfish;
+        private int lookForFriends;
+
+        public SilverfishWakeUpFriendsGoal(Silverfish silverfish) {
+            this.silverfish = silverfish;
+        }
+
+        public void notifyHurt() {
+            if (this.lookForFriends == 0) {
+                this.lookForFriends = 20;
+            }
+
+        }
+
+        @Override
+        public boolean canUse() {
+            return this.lookForFriends > 0;
+        }
+
+        @Override
+        public void tick() {
+            --this.lookForFriends;
+            if (this.lookForFriends <= 0) {
+                Level world = this.silverfish.level;
+                Random random = this.silverfish.getRandom();
+                BlockPos blockposition = this.silverfish.blockPosition();
+
+                for (int i = 0; i <= 5 && i >= -5; i = (i <= 0 ? 1 : 0) - i) {
+                    for (int j = 0; j <= 10 && j >= -10; j = (j <= 0 ? 1 : 0) - j) {
+                        for (int k = 0; k <= 10 && k >= -10; k = (k <= 0 ? 1 : 0) - k) {
+                            BlockPos blockposition1 = blockposition.offset(j, i, k);
+                            BlockState iblockdata = world.getBlockState(blockposition1);
+                            Block block = iblockdata.getBlock();
+
+                            if (block instanceof InfestedBlock) {
+                                // CraftBukkit start
+                                if (org.bukkit.craftbukkit.v1_17_R1.event.CraftEventFactory.callEntityChangeBlockEvent(this.silverfish, blockposition1, net.minecraft.world.level.block.Blocks.AIR.defaultBlockState()).isCancelled()) {
+                                    continue;
+                                }
+                                // CraftBukkit end
+                                if (world.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
+                                    world.destroyBlock(blockposition1, true, this.silverfish);
+                                } else {
+                                    world.setBlock(blockposition1, ((InfestedBlock) block).hostStateByInfested(world.getBlockState(blockposition1)), 3);
+                                }
+
+                                if (random.nextBoolean()) {
+                                    return;
+                                }
+                            }
+                        }
+                    }
+                }
+            }
+
+        }
+    }
+
+    private static class SilverfishMergeWithStoneGoal extends RandomStrollGoal {
+
         private Direction selectedDirection;
         private boolean doMerge;
 
@@ -128,6 +204,7 @@
             this.setFlags(EnumSet.of(Goal.Flag.MOVE));
         }
 
+        @Override
         public boolean canUse() {
             if (this.mob.getTarget() != null) {
                 return false;
@@ -135,11 +212,13 @@
                 return false;
             } else {
                 Random random = this.mob.getRandom();
+
                 if (this.mob.level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING) && random.nextInt(10) == 0) {
                     this.selectedDirection = Direction.getRandom(random);
-                    BlockPos blockPos = (new BlockPos(this.mob.getX(), this.mob.getY() + 0.5D, this.mob.getZ())).relative(this.selectedDirection);
-                    BlockState blockState = this.mob.level.getBlockState(blockPos);
-                    if (InfestedBlock.isCompatibleHostBlock(blockState)) {
+                    BlockPos blockposition = (new BlockPos(this.mob.getX(), this.mob.getY() + 0.5D, this.mob.getZ())).relative(this.selectedDirection);
+                    BlockState iblockdata = this.mob.level.getBlockState(blockposition);
+
+                    if (InfestedBlock.isCompatibleHostBlock(iblockdata)) {
                         this.doMerge = true;
                         return true;
                     }
@@ -150,19 +229,27 @@
             }
         }
 
+        @Override
         public boolean canContinueToUse() {
             return this.doMerge ? false : super.canContinueToUse();
         }
 
+        @Override
         public void start() {
             if (!this.doMerge) {
                 super.start();
             } else {
-                LevelAccessor levelAccessor = this.mob.level;
-                BlockPos blockPos = (new BlockPos(this.mob.getX(), this.mob.getY() + 0.5D, this.mob.getZ())).relative(this.selectedDirection);
-                BlockState blockState = levelAccessor.getBlockState(blockPos);
-                if (InfestedBlock.isCompatibleHostBlock(blockState)) {
-                    levelAccessor.setBlock(blockPos, InfestedBlock.infestedStateByHost(blockState), 3);
+                Level world = this.mob.level;
+                BlockPos blockposition = (new BlockPos(this.mob.getX(), this.mob.getY() + 0.5D, this.mob.getZ())).relative(this.selectedDirection);
+                BlockState iblockdata = world.getBlockState(blockposition);
+
+                if (InfestedBlock.isCompatibleHostBlock(iblockdata)) {
+                    // CraftBukkit start
+                    if (org.bukkit.craftbukkit.v1_17_R1.event.CraftEventFactory.callEntityChangeBlockEvent(this.mob, blockposition, InfestedBlock.infestedStateByHost(iblockdata)).isCancelled()) {
+                        return;
+                    }
+                    // CraftBukkit end
+                    world.setBlock(blockposition, InfestedBlock.infestedStateByHost(iblockdata), 3);
                     this.mob.spawnAnim();
                     this.mob.discard();
                 }
@@ -170,55 +257,4 @@
             }
         }
     }
-
-    static class SilverfishWakeUpFriendsGoal extends Goal {
-        private final Silverfish silverfish;
-        private int lookForFriends;
-
-        public SilverfishWakeUpFriendsGoal(Silverfish silverfish) {
-            this.silverfish = silverfish;
-        }
-
-        public void notifyHurt() {
-            if (this.lookForFriends == 0) {
-                this.lookForFriends = 20;
-            }
-
-        }
-
-        public boolean canUse() {
-            return this.lookForFriends > 0;
-        }
-
-        public void tick() {
-            --this.lookForFriends;
-            if (this.lookForFriends <= 0) {
-                Level level = this.silverfish.level;
-                Random random = this.silverfish.getRandom();
-                BlockPos blockPos = this.silverfish.blockPosition();
-
-                for(int i = 0; i <= 5 && i >= -5; i = (i <= 0 ? 1 : 0) - i) {
-                    for(int j = 0; j <= 10 && j >= -10; j = (j <= 0 ? 1 : 0) - j) {
-                        for(int k = 0; k <= 10 && k >= -10; k = (k <= 0 ? 1 : 0) - k) {
-                            BlockPos blockPos2 = blockPos.offset(j, i, k);
-                            BlockState blockState = level.getBlockState(blockPos2);
-                            Block block = blockState.getBlock();
-                            if (block instanceof InfestedBlock) {
-                                if (level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
-                                    level.destroyBlock(blockPos2, true, this.silverfish);
-                                } else {
-                                    level.setBlock(blockPos2, ((InfestedBlock)block).hostStateByInfested(level.getBlockState(blockPos2)), 3);
-                                }
-
-                                if (random.nextBoolean()) {
-                                    return;
-                                }
-                            }
-                        }
-                    }
-                }
-            }
-
-        }
-    }
 }
