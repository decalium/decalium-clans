--- a/net/minecraft/world/entity/animal/Turtle.java
+++ b/net/minecraft/world/entity/animal/Turtle.java
@@ -5,10 +5,13 @@
 import javax.annotation.Nullable;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.Position;
+import net.minecraft.core.Vec3i;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
+import net.minecraft.server.MCUtil;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvent;
@@ -16,6 +19,7 @@
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.stats.Stats;
 import net.minecraft.tags.FluidTags;
+import net.minecraft.tags.Tag;
 import net.minecraft.util.Mth;
 import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.damagesource.DamageSource;
@@ -46,7 +50,9 @@
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.crafting.Ingredient;
+import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.GameRules;
+import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.LevelReader;
@@ -61,6 +67,7 @@
 import net.minecraft.world.phys.Vec3;
 
 public class Turtle extends Animal {
+
     private static final EntityDataAccessor<BlockPos> HOME_POS = SynchedEntityData.defineId(Turtle.class, EntityDataSerializers.BLOCK_POS);
     private static final EntityDataAccessor<Boolean> HAS_EGG = SynchedEntityData.defineId(Turtle.class, EntityDataSerializers.BOOLEAN);
     private static final EntityDataAccessor<Boolean> LAYING_EGG = SynchedEntityData.defineId(Turtle.class, EntityDataSerializers.BOOLEAN);
@@ -69,8 +76,8 @@
     private static final EntityDataAccessor<Boolean> TRAVELLING = SynchedEntityData.defineId(Turtle.class, EntityDataSerializers.BOOLEAN);
     public static final Ingredient FOOD_ITEMS = Ingredient.of(Blocks.SEAGRASS.asItem());
     int layEggCounter;
-    public static final Predicate<LivingEntity> BABY_ON_LAND_SELECTOR = (entity) -> {
-        return entity.isBaby() && !entity.isInWater();
+    public static final Predicate<LivingEntity> BABY_ON_LAND_SELECTOR = (entityliving) -> {
+        return entityliving.isBaby() && !entityliving.isInWater();
     };
 
     public Turtle(EntityType<? extends Turtle> type, Level world) {
@@ -84,64 +91,66 @@
     }
 
     public void setHomePos(BlockPos pos) {
-        this.entityData.set(HOME_POS, pos);
+        this.entityData.set(Turtle.HOME_POS, pos);
     }
 
-    BlockPos getHomePos() {
-        return this.entityData.get(HOME_POS);
+    public BlockPos getHomePos() { // Paper - public
+        return (BlockPos) this.entityData.get(Turtle.HOME_POS);
     }
 
     void setTravelPos(BlockPos pos) {
-        this.entityData.set(TRAVEL_POS, pos);
+        this.entityData.set(Turtle.TRAVEL_POS, pos);
     }
 
     BlockPos getTravelPos() {
-        return this.entityData.get(TRAVEL_POS);
+        return (BlockPos) this.entityData.get(Turtle.TRAVEL_POS);
     }
 
     public boolean hasEgg() {
-        return this.entityData.get(HAS_EGG);
+        return (Boolean) this.entityData.get(Turtle.HAS_EGG);
     }
 
-    void setHasEgg(boolean hasEgg) {
-        this.entityData.set(HAS_EGG, hasEgg);
+    public void setHasEgg(boolean hasEgg) {
+        this.entityData.set(Turtle.HAS_EGG, hasEgg);
     }
 
     public boolean isLayingEgg() {
-        return this.entityData.get(LAYING_EGG);
+        return (Boolean) this.entityData.get(Turtle.LAYING_EGG);
     }
 
     void setLayingEgg(boolean diggingSand) {
         this.layEggCounter = diggingSand ? 1 : 0;
-        this.entityData.set(LAYING_EGG, diggingSand);
+        this.entityData.set(Turtle.LAYING_EGG, diggingSand);
     }
 
-    boolean isGoingHome() {
-        return this.entityData.get(GOING_HOME);
+    public boolean isGoingHome() {
+        return (Boolean) this.entityData.get(Turtle.GOING_HOME);
     }
 
-    void setGoingHome(boolean landBound) {
-        this.entityData.set(GOING_HOME, landBound);
+    public void setGoingHome(boolean landBound) {
+        this.entityData.set(Turtle.GOING_HOME, landBound);
     }
 
-    boolean isTravelling() {
-        return this.entityData.get(TRAVELLING);
+    public boolean isTravelling() {
+        return (Boolean) this.entityData.get(Turtle.TRAVELLING);
     }
 
-    void setTravelling(boolean travelling) {
-        this.entityData.set(TRAVELLING, travelling);
+    public void setTravelling(boolean travelling) {
+        this.entityData.set(Turtle.TRAVELLING, travelling);
     }
 
+    @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(HOME_POS, BlockPos.ZERO);
-        this.entityData.define(HAS_EGG, false);
-        this.entityData.define(TRAVEL_POS, BlockPos.ZERO);
-        this.entityData.define(GOING_HOME, false);
-        this.entityData.define(TRAVELLING, false);
-        this.entityData.define(LAYING_EGG, false);
+        this.entityData.define(Turtle.HOME_POS, BlockPos.ZERO);
+        this.entityData.define(Turtle.HAS_EGG, false);
+        this.entityData.define(Turtle.TRAVEL_POS, BlockPos.ZERO);
+        this.entityData.define(Turtle.GOING_HOME, false);
+        this.entityData.define(Turtle.TRAVELLING, false);
+        this.entityData.define(Turtle.LAYING_EGG, false);
     }
 
+    @Override
     public void addAdditionalSaveData(CompoundTag nbt) {
         super.addAdditionalSaveData(nbt);
         nbt.putInt("HomePosX", this.getHomePos().getX());
@@ -153,20 +162,24 @@
         nbt.putInt("TravelPosZ", this.getTravelPos().getZ());
     }
 
+    @Override
     public void readAdditionalSaveData(CompoundTag nbt) {
         int i = nbt.getInt("HomePosX");
         int j = nbt.getInt("HomePosY");
         int k = nbt.getInt("HomePosZ");
+
         this.setHomePos(new BlockPos(i, j, k));
         super.readAdditionalSaveData(nbt);
         this.setHasEgg(nbt.getBoolean("HasEgg"));
         int l = nbt.getInt("TravelPosX");
-        int m = nbt.getInt("TravelPosY");
-        int n = nbt.getInt("TravelPosZ");
-        this.setTravelPos(new BlockPos(l, m, n));
+        int i1 = nbt.getInt("TravelPosY");
+        int j1 = nbt.getInt("TravelPosZ");
+
+        this.setTravelPos(new BlockPos(l, i1, j1));
     }
 
     @Nullable
+    @Override
     public SpawnGroupData finalizeSpawn(ServerLevelAccessor world, DifficultyInstance difficulty, MobSpawnType spawnReason, @Nullable SpawnGroupData entityData, @Nullable CompoundTag entityNbt) {
         this.setHomePos(this.blockPosition());
         this.setTravelPos(BlockPos.ZERO);
@@ -174,14 +187,15 @@
     }
 
     public static boolean checkTurtleSpawnRules(EntityType<Turtle> type, LevelAccessor world, MobSpawnType spawnReason, BlockPos pos, Random random) {
-        return pos.getY() < world.getSeaLevel() + 4 && TurtleEggBlock.onSand(world, pos) && world.getRawBrightness(pos, 0) > 8;
+        return pos.getY() < world.getSeaLevel() + 4 && TurtleEggBlock.onSand((BlockGetter) world, pos) && world.getRawBrightness(pos, 0) > 8;
     }
 
+    @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new Turtle.TurtlePanicGoal(this, 1.2D));
         this.goalSelector.addGoal(1, new Turtle.TurtleBreedGoal(this, 1.0D));
         this.goalSelector.addGoal(1, new Turtle.TurtleLayEggGoal(this, 1.0D));
-        this.goalSelector.addGoal(2, new TemptGoal(this, 1.1D, FOOD_ITEMS, false));
+        this.goalSelector.addGoal(2, new TemptGoal(this, 1.1D, Turtle.FOOD_ITEMS, false));
         this.goalSelector.addGoal(3, new Turtle.TurtleGoToWaterGoal(this, 1.0D));
         this.goalSelector.addGoal(4, new Turtle.TurtleGoHomeGoal(this, 1.0D));
         this.goalSelector.addGoal(7, new Turtle.TurtleTravelGoal(this, 1.0D));
@@ -193,108 +207,128 @@
         return Mob.createMobAttributes().add(Attributes.MAX_HEALTH, 30.0D).add(Attributes.MOVEMENT_SPEED, 0.25D);
     }
 
+    @Override
     public boolean isPushedByFluid() {
         return false;
     }
 
+    @Override
     public boolean canBreatheUnderwater() {
         return true;
     }
 
+    @Override
     public MobType getMobType() {
         return MobType.WATER;
     }
 
+    @Override
     public int getAmbientSoundInterval() {
         return 200;
     }
 
     @Nullable
+    @Override
     protected SoundEvent getAmbientSound() {
         return !this.isInWater() && this.onGround && !this.isBaby() ? SoundEvents.TURTLE_AMBIENT_LAND : super.getAmbientSound();
     }
 
+    @Override
     protected void playSwimSound(float volume) {
         super.playSwimSound(volume * 1.5F);
     }
 
+    @Override
     protected SoundEvent getSwimSound() {
         return SoundEvents.TURTLE_SWIM;
     }
 
     @Nullable
+    @Override
     protected SoundEvent getHurtSound(DamageSource source) {
         return this.isBaby() ? SoundEvents.TURTLE_HURT_BABY : SoundEvents.TURTLE_HURT;
     }
 
     @Nullable
+    @Override
     protected SoundEvent getDeathSound() {
         return this.isBaby() ? SoundEvents.TURTLE_DEATH_BABY : SoundEvents.TURTLE_DEATH;
     }
 
+    @Override
     protected void playStepSound(BlockPos pos, BlockState state) {
-        SoundEvent soundEvent = this.isBaby() ? SoundEvents.TURTLE_SHAMBLE_BABY : SoundEvents.TURTLE_SHAMBLE;
-        this.playSound(soundEvent, 0.15F, 1.0F);
+        SoundEvent soundeffect = this.isBaby() ? SoundEvents.TURTLE_SHAMBLE_BABY : SoundEvents.TURTLE_SHAMBLE;
+
+        this.playSound(soundeffect, 0.15F, 1.0F);
     }
 
+    @Override
     public boolean canFallInLove() {
         return super.canFallInLove() && !this.hasEgg();
     }
 
+    @Override
     protected float nextStep() {
         return this.moveDist + 0.15F;
     }
 
+    @Override
     public float getScale() {
         return this.isBaby() ? 0.3F : 1.0F;
     }
 
+    @Override
     protected PathNavigation createNavigation(Level world) {
         return new Turtle.TurtlePathNavigation(this, world);
     }
 
     @Nullable
+    @Override
     public AgeableMob getBreedOffspring(ServerLevel world, AgeableMob entity) {
-        return EntityType.TURTLE.create(world);
+        return (AgeableMob) EntityType.TURTLE.create((Level) world);
     }
 
+    @Override
     public boolean isFood(ItemStack stack) {
         return stack.is(Blocks.SEAGRASS.asItem());
     }
 
+    @Override
     public float getWalkTargetValue(BlockPos pos, LevelReader world) {
-        if (!this.isGoingHome() && world.getFluidState(pos).is(FluidTags.WATER)) {
-            return 10.0F;
-        } else {
-            return TurtleEggBlock.onSand(world, pos) ? 10.0F : world.getBrightness(pos) - 0.5F;
-        }
+        return !this.isGoingHome() && world.getFluidState(pos).is((Tag) FluidTags.WATER) ? 10.0F : (TurtleEggBlock.onSand((BlockGetter) world, pos) ? 10.0F : world.getBrightness(pos) - 0.5F);
     }
 
+    @Override
     public void aiStep() {
         super.aiStep();
         if (this.isAlive() && this.isLayingEgg() && this.layEggCounter >= 1 && this.layEggCounter % 5 == 0) {
-            BlockPos blockPos = this.blockPosition();
-            if (TurtleEggBlock.onSand(this.level, blockPos)) {
-                this.level.levelEvent(2001, blockPos, Block.getId(this.level.getBlockState(blockPos.below())));
+            BlockPos blockposition = this.blockPosition();
+
+            if (TurtleEggBlock.onSand((BlockGetter) this.level, blockposition)) {
+                this.level.levelEvent(2001, blockposition, Block.getId(this.level.getBlockState(blockposition.below())));
             }
         }
 
     }
 
+    @Override
     protected void ageBoundaryReached() {
         super.ageBoundaryReached();
         if (!this.isBaby() && this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT)) {
-            this.spawnAtLocation(Items.SCUTE, 1);
+            this.forceDrops = true; // CraftBukkit
+            this.spawnAtLocation((ItemLike) Items.SCUTE, 1);
+            this.forceDrops = false; // CraftBukkit
         }
 
     }
 
+    @Override
     public void travel(Vec3 movementInput) {
         if (this.isEffectiveAi() && this.isInWater()) {
             this.moveRelative(0.1F, movementInput);
             this.move(MoverType.SELF, this.getDeltaMovement());
             this.setDeltaMovement(this.getDeltaMovement().scale(0.9D));
-            if (this.getTarget() == null && (!this.isGoingHome() || !this.getHomePos().closerThan(this.position(), 20.0D))) {
+            if (this.getTarget() == null && (!this.isGoingHome() || !this.getHomePos().closerThan((Position) this.position(), 20.0D))) {
                 this.setDeltaMovement(this.getDeltaMovement().add(0.0D, -0.005D, 0.0D));
             }
         } else {
@@ -303,147 +337,133 @@
 
     }
 
+    @Override
     public boolean canBeLeashed(Player player) {
         return false;
     }
 
+    @Override
     public void thunderHit(ServerLevel world, LightningBolt lightning) {
+        org.bukkit.craftbukkit.v1_17_R1.event.CraftEventFactory.entityDamage = lightning; // CraftBukkit
         this.hurt(DamageSource.LIGHTNING_BOLT, Float.MAX_VALUE);
+        org.bukkit.craftbukkit.v1_17_R1.event.CraftEventFactory.entityDamage = null; // CraftBukkit
     }
 
-    static class TurtleBreedGoal extends BreedGoal {
+    private static class TurtleMoveControl extends MoveControl {
+
         private final Turtle turtle;
 
-        TurtleBreedGoal(Turtle turtle, double speed) {
-            super(turtle, speed);
+        TurtleMoveControl(Turtle turtle) {
+            super(turtle);
             this.turtle = turtle;
         }
 
-        public boolean canUse() {
-            return super.canUse() && !this.turtle.hasEgg();
-        }
-
-        protected void breed() {
-            ServerPlayer serverPlayer = this.animal.getLoveCause();
-            if (serverPlayer == null && this.partner.getLoveCause() != null) {
-                serverPlayer = this.partner.getLoveCause();
-            }
-
-            if (serverPlayer != null) {
-                serverPlayer.awardStat(Stats.ANIMALS_BRED);
-                CriteriaTriggers.BRED_ANIMALS.trigger(serverPlayer, this.animal, this.partner, (AgeableMob)null);
-            }
+        private void updateSpeed() {
+            if (this.turtle.isInWater()) {
+                this.turtle.setDeltaMovement(this.turtle.getDeltaMovement().add(0.0D, 0.005D, 0.0D));
+                if (!this.turtle.getHomePos().closerThan((Position) this.turtle.position(), 16.0D)) {
+                    this.turtle.setSpeed(Math.max(this.turtle.getSpeed() / 2.0F, 0.08F));
+                }
 
-            this.turtle.setHasEgg(true);
-            this.animal.resetLove();
-            this.partner.resetLove();
-            Random random = this.animal.getRandom();
-            if (this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT)) {
-                this.level.addFreshEntity(new ExperienceOrb(this.level, this.animal.getX(), this.animal.getY(), this.animal.getZ(), random.nextInt(7) + 1));
+                if (this.turtle.isBaby()) {
+                    this.turtle.setSpeed(Math.max(this.turtle.getSpeed() / 3.0F, 0.06F));
+                }
+            } else if (this.turtle.onGround) {
+                this.turtle.setSpeed(Math.max(this.turtle.getSpeed() / 2.0F, 0.06F));
             }
 
         }
-    }
 
-    static class TurtleGoHomeGoal extends Goal {
-        private final Turtle turtle;
-        private final double speedModifier;
-        private boolean stuck;
-        private int closeToHomeTryTicks;
-        private static final int GIVE_UP_TICKS = 600;
+        @Override
+        public void tick() {
+            this.updateSpeed();
+            if (this.operation == MoveControl.Operation.MOVE_TO && !this.turtle.getNavigation().isDone()) {
+                double d0 = this.wantedX - this.turtle.getX();
+                double d1 = this.wantedY - this.turtle.getY();
+                double d2 = this.wantedZ - this.turtle.getZ();
+                double d3 = Math.sqrt(d0 * d0 + d1 * d1 + d2 * d2);
 
-        TurtleGoHomeGoal(Turtle turtle, double speed) {
-            this.turtle = turtle;
-            this.speedModifier = speed;
-        }
+                d1 /= d3;
+                float f = (float) (Mth.atan2(d2, d0) * 57.2957763671875D) - 90.0F;
 
-        public boolean canUse() {
-            if (this.turtle.isBaby()) {
-                return false;
-            } else if (this.turtle.hasEgg()) {
-                return true;
-            } else if (this.turtle.getRandom().nextInt(700) != 0) {
-                return false;
+                this.turtle.setYRot(this.rotlerp(this.turtle.getYRot(), f, 90.0F));
+                this.turtle.yBodyRot = this.turtle.getYRot();
+                float f1 = (float) (this.speedModifier * this.turtle.getAttributeValue(Attributes.MOVEMENT_SPEED));
+
+                this.turtle.setSpeed(Mth.lerp(0.125F, this.turtle.getSpeed(), f1));
+                this.turtle.setDeltaMovement(this.turtle.getDeltaMovement().add(0.0D, (double) this.turtle.getSpeed() * d1 * 0.1D, 0.0D));
             } else {
-                return !this.turtle.getHomePos().closerThan(this.turtle.position(), 64.0D);
+                this.turtle.setSpeed(0.0F);
             }
         }
+    }
 
-        public void start() {
-            this.turtle.setGoingHome(true);
-            this.stuck = false;
-            this.closeToHomeTryTicks = 0;
-        }
-
-        public void stop() {
-            this.turtle.setGoingHome(false);
-        }
+    private static class TurtlePanicGoal extends PanicGoal {
 
-        public boolean canContinueToUse() {
-            return !this.turtle.getHomePos().closerThan(this.turtle.position(), 7.0D) && !this.stuck && this.closeToHomeTryTicks <= 600;
+        TurtlePanicGoal(Turtle turtle, double speed) {
+            super(turtle, speed);
         }
 
-        public void tick() {
-            BlockPos blockPos = this.turtle.getHomePos();
-            boolean bl = blockPos.closerThan(this.turtle.position(), 16.0D);
-            if (bl) {
-                ++this.closeToHomeTryTicks;
-            }
-
-            if (this.turtle.getNavigation().isDone()) {
-                Vec3 vec3 = Vec3.atBottomCenterOf(blockPos);
-                Vec3 vec32 = DefaultRandomPos.getPosTowards(this.turtle, 16, 3, vec3, (double)((float)Math.PI / 10F));
-                if (vec32 == null) {
-                    vec32 = DefaultRandomPos.getPosTowards(this.turtle, 8, 7, vec3, (double)((float)Math.PI / 2F));
-                }
-
-                if (vec32 != null && !bl && !this.turtle.level.getBlockState(new BlockPos(vec32)).is(Blocks.WATER)) {
-                    vec32 = DefaultRandomPos.getPosTowards(this.turtle, 16, 5, vec3, (double)((float)Math.PI / 2F));
-                }
+        @Override
+        public boolean canUse() {
+            if (this.mob.getLastHurtByMob() == null && !this.mob.isOnFire()) {
+                return false;
+            } else {
+                BlockPos blockposition = this.lookForWater(this.mob.level, this.mob, 7, 4);
 
-                if (vec32 == null) {
-                    this.stuck = true;
-                    return;
+                if (blockposition != null) {
+                    this.posX = (double) blockposition.getX();
+                    this.posY = (double) blockposition.getY();
+                    this.posZ = (double) blockposition.getZ();
+                    return true;
+                } else {
+                    return this.findRandomPosition();
                 }
-
-                this.turtle.getNavigation().moveTo(vec32.x, vec32.y, vec32.z, this.speedModifier);
             }
-
         }
     }
 
-    static class TurtleGoToWaterGoal extends MoveToBlockGoal {
-        private static final int GIVE_UP_TICKS = 1200;
+    private static class TurtleBreedGoal extends BreedGoal {
+
         private final Turtle turtle;
 
-        TurtleGoToWaterGoal(Turtle mob, double d) {
-            super(mob, mob.isBaby() ? 2.0D : d, 24);
-            this.turtle = mob;
-            this.verticalSearchStart = -1;
+        TurtleBreedGoal(Turtle turtle, double speed) {
+            super(turtle, speed);
+            this.turtle = turtle;
         }
 
-        public boolean canContinueToUse() {
-            return !this.turtle.isInWater() && this.tryTicks <= 1200 && this.isValidTarget(this.turtle.level, this.blockPos);
+        @Override
+        public boolean canUse() {
+            return super.canUse() && !this.turtle.hasEgg();
         }
 
-        public boolean canUse() {
-            if (this.turtle.isBaby() && !this.turtle.isInWater()) {
-                return super.canUse();
-            } else {
-                return !this.turtle.isGoingHome() && !this.turtle.isInWater() && !this.turtle.hasEgg() ? super.canUse() : false;
+        @Override
+        protected void breed() {
+            ServerPlayer entityplayer = this.animal.getLoveCause();
+
+            if (entityplayer == null && this.partner.getLoveCause() != null) {
+                entityplayer = this.partner.getLoveCause();
             }
-        }
 
-        public boolean shouldRecalculatePath() {
-            return this.tryTicks % 160 == 0;
-        }
+            if (entityplayer != null) {
+                entityplayer.awardStat(Stats.ANIMALS_BRED);
+                CriteriaTriggers.BRED_ANIMALS.trigger(entityplayer, this.animal, this.partner, (AgeableMob) null);
+            }
+
+            this.turtle.setHasEgg(true);
+            this.animal.resetLove();
+            this.partner.resetLove();
+            Random random = this.animal.getRandom();
+
+            if (this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT)) {
+                this.level.addFreshEntity(new ExperienceOrb(this.level, this.animal.getX(), this.animal.getY(), this.animal.getZ(), random.nextInt(7) + 1, org.bukkit.entity.ExperienceOrb.SpawnReason.BREED, entityplayer)); // Paper;
+            }
 
-        protected boolean isValidTarget(LevelReader world, BlockPos pos) {
-            return world.getBlockState(pos).is(Blocks.WATER);
         }
     }
 
-    static class TurtleLayEggGoal extends MoveToBlockGoal {
+    private static class TurtleLayEggGoal extends MoveToBlockGoal {
+
         private final Turtle turtle;
 
         TurtleLayEggGoal(Turtle turtle, double speed) {
@@ -451,24 +471,36 @@
             this.turtle = turtle;
         }
 
+        @Override
         public boolean canUse() {
-            return this.turtle.hasEgg() && this.turtle.getHomePos().closerThan(this.turtle.position(), 9.0D) ? super.canUse() : false;
+            return this.turtle.hasEgg() && this.turtle.getHomePos().closerThan((Position) this.turtle.position(), 9.0D) ? super.canUse() : false;
         }
 
+        @Override
         public boolean canContinueToUse() {
-            return super.canContinueToUse() && this.turtle.hasEgg() && this.turtle.getHomePos().closerThan(this.turtle.position(), 9.0D);
+            return super.canContinueToUse() && this.turtle.hasEgg() && this.turtle.getHomePos().closerThan((Position) this.turtle.position(), 9.0D);
         }
 
+        @Override
         public void tick() {
             super.tick();
-            BlockPos blockPos = this.turtle.blockPosition();
+            BlockPos blockposition = this.turtle.blockPosition();
+
             if (!this.turtle.isInWater() && this.isReachedTarget()) {
                 if (this.turtle.layEggCounter < 1) {
-                    this.turtle.setLayingEgg(true);
+                    this.turtle.setLayingEgg(new com.destroystokyo.paper.event.entity.TurtleStartDiggingEvent((org.bukkit.entity.Turtle) this.turtle.getBukkitEntity(), MCUtil.toLocation(this.turtle.level, this.getTargetPosition())).callEvent()); // Paper
                 } else if (this.turtle.layEggCounter > 200) {
-                    Level level = this.turtle.level;
-                    level.playSound((Player)null, blockPos, SoundEvents.TURTLE_LAY_EGG, SoundSource.BLOCKS, 0.3F, 0.9F + level.random.nextFloat() * 0.2F);
-                    level.setBlock(this.blockPos.above(), Blocks.TURTLE_EGG.defaultBlockState().setValue(TurtleEggBlock.EGGS, Integer.valueOf(this.turtle.random.nextInt(4) + 1)), 3);
+                    Level world = this.turtle.level;
+
+                    // CraftBukkit start
+                    // Paper start
+                    int eggCount = this.turtle.random.nextInt(4) + 1;
+                    com.destroystokyo.paper.event.entity.TurtleLayEggEvent layEggEvent = new com.destroystokyo.paper.event.entity.TurtleLayEggEvent((org.bukkit.entity.Turtle) this.turtle.getBukkitEntity(), MCUtil.toLocation(this.turtle.level, this.blockPos.above()), eggCount);
+                    if (layEggEvent.callEvent() && !org.bukkit.craftbukkit.v1_17_R1.event.CraftEventFactory.callEntityChangeBlockEvent(this.turtle, this.blockPos.above(), Blocks.TURTLE_EGG.defaultBlockState().setValue(TurtleEggBlock.EGGS, layEggEvent.getEggCount())).isCancelled()) {
+                    world.playSound((Player) null, blockposition, SoundEvents.TURTLE_LAY_EGG, SoundSource.BLOCKS, 0.3F, 0.9F + world.random.nextFloat() * 0.2F);
+                    world.setBlock(this.blockPos.above(), (BlockState) Blocks.TURTLE_EGG.defaultBlockState().setValue(TurtleEggBlock.EGGS, layEggEvent.getEggCount()), 3);
+                    }
+                    // CraftBukkit end
                     this.turtle.setHasEgg(false);
                     this.turtle.setLayingEgg(false);
                     this.turtle.setInLoveTime(600);
@@ -481,119 +513,113 @@
 
         }
 
+        @Override
         protected boolean isValidTarget(LevelReader world, BlockPos pos) {
-            return !world.isEmptyBlock(pos.above()) ? false : TurtleEggBlock.isSand(world, pos);
+            return !world.isEmptyBlock(pos.above()) ? false : TurtleEggBlock.isSand((BlockGetter) world, pos);
         }
     }
 
-    static class TurtleMoveControl extends MoveControl {
+    private static class TurtleGoToWaterGoal extends MoveToBlockGoal {
+
+        private static final int GIVE_UP_TICKS = 1200;
         private final Turtle turtle;
 
-        TurtleMoveControl(Turtle turtle) {
-            super(turtle);
-            this.turtle = turtle;
+        TurtleGoToWaterGoal(Turtle mob, double d0) {
+            super(mob, mob.isBaby() ? 2.0D : d0, 24);
+            this.turtle = mob;
+            this.verticalSearchStart = -1;
         }
 
-        private void updateSpeed() {
-            if (this.turtle.isInWater()) {
-                this.turtle.setDeltaMovement(this.turtle.getDeltaMovement().add(0.0D, 0.005D, 0.0D));
-                if (!this.turtle.getHomePos().closerThan(this.turtle.position(), 16.0D)) {
-                    this.turtle.setSpeed(Math.max(this.turtle.getSpeed() / 2.0F, 0.08F));
-                }
+        @Override
+        public boolean canContinueToUse() {
+            return !this.turtle.isInWater() && this.tryTicks <= 1200 && this.isValidTarget(this.turtle.level, this.blockPos);
+        }
 
-                if (this.turtle.isBaby()) {
-                    this.turtle.setSpeed(Math.max(this.turtle.getSpeed() / 3.0F, 0.06F));
-                }
-            } else if (this.turtle.onGround) {
-                this.turtle.setSpeed(Math.max(this.turtle.getSpeed() / 2.0F, 0.06F));
-            }
+        @Override
+        public boolean canUse() {
+            return this.turtle.isBaby() && !this.turtle.isInWater() ? super.canUse() : (!this.turtle.isGoingHome() && !this.turtle.isInWater() && !this.turtle.hasEgg() ? super.canUse() : false);
+        }
 
+        @Override
+        public boolean shouldRecalculatePath() {
+            return this.tryTicks % 160 == 0;
         }
 
-        public void tick() {
-            this.updateSpeed();
-            if (this.operation == MoveControl.Operation.MOVE_TO && !this.turtle.getNavigation().isDone()) {
-                double d = this.wantedX - this.turtle.getX();
-                double e = this.wantedY - this.turtle.getY();
-                double f = this.wantedZ - this.turtle.getZ();
-                double g = Math.sqrt(d * d + e * e + f * f);
-                e = e / g;
-                float h = (float)(Mth.atan2(f, d) * (double)(180F / (float)Math.PI)) - 90.0F;
-                this.turtle.setYRot(this.rotlerp(this.turtle.getYRot(), h, 90.0F));
-                this.turtle.yBodyRot = this.turtle.getYRot();
-                float i = (float)(this.speedModifier * this.turtle.getAttributeValue(Attributes.MOVEMENT_SPEED));
-                this.turtle.setSpeed(Mth.lerp(0.125F, this.turtle.getSpeed(), i));
-                this.turtle.setDeltaMovement(this.turtle.getDeltaMovement().add(0.0D, (double)this.turtle.getSpeed() * e * 0.1D, 0.0D));
-            } else {
-                this.turtle.setSpeed(0.0F);
-            }
+        @Override
+        protected boolean isValidTarget(LevelReader world, BlockPos pos) {
+            return world.getBlockState(pos).is(Blocks.WATER);
         }
     }
 
-    static class TurtlePanicGoal extends PanicGoal {
-        TurtlePanicGoal(Turtle turtle, double speed) {
-            super(turtle, speed);
+    private static class TurtleGoHomeGoal extends Goal {
+
+        private final Turtle turtle;
+        private final double speedModifier;
+        private boolean stuck;
+        private int closeToHomeTryTicks;
+        private static final int GIVE_UP_TICKS = 600;
+
+        TurtleGoHomeGoal(Turtle turtle, double speed) {
+            this.turtle = turtle;
+            this.speedModifier = speed;
         }
 
+        @Override
         public boolean canUse() {
-            if (this.mob.getLastHurtByMob() == null && !this.mob.isOnFire()) {
-                return false;
-            } else {
-                BlockPos blockPos = this.lookForWater(this.mob.level, this.mob, 7, 4);
-                if (blockPos != null) {
-                    this.posX = (double)blockPos.getX();
-                    this.posY = (double)blockPos.getY();
-                    this.posZ = (double)blockPos.getZ();
-                    return true;
-                } else {
-                    return this.findRandomPosition();
-                }
-            }
+            return this.turtle.isBaby() ? false : (this.turtle.hasEgg() ? true : (this.turtle.getRandom().nextInt(700) != 0 ? false : !this.turtle.getHomePos().closerThan((Position) this.turtle.position(), 64.0D))) && new com.destroystokyo.paper.event.entity.TurtleGoHomeEvent((org.bukkit.entity.Turtle) this.turtle.getBukkitEntity()).callEvent(); // Paper
         }
-    }
 
-    static class TurtlePathNavigation extends WaterBoundPathNavigation {
-        TurtlePathNavigation(Turtle owner, Level world) {
-            super(owner, world);
+        @Override
+        public void start() {
+            this.turtle.setGoingHome(true);
+            this.stuck = false;
+            this.closeToHomeTryTicks = 0;
         }
 
-        protected boolean canUpdatePath() {
-            return true;
+        @Override
+        public void stop() {
+            this.turtle.setGoingHome(false);
         }
 
-        protected PathFinder createPathFinder(int range) {
-            this.nodeEvaluator = new AmphibiousNodeEvaluator(true);
-            this.nodeEvaluator.setCanOpenDoors(false);
-            this.nodeEvaluator.setCanPassDoors(false);
-            return new PathFinder(this.nodeEvaluator, range);
+        @Override
+        public boolean canContinueToUse() {
+            return !this.turtle.getHomePos().closerThan((Position) this.turtle.position(), 7.0D) && !this.stuck && this.closeToHomeTryTicks <= 600;
         }
 
-        public boolean isStableDestination(BlockPos pos) {
-            if (this.mob instanceof Turtle) {
-                Turtle turtle = (Turtle)this.mob;
-                if (turtle.isTravelling()) {
-                    return this.level.getBlockState(pos).is(Blocks.WATER);
-                }
+        @Override
+        public void tick() {
+            BlockPos blockposition = this.turtle.getHomePos();
+            boolean flag = blockposition.closerThan((Position) this.turtle.position(), 16.0D);
+
+            if (flag) {
+                ++this.closeToHomeTryTicks;
             }
 
-            return !this.level.getBlockState(pos.below()).isAir();
-        }
-    }
+            if (this.turtle.getNavigation().isDone()) {
+                Vec3 vec3d = Vec3.atBottomCenterOf((Vec3i) blockposition);
+                Vec3 vec3d1 = DefaultRandomPos.getPosTowards(this.turtle, 16, 3, vec3d, 0.3141592741012573D);
 
-    static class TurtleRandomStrollGoal extends RandomStrollGoal {
-        private final Turtle turtle;
+                if (vec3d1 == null) {
+                    vec3d1 = DefaultRandomPos.getPosTowards(this.turtle, 8, 7, vec3d, 1.5707963705062866D);
+                }
 
-        TurtleRandomStrollGoal(Turtle mob, double speed, int chance) {
-            super(mob, speed, chance);
-            this.turtle = mob;
-        }
+                if (vec3d1 != null && !flag && !this.turtle.level.getBlockState(new BlockPos(vec3d1)).is(Blocks.WATER)) {
+                    vec3d1 = DefaultRandomPos.getPosTowards(this.turtle, 16, 5, vec3d, 1.5707963705062866D);
+                }
+
+                if (vec3d1 == null) {
+                    this.stuck = true;
+                    return;
+                }
+
+                this.turtle.getNavigation().moveTo(vec3d1.x, vec3d1.y, vec3d1.z, this.speedModifier);
+            }
 
-        public boolean canUse() {
-            return !this.mob.isInWater() && !this.turtle.isGoingHome() && !this.turtle.hasEgg() ? super.canUse() : false;
         }
     }
 
-    static class TurtleTravelGoal extends Goal {
+    private static class TurtleTravelGoal extends Goal {
+
         private final Turtle turtle;
         private final double speedModifier;
         private boolean stuck;
@@ -603,61 +629,118 @@
             this.speedModifier = speed;
         }
 
+        @Override
         public boolean canUse() {
             return !this.turtle.isGoingHome() && !this.turtle.hasEgg() && this.turtle.isInWater();
         }
 
+        @Override
         public void start() {
-            int i = 512;
-            int j = 4;
+            boolean flag = true;
+            boolean flag1 = true;
             Random random = this.turtle.random;
+            int i = random.nextInt(1025) - 512;
+            int j = random.nextInt(9) - 4;
             int k = random.nextInt(1025) - 512;
-            int l = random.nextInt(9) - 4;
-            int m = random.nextInt(1025) - 512;
-            if ((double)l + this.turtle.getY() > (double)(this.turtle.level.getSeaLevel() - 1)) {
-                l = 0;
+
+            if ((double) j + this.turtle.getY() > (double) (this.turtle.level.getSeaLevel() - 1)) {
+                j = 0;
             }
 
-            BlockPos blockPos = new BlockPos((double)k + this.turtle.getX(), (double)l + this.turtle.getY(), (double)m + this.turtle.getZ());
-            this.turtle.setTravelPos(blockPos);
+            BlockPos blockposition = new BlockPos((double) i + this.turtle.getX(), (double) j + this.turtle.getY(), (double) k + this.turtle.getZ());
+
+            this.turtle.setTravelPos(blockposition);
             this.turtle.setTravelling(true);
             this.stuck = false;
         }
 
+        @Override
         public void tick() {
             if (this.turtle.getNavigation().isDone()) {
-                Vec3 vec3 = Vec3.atBottomCenterOf(this.turtle.getTravelPos());
-                Vec3 vec32 = DefaultRandomPos.getPosTowards(this.turtle, 16, 3, vec3, (double)((float)Math.PI / 10F));
-                if (vec32 == null) {
-                    vec32 = DefaultRandomPos.getPosTowards(this.turtle, 8, 7, vec3, (double)((float)Math.PI / 2F));
+                Vec3 vec3d = Vec3.atBottomCenterOf((Vec3i) this.turtle.getTravelPos());
+                Vec3 vec3d1 = DefaultRandomPos.getPosTowards(this.turtle, 16, 3, vec3d, 0.3141592741012573D);
+
+                if (vec3d1 == null) {
+                    vec3d1 = DefaultRandomPos.getPosTowards(this.turtle, 8, 7, vec3d, 1.5707963705062866D);
                 }
 
-                if (vec32 != null) {
-                    int i = Mth.floor(vec32.x);
-                    int j = Mth.floor(vec32.z);
-                    int k = 34;
+                if (vec3d1 != null) {
+                    int i = Mth.floor(vec3d1.x);
+                    int j = Mth.floor(vec3d1.z);
+                    boolean flag = true;
+
                     if (!this.turtle.level.hasChunksAt(i - 34, j - 34, i + 34, j + 34)) {
-                        vec32 = null;
+                        vec3d1 = null;
                     }
                 }
 
-                if (vec32 == null) {
+                if (vec3d1 == null) {
                     this.stuck = true;
                     return;
                 }
 
-                this.turtle.getNavigation().moveTo(vec32.x, vec32.y, vec32.z, this.speedModifier);
+                this.turtle.getNavigation().moveTo(vec3d1.x, vec3d1.y, vec3d1.z, this.speedModifier);
             }
 
         }
 
+        @Override
         public boolean canContinueToUse() {
             return !this.turtle.getNavigation().isDone() && !this.stuck && !this.turtle.isGoingHome() && !this.turtle.isInLove() && !this.turtle.hasEgg();
         }
 
+        @Override
         public void stop() {
             this.turtle.setTravelling(false);
             super.stop();
         }
     }
+
+    private static class TurtleRandomStrollGoal extends RandomStrollGoal {
+
+        private final Turtle turtle;
+
+        TurtleRandomStrollGoal(Turtle mob, double speed, int chance) {
+            super(mob, speed, chance);
+            this.turtle = mob;
+        }
+
+        @Override
+        public boolean canUse() {
+            return !this.mob.isInWater() && !this.turtle.isGoingHome() && !this.turtle.hasEgg() ? super.canUse() : false;
+        }
+    }
+
+    private static class TurtlePathNavigation extends WaterBoundPathNavigation {
+
+        TurtlePathNavigation(Turtle owner, Level world) {
+            super(owner, world);
+        }
+
+        @Override
+        protected boolean canUpdatePath() {
+            return true;
+        }
+
+        @Override
+        protected PathFinder createPathFinder(int range) {
+            this.nodeEvaluator = new AmphibiousNodeEvaluator(true);
+            this.nodeEvaluator.setCanOpenDoors(false);
+            this.nodeEvaluator.setCanPassDoors(false);
+            return new PathFinder(this.nodeEvaluator, range);
+        }
+
+        @Override
+        public boolean isStableDestination(BlockPos pos) {
+            if (this.mob instanceof Turtle) {
+                Turtle entityturtle = (Turtle) this.mob;
+
+                if (entityturtle.isTravelling()) {
+                    return this.level.getBlockState(pos).is(Blocks.WATER);
+                }
+            }
+
+            return !this.level.getBlockState(pos.below()).isAir();
+        }
+    }
 }
