--- a/net/minecraft/world/entity/ai/gossip/GossipContainer.java
+++ b/net/minecraft/world/entity/ai/gossip/GossipContainer.java
@@ -8,6 +8,7 @@
 import com.mojang.serialization.DynamicOps;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList; // Paper
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
 import it.unimi.dsi.fastutil.objects.Object2IntMap.Entry;
 import java.util.Arrays;
@@ -29,7 +30,7 @@
 
 public class GossipContainer {
     public static final int DISCARD_THRESHOLD = 2;
-    private final Map<UUID, GossipContainer.EntityGossips> gossips = Maps.newHashMap();
+    private final Map<UUID, GossipContainer.EntityGossips> gossips = Maps.newHashMap(); public Map<UUID, GossipContainer.EntityGossips> getReputations() { return this.gossips; } // Paper - add getter for reputations
 
     @VisibleForDebug
     public Map<UUID, Object2IntMap<GossipType>> getGossipEntries() {
@@ -60,8 +61,21 @@
         });
     }
 
+    // Paper start - Remove streams from reputation
+    private List<GossipContainer.GossipEntry> decompress() {
+        List<GossipContainer.GossipEntry> list = new ObjectArrayList<>();
+        for (Map.Entry<UUID, GossipContainer.EntityGossips> entry : getReputations().entrySet()) {
+            for (GossipContainer.GossipEntry cur : entry.getValue().decompress(entry.getKey())) {
+                if (cur.weightedValue() != 0)
+                    list.add(cur);
+            }
+        }
+        return list;
+    }
+    // Paper end
+
     private Collection<GossipContainer.GossipEntry> selectGossipsForTransfer(Random random, int count) {
-        List<GossipContainer.GossipEntry> list = this.unpack().collect(Collectors.toList());
+        List<GossipContainer.GossipEntry> list = decompress(); // Paper - Remove streams from reputation
         if (list.isEmpty()) {
             return Collections.emptyList();
         } else {
@@ -154,9 +168,9 @@
 
     }
 
-    public <T> Dynamic<T> store(DynamicOps<T> dynamicOps) {
-        return new Dynamic<>(dynamicOps, dynamicOps.createList(this.unpack().map((gossipEntry) -> {
-            return gossipEntry.store(dynamicOps);
+    public <T> Dynamic<T> store(DynamicOps<T> dynamicops) {
+        return new Dynamic(dynamicops, dynamicops.createList(this.decompress().stream().map((reputation_b) -> {
+            return reputation_b.store(dynamicops);
         }).map(Dynamic::getValue)));
     }
 
@@ -177,15 +191,27 @@
         return i > type.max ? Math.max(type.max, left) : i;
     }
 
-    static class EntityGossips {
+    public static class EntityGossips {
         final Object2IntMap<GossipType> entries = new Object2IntOpenHashMap<>();
 
         public int weightedValue(Predicate<GossipType> gossipTypeFilter) {
-            return this.entries.object2IntEntrySet().stream().filter((entry) -> {
-                return gossipTypeFilter.test(entry.getKey());
-            }).mapToInt((entry) -> {
-                return entry.getIntValue() * (entry.getKey()).weight;
-            }).sum();
+            // Paper start - Remove streams from reputation
+            int weight = 0;
+            for (Object2IntMap.Entry<GossipType> entry : entries.object2IntEntrySet()) {
+                if (gossipTypeFilter.test(entry.getKey())) {
+                    weight += entry.getIntValue() * entry.getKey().weight;
+                }
+            }
+            return weight;
+        }
+
+        public List<GossipContainer.GossipEntry> decompress(UUID uuid) {
+            List<GossipContainer.GossipEntry> list = new ObjectArrayList<>();
+            for (Object2IntMap.Entry<GossipType> entry : entries.object2IntEntrySet()) {
+                list.add(new GossipContainer.GossipEntry(uuid, entry.getKey(), entry.getIntValue()));
+            }
+            return list;
+            // Paper - end
         }
 
         public Stream<GossipContainer.GossipEntry> unpack(UUID target) {
@@ -228,6 +254,28 @@
         public void remove(GossipType gossipType) {
             this.entries.removeInt(gossipType);
         }
+
+        // Paper start - Add villager reputation API
+        private static final com.destroystokyo.paper.entity.villager.ReputationType[] REPUTATION_TYPES = com.destroystokyo.paper.entity.villager.ReputationType.values();
+        public com.destroystokyo.paper.entity.villager.Reputation getPaperReputation() {
+            int[] reputation = new int[REPUTATION_TYPES.length];
+            reputation[com.destroystokyo.paper.entity.villager.ReputationType.MAJOR_NEGATIVE.ordinal()] = entries.getOrDefault(GossipType.MAJOR_NEGATIVE, 0);
+            reputation[com.destroystokyo.paper.entity.villager.ReputationType.MAJOR_POSITIVE.ordinal()] = entries.getOrDefault(GossipType.MAJOR_POSITIVE, 0);
+            reputation[com.destroystokyo.paper.entity.villager.ReputationType.MINOR_NEGATIVE.ordinal()] = entries.getOrDefault(GossipType.MINOR_NEGATIVE, 0);
+            reputation[com.destroystokyo.paper.entity.villager.ReputationType.MINOR_POSITIVE.ordinal()] = entries.getOrDefault(GossipType.MINOR_POSITIVE, 0);
+            reputation[com.destroystokyo.paper.entity.villager.ReputationType.TRADING.ordinal()] = entries.getOrDefault(GossipType.TRADING, 0);
+            return com.destroystokyo.paper.entity.villager.ReputationConstructor.construct(reputation);
+        }
+
+        public void assignFromPaperReputation(com.destroystokyo.paper.entity.villager.Reputation rep) {
+            int val;
+            if ((val = rep.getReputation(com.destroystokyo.paper.entity.villager.ReputationType.MAJOR_NEGATIVE)) != 0) this.entries.put(GossipType.MAJOR_NEGATIVE, val);
+            if ((val = rep.getReputation(com.destroystokyo.paper.entity.villager.ReputationType.MAJOR_POSITIVE)) != 0) this.entries.put(GossipType.MAJOR_POSITIVE, val);
+            if ((val = rep.getReputation(com.destroystokyo.paper.entity.villager.ReputationType.MINOR_NEGATIVE)) != 0) this.entries.put(GossipType.MINOR_NEGATIVE, val);
+            if ((val = rep.getReputation(com.destroystokyo.paper.entity.villager.ReputationType.MINOR_POSITIVE)) != 0) this.entries.put(GossipType.MINOR_POSITIVE, val);
+            if ((val = rep.getReputation(com.destroystokyo.paper.entity.villager.ReputationType.TRADING)) != 0) this.entries.put(GossipType.TRADING, val);
+        }
+        // Paper end
     }
 
     static class GossipEntry {
@@ -248,6 +296,7 @@
             return this.value * this.type.weight;
         }
 
+        @Override
         public String toString() {
             return "GossipEntry{target=" + this.target + ", type=" + this.type + ", value=" + this.value + "}";
         }
