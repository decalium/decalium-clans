--- a/net/minecraft/world/level/chunk/storage/EntityStorage.java
+++ b/net/minecraft/world/level/chunk/storage/EntityStorage.java
@@ -30,7 +30,7 @@
     private static final Logger LOGGER = LogManager.getLogger();
     private static final String ENTITIES_TAG = "Entities";
     private static final String POSITION_TAG = "Position";
-    private final ServerLevel level;
+    public final ServerLevel level;
     private final IOWorker worker;
     private final LongSet emptyChunks = new LongOpenHashSet();
     private final ProcessorMailbox<Runnable> entityDeserializerQueue;
@@ -43,6 +43,7 @@
         this.worker = new IOWorker(chunkFile, dsync, "entities");
     }
 
+    @Override
     public CompletableFuture<ChunkEntities<Entity>> loadEntities(ChunkPos pos) {
         return this.emptyChunks.contains(pos.toLong()) ? CompletableFuture.completedFuture(emptyChunk(pos)) : this.worker.loadAsync(pos).thenApplyAsync((compoundTag) -> {
             if (compoundTag == null) {
@@ -79,6 +80,7 @@
         return new ChunkEntities<>(pos, ImmutableList.of());
     }
 
+    @Override
     public void storeEntities(ChunkEntities<Entity> dataList) {
         ChunkPos chunkPos = dataList.getPos();
         if (dataList.isEmpty()) {
@@ -88,7 +90,18 @@
 
         } else {
             ListTag listTag = new ListTag();
+            final java.util.Map<net.minecraft.world.entity.EntityType<?>, Integer> savedEntityCounts = new java.util.HashMap<>(); // Paper
             dataList.getEntities().forEach((entity) -> {
+                // Paper start
+                final EntityType<?> entityType = entity.getType();
+                final int saveLimit = this.level.paperConfig.entityPerChunkSaveLimits.getOrDefault(entityType, -1);
+                if (saveLimit > -1) {
+                    if (savedEntityCounts.getOrDefault(entityType, 0) >= saveLimit) {
+                        return;
+                    }
+                    savedEntityCounts.merge(entityType, 1, Integer::sum);
+                }
+                // Paper end
                 CompoundTag compoundTag = new CompoundTag();
                 if (entity.save(compoundTag)) {
                     listTag.add(compoundTag);
@@ -107,6 +120,7 @@
         }
     }
 
+    @Override
     public void flush(boolean bl) {
         this.worker.synchronize(bl).join();
         this.entityDeserializerQueue.runAll();
@@ -121,6 +135,7 @@
         return chunkTag.contains("DataVersion", 99) ? chunkTag.getInt("DataVersion") : -1;
     }
 
+    @Override
     public void close() throws IOException {
         this.worker.close();
     }
