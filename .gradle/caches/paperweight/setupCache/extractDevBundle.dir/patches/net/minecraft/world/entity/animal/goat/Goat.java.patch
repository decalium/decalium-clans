--- a/net/minecraft/world/entity/animal/goat/Goat.java
+++ b/net/minecraft/world/entity/animal/goat/Goat.java
@@ -2,6 +2,7 @@
 
 import com.google.common.collect.ImmutableList;
 import com.mojang.serialization.Dynamic;
+import java.util.Collection;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
@@ -20,8 +21,10 @@
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.AgeableMob;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.Pose;
@@ -46,13 +49,18 @@
 import net.minecraft.world.level.pathfinder.BlockPathTypes;
 import net.minecraft.world.level.pathfinder.PathFinder;
 import net.minecraft.world.level.pathfinder.WalkNodeEvaluator;
+// CraftBukkit start
+import org.bukkit.craftbukkit.v1_17_R1.event.CraftEventFactory;
+import org.bukkit.craftbukkit.v1_17_R1.inventory.CraftItemStack;
+// CraftBukkit end
 
 public class Goat extends Animal {
+
     public static final EntityDimensions LONG_JUMPING_DIMENSIONS = EntityDimensions.scalable(0.9F, 1.3F).scale(0.7F);
     private static final int ADULT_ATTACK_DAMAGE = 2;
     private static final int BABY_ATTACK_DAMAGE = 1;
     protected static final ImmutableList<SensorType<? extends Sensor<? super Goat>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ITEMS, SensorType.NEAREST_ADULT, SensorType.HURT_BY, SensorType.GOAT_TEMPTATIONS);
-    protected static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATE_RECENTLY, MemoryModuleType.BREED_TARGET, MemoryModuleType.LONG_JUMP_COOLDOWN_TICKS, MemoryModuleType.LONG_JUMP_MID_JUMP, MemoryModuleType.TEMPTING_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ADULT, MemoryModuleType.TEMPTATION_COOLDOWN_TICKS, MemoryModuleType.IS_TEMPTED, MemoryModuleType.RAM_COOLDOWN_TICKS, MemoryModuleType.RAM_TARGET);
+    protected static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATE_RECENTLY, MemoryModuleType.BREED_TARGET, MemoryModuleType.LONG_JUMP_COOLDOWN_TICKS, MemoryModuleType.LONG_JUMP_MID_JUMP, MemoryModuleType.TEMPTING_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ADULT, MemoryModuleType.TEMPTATION_COOLDOWN_TICKS, new MemoryModuleType[]{MemoryModuleType.IS_TEMPTED, MemoryModuleType.RAM_COOLDOWN_TICKS, MemoryModuleType.RAM_TARGET});
     public static final int GOAT_FALL_DAMAGE_REDUCTION = 10;
     public static final double GOAT_SCREAMING_CHANCE = 0.02D;
     private static final EntityDataAccessor<Boolean> DATA_IS_SCREAMING_GOAT = SynchedEntityData.defineId(Goat.class, EntityDataSerializers.BOOLEAN);
@@ -64,18 +72,21 @@
         this.getNavigation().setCanFloat(true);
     }
 
+    @Override
     protected Brain.Provider<Goat> brainProvider() {
-        return Brain.provider(MEMORY_TYPES, SENSOR_TYPES);
+        return Brain.provider((Collection) Goat.MEMORY_TYPES, (Collection) Goat.SENSOR_TYPES);
     }
 
+    @Override
     protected Brain<?> makeBrain(Dynamic<?> dynamic) {
         return GoatAi.makeBrain(this.brainProvider().makeBrain(dynamic));
     }
 
     public static AttributeSupplier.Builder createAttributes() {
-        return Mob.createMobAttributes().add(Attributes.MAX_HEALTH, 10.0D).add(Attributes.MOVEMENT_SPEED, (double)0.2F).add(Attributes.ATTACK_DAMAGE, 2.0D);
+        return Mob.createMobAttributes().add(Attributes.MAX_HEALTH, 10.0D).add(Attributes.MOVEMENT_SPEED, 0.20000000298023224D).add(Attributes.ATTACK_DAMAGE, 2.0D);
     }
 
+    @Override
     protected void ageBoundaryReached() {
         if (this.isBaby()) {
             this.getAttribute(Attributes.ATTACK_DAMAGE).setBaseValue(1.0D);
@@ -85,22 +96,27 @@
 
     }
 
+    @Override
     protected int calculateFallDamage(float fallDistance, float damageMultiplier) {
         return super.calculateFallDamage(fallDistance, damageMultiplier) - 10;
     }
 
+    @Override
     protected SoundEvent getAmbientSound() {
         return this.isScreamingGoat() ? SoundEvents.GOAT_SCREAMING_AMBIENT : SoundEvents.GOAT_AMBIENT;
     }
 
+    @Override
     protected SoundEvent getHurtSound(DamageSource source) {
         return this.isScreamingGoat() ? SoundEvents.GOAT_SCREAMING_HURT : SoundEvents.GOAT_HURT;
     }
 
+    @Override
     protected SoundEvent getDeathSound() {
         return this.isScreamingGoat() ? SoundEvents.GOAT_SCREAMING_DEATH : SoundEvents.GOAT_DEATH;
     }
 
+    @Override
     protected void playStepSound(BlockPos pos, BlockState state) {
         this.playSound(SoundEvents.GOAT_STEP, 0.15F, 1.0F);
     }
@@ -109,24 +125,29 @@
         return this.isScreamingGoat() ? SoundEvents.GOAT_SCREAMING_MILK : SoundEvents.GOAT_MILK;
     }
 
-    public Goat getBreedOffspring(ServerLevel serverLevel, AgeableMob ageableMob) {
-        Goat goat = EntityType.GOAT.create(serverLevel);
+    @Override
+    public Goat getBreedOffspring(ServerLevel world, AgeableMob entity) {
+        Goat goat = (Goat) EntityType.GOAT.create((Level) world);
+
         if (goat != null) {
             GoatAi.initMemories(goat);
-            boolean bl = ageableMob instanceof Goat && ((Goat)ageableMob).isScreamingGoat();
-            goat.setScreamingGoat(bl || serverLevel.getRandom().nextDouble() < 0.02D);
+            boolean flag = entity instanceof Goat && ((Goat) entity).isScreamingGoat();
+
+            goat.setScreamingGoat(flag || world.getRandom().nextDouble() < 0.02D);
         }
 
         return goat;
     }
 
+    @Override
     public Brain<Goat> getBrain() {
-        return super.getBrain();
+        return (Brain<Goat>) super.getBrain(); // CraftBukkit - decompile error
     }
 
+    @Override
     protected void customServerAiStep() {
         this.level.getProfiler().push("goatBrain");
-        this.getBrain().tick((ServerLevel)this.level, this);
+        this.getBrain().tick((ServerLevel) this.level, this); // CraftBukkit - decompile error
         this.level.getProfiler().pop();
         this.level.getProfiler().push("goatActivityUpdate");
         GoatAi.updateActivity(this);
@@ -134,63 +155,84 @@
         super.customServerAiStep();
     }
 
+    @Override
     public int getMaxHeadYRot() {
         return 15;
     }
 
+    @Override
     public void setYHeadRot(float headYaw) {
         int i = this.getMaxHeadYRot();
-        float f = Mth.degreesDifference(this.yBodyRot, headYaw);
-        float g = Mth.clamp(f, (float)(-i), (float)i);
-        super.setYHeadRot(this.yBodyRot + g);
+        float f1 = Mth.degreesDifference(this.yBodyRot, headYaw);
+        float f2 = Mth.clamp(f1, (float) (-i), (float) i);
+
+        super.setYHeadRot(this.yBodyRot + f2);
     }
 
+    @Override
     public SoundEvent getEatingSound(ItemStack stack) {
         return this.isScreamingGoat() ? SoundEvents.GOAT_SCREAMING_EAT : SoundEvents.GOAT_EAT;
     }
 
+    @Override
     public InteractionResult mobInteract(Player player, InteractionHand hand) {
-        ItemStack itemStack = player.getItemInHand(hand);
-        if (itemStack.is(Items.BUCKET) && !this.isBaby()) {
+        ItemStack itemstack = player.getItemInHand(hand);
+
+        if (itemstack.is(Items.BUCKET) && !this.isBaby()) {
+            // CraftBukkit start - Got milk?
+            org.bukkit.event.player.PlayerBucketFillEvent event = CraftEventFactory.callPlayerBucketFillEvent((ServerLevel) player.level, player, this.blockPosition(), this.blockPosition(), null, itemstack, Items.MILK_BUCKET, hand); // Paper - add enumHand
+
+            if (event.isCancelled()) {
+                return InteractionResult.PASS;
+            }
+            // CraftBukkit end
             player.playSound(this.getMilkingSound(), 1.0F, 1.0F);
-            ItemStack itemStack2 = ItemUtils.createFilledResult(itemStack, player, Items.MILK_BUCKET.getDefaultInstance());
-            player.setItemInHand(hand, itemStack2);
+            ItemStack itemstack1 = ItemUtils.createFilledResult(itemstack, player, CraftItemStack.asNMSCopy(event.getItemStack())); // CraftBukkit
+
+            player.setItemInHand(hand, itemstack1);
             return InteractionResult.sidedSuccess(this.level.isClientSide);
         } else {
-            InteractionResult interactionResult = super.mobInteract(player, hand);
-            if (interactionResult.consumesAction() && this.isFood(itemStack)) {
-                this.level.playSound((Player)null, this, this.getEatingSound(itemStack), SoundSource.NEUTRAL, 1.0F, Mth.randomBetween(this.level.random, 0.8F, 1.2F));
+            InteractionResult enuminteractionresult = super.mobInteract(player, hand);
+
+            if (enuminteractionresult.consumesAction() && this.isFood(itemstack)) {
+                this.level.playSound((Player) null, (Entity) this, this.getEatingSound(itemstack), SoundSource.NEUTRAL, 1.0F, Mth.randomBetween(this.level.random, 0.8F, 1.2F));
             }
 
-            return interactionResult;
+            return enuminteractionresult;
         }
     }
 
+    @Override
     public SpawnGroupData finalizeSpawn(ServerLevelAccessor world, DifficultyInstance difficulty, MobSpawnType spawnReason, @Nullable SpawnGroupData entityData, @Nullable CompoundTag entityNbt) {
         GoatAi.initMemories(this);
         this.setScreamingGoat(world.getRandom().nextDouble() < 0.02D);
         return super.finalizeSpawn(world, difficulty, spawnReason, entityData, entityNbt);
     }
 
+    @Override
     protected void sendDebugPackets() {
         super.sendDebugPackets();
-        DebugPackets.sendEntityBrain(this);
+        DebugPackets.sendEntityBrain((LivingEntity) this);
     }
 
+    @Override
     public EntityDimensions getDimensions(Pose pose) {
-        return pose == Pose.LONG_JUMPING ? LONG_JUMPING_DIMENSIONS.scale(this.getScale()) : super.getDimensions(pose);
+        return pose == Pose.LONG_JUMPING ? Goat.LONG_JUMPING_DIMENSIONS.scale(this.getScale()) : super.getDimensions(pose);
     }
 
+    @Override
     public void addAdditionalSaveData(CompoundTag nbt) {
         super.addAdditionalSaveData(nbt);
         nbt.putBoolean("IsScreamingGoat", this.isScreamingGoat());
     }
 
+    @Override
     public void readAdditionalSaveData(CompoundTag nbt) {
         super.readAdditionalSaveData(nbt);
         this.setScreamingGoat(nbt.getBoolean("IsScreamingGoat"));
     }
 
+    @Override
     public void handleEntityEvent(byte status) {
         if (status == 58) {
             this.isLoweringHead = true;
@@ -202,6 +244,7 @@
 
     }
 
+    @Override
     public void aiStep() {
         if (this.isLoweringHead) {
             ++this.lowerHeadTick;
@@ -213,45 +256,54 @@
         super.aiStep();
     }
 
+    @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(DATA_IS_SCREAMING_GOAT, false);
+        this.entityData.define(Goat.DATA_IS_SCREAMING_GOAT, false);
     }
 
     public boolean isScreamingGoat() {
-        return this.entityData.get(DATA_IS_SCREAMING_GOAT);
+        return (Boolean) this.entityData.get(Goat.DATA_IS_SCREAMING_GOAT);
     }
 
     public void setScreamingGoat(boolean screaming) {
-        this.entityData.set(DATA_IS_SCREAMING_GOAT, screaming);
+        this.entityData.set(Goat.DATA_IS_SCREAMING_GOAT, screaming);
     }
 
     public float getRammingXHeadRot() {
-        return (float)this.lowerHeadTick / 20.0F * 30.0F * ((float)Math.PI / 180F);
+        return (float) this.lowerHeadTick / 20.0F * 30.0F * 0.017453292F;
     }
 
+    @Override
     protected PathNavigation createNavigation(Level world) {
         return new Goat.GoatPathNavigation(this, world);
     }
 
-    static class GoatNodeEvaluator extends WalkNodeEvaluator {
-        private final BlockPos.MutableBlockPos belowPos = new BlockPos.MutableBlockPos();
-
-        public BlockPathTypes getBlockPathType(BlockGetter world, int x, int y, int z) {
-            this.belowPos.set(x, y - 1, z);
-            BlockPathTypes blockPathTypes = getBlockPathTypeRaw(world, this.belowPos);
-            return blockPathTypes == BlockPathTypes.POWDER_SNOW ? BlockPathTypes.BLOCKED : getBlockPathTypeStatic(world, this.belowPos.move(Direction.UP));
-        }
-    }
+    private static class GoatPathNavigation extends GroundPathNavigation {
 
-    static class GoatPathNavigation extends GroundPathNavigation {
         GoatPathNavigation(Goat goat, Level world) {
             super(goat, world);
         }
 
+        @Override
         protected PathFinder createPathFinder(int range) {
             this.nodeEvaluator = new Goat.GoatNodeEvaluator();
             return new PathFinder(this.nodeEvaluator, range);
         }
     }
+
+    private static class GoatNodeEvaluator extends WalkNodeEvaluator {
+
+        private final BlockPos.MutableBlockPos belowPos = new BlockPos.MutableBlockPos();
+
+        GoatNodeEvaluator() {}
+
+        @Override
+        public BlockPathTypes getBlockPathType(BlockGetter world, int x, int y, int z) {
+            this.belowPos.set(x, y - 1, z);
+            BlockPathTypes pathtype = getBlockPathTypeRaw(world, this.belowPos);
+
+            return pathtype == BlockPathTypes.POWDER_SNOW ? BlockPathTypes.BLOCKED : getBlockPathTypeStatic(world, this.belowPos.move(Direction.UP));
+        }
+    }
 }
