--- a/net/minecraft/world/entity/animal/AbstractFish.java
+++ b/net/minecraft/world/entity/animal/AbstractFish.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.entity.animal;
 
+import java.util.Objects;
 import java.util.Random;
+import java.util.function.Predicate;
 import net.minecraft.core.BlockPos;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.syncher.EntityDataAccessor;
@@ -9,6 +11,7 @@
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.tags.FluidTags;
+import net.minecraft.tags.Tag;
 import net.minecraft.util.Mth;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
@@ -23,6 +26,7 @@
 import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.control.MoveControl;
 import net.minecraft.world.entity.ai.goal.AvoidEntityGoal;
+import net.minecraft.world.entity.ai.goal.GoalSelector;
 import net.minecraft.world.entity.ai.goal.PanicGoal;
 import net.minecraft.world.entity.ai.goal.RandomSwimmingGoal;
 import net.minecraft.world.entity.ai.navigation.PathNavigation;
@@ -36,6 +40,7 @@
 import net.minecraft.world.phys.Vec3;
 
 public abstract class AbstractFish extends WaterAnimal implements Bucketable {
+
     private static final EntityDataAccessor<Boolean> FROM_BUCKET = SynchedEntityData.defineId(AbstractFish.class, EntityDataSerializers.BOOLEAN);
 
     public AbstractFish(EntityType<? extends AbstractFish> type, Level world) {
@@ -43,6 +48,7 @@
         this.moveControl = new AbstractFish.FishMoveControl(this);
     }
 
+    @Override
     protected float getStandingEyeHeight(Pose pose, EntityDimensions dimensions) {
         return dimensions.height * 0.65F;
     }
@@ -51,6 +57,7 @@
         return Mob.createMobAttributes().add(Attributes.MAX_HEALTH, 3.0D);
     }
 
+    @Override
     public boolean requiresCustomPersistence() {
         return super.requiresCustomPersistence() || this.fromBucket();
     }
@@ -59,48 +66,63 @@
         return world.getBlockState(pos).is(Blocks.WATER) && world.getBlockState(pos.above()).is(Blocks.WATER);
     }
 
+    @Override
     public boolean removeWhenFarAway(double distanceSquared) {
-        return !this.fromBucket() && !this.hasCustomName();
+        return true; // CraftBukkit
     }
 
+    @Override
     public int getMaxSpawnClusterSize() {
         return 8;
     }
 
+    @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(FROM_BUCKET, false);
+        this.entityData.define(AbstractFish.FROM_BUCKET, false);
     }
 
+    @Override
     public boolean fromBucket() {
-        return this.entityData.get(FROM_BUCKET);
+        return (Boolean) this.entityData.get(AbstractFish.FROM_BUCKET);
     }
 
+    @Override
     public void setFromBucket(boolean fromBucket) {
-        this.entityData.set(FROM_BUCKET, fromBucket);
+        this.entityData.set(AbstractFish.FROM_BUCKET, fromBucket);
+        this.setPersistenceRequired(this.isPersistenceRequired()); // CraftBukkit - SPIGOT-4106 update persistence
     }
 
+    @Override
     public void addAdditionalSaveData(CompoundTag nbt) {
         super.addAdditionalSaveData(nbt);
         nbt.putBoolean("FromBucket", this.fromBucket());
     }
 
+    @Override
     public void readAdditionalSaveData(CompoundTag nbt) {
         super.readAdditionalSaveData(nbt);
         this.setFromBucket(nbt.getBoolean("FromBucket"));
     }
 
+    @Override
     protected void registerGoals() {
         super.registerGoals();
         this.goalSelector.addGoal(0, new PanicGoal(this, 1.25D));
-        this.goalSelector.addGoal(2, new AvoidEntityGoal<>(this, Player.class, 8.0F, 1.6D, 1.4D, EntitySelector.NO_SPECTATORS::test));
+        GoalSelector pathfindergoalselector = this.goalSelector;
+        Predicate predicate = EntitySelector.NO_SPECTATORS;
+
+        Objects.requireNonNull(predicate);
+        pathfindergoalselector.addGoal(2, new AvoidEntityGoal<>(this, Player.class, 8.0F, 1.6D, 1.4D, predicate::test));
         this.goalSelector.addGoal(4, new AbstractFish.FishSwimGoal(this));
     }
 
+    @Override
     protected PathNavigation createNavigation(Level world) {
         return new WaterBoundPathNavigation(this, world);
     }
 
+    @Override
     public void travel(Vec3 movementInput) {
         if (this.isEffectiveAi() && this.isInWater()) {
             this.moveRelative(0.01F, movementInput);
@@ -115,9 +137,10 @@
 
     }
 
+    @Override
     public void aiStep() {
         if (!this.isInWater() && this.onGround && this.verticalCollision) {
-            this.setDeltaMovement(this.getDeltaMovement().add((double)((this.random.nextFloat() * 2.0F - 1.0F) * 0.05F), (double)0.4F, (double)((this.random.nextFloat() * 2.0F - 1.0F) * 0.05F)));
+            this.setDeltaMovement(this.getDeltaMovement().add((double) ((this.random.nextFloat() * 2.0F - 1.0F) * 0.05F), 0.4000000059604645D, (double) ((this.random.nextFloat() * 2.0F - 1.0F) * 0.05F)));
             this.onGround = false;
             this.hasImpulse = true;
             this.playSound(this.getFlopSound(), this.getSoundVolume(), this.getVoicePitch());
@@ -126,18 +149,22 @@
         super.aiStep();
     }
 
+    @Override
     protected InteractionResult mobInteract(Player player, InteractionHand hand) {
-        return Bucketable.bucketMobPickup(player, hand, this).orElse(super.mobInteract(player, hand));
+        return (InteractionResult) Bucketable.bucketMobPickup(player, hand, this).orElse(super.mobInteract(player, hand));
     }
 
+    @Override
     public void saveToBucketTag(ItemStack stack) {
         Bucketable.saveDefaultDataToBucketTag(this, stack);
     }
 
+    @Override
     public void loadFromBucketTag(CompoundTag nbt) {
         Bucketable.loadDefaultDataFromBucketTag(this, nbt);
     }
 
+    @Override
     public SoundEvent getPickupSound() {
         return SoundEvents.BUCKET_FILL_FISH;
     }
@@ -148,14 +175,16 @@
 
     protected abstract SoundEvent getFlopSound();
 
+    @Override
     protected SoundEvent getSwimSound() {
         return SoundEvents.FISH_SWIM;
     }
 
-    protected void playStepSound(BlockPos pos, BlockState state) {
-    }
+    @Override
+    protected void playStepSound(BlockPos pos, BlockState state) {}
+
+    private static class FishMoveControl extends MoveControl {
 
-    static class FishMoveControl extends MoveControl {
         private final AbstractFish fish;
 
         FishMoveControl(AbstractFish owner) {
@@ -163,25 +192,30 @@
             this.fish = owner;
         }
 
+        @Override
         public void tick() {
-            if (this.fish.isEyeInFluid(FluidTags.WATER)) {
+            if (this.fish.isEyeInFluid((Tag) FluidTags.WATER)) {
                 this.fish.setDeltaMovement(this.fish.getDeltaMovement().add(0.0D, 0.005D, 0.0D));
             }
 
             if (this.operation == MoveControl.Operation.MOVE_TO && !this.fish.getNavigation().isDone()) {
-                float f = (float)(this.speedModifier * this.fish.getAttributeValue(Attributes.MOVEMENT_SPEED));
+                float f = (float) (this.speedModifier * this.fish.getAttributeValue(Attributes.MOVEMENT_SPEED));
+
                 this.fish.setSpeed(Mth.lerp(0.125F, this.fish.getSpeed(), f));
-                double d = this.wantedX - this.fish.getX();
-                double e = this.wantedY - this.fish.getY();
-                double g = this.wantedZ - this.fish.getZ();
-                if (e != 0.0D) {
-                    double h = Math.sqrt(d * d + e * e + g * g);
-                    this.fish.setDeltaMovement(this.fish.getDeltaMovement().add(0.0D, (double)this.fish.getSpeed() * (e / h) * 0.1D, 0.0D));
+                double d0 = this.wantedX - this.fish.getX();
+                double d1 = this.wantedY - this.fish.getY();
+                double d2 = this.wantedZ - this.fish.getZ();
+
+                if (d1 != 0.0D) {
+                    double d3 = Math.sqrt(d0 * d0 + d1 * d1 + d2 * d2);
+
+                    this.fish.setDeltaMovement(this.fish.getDeltaMovement().add(0.0D, (double) this.fish.getSpeed() * (d1 / d3) * 0.1D, 0.0D));
                 }
 
-                if (d != 0.0D || g != 0.0D) {
-                    float i = (float)(Mth.atan2(g, d) * (double)(180F / (float)Math.PI)) - 90.0F;
-                    this.fish.setYRot(this.rotlerp(this.fish.getYRot(), i, 90.0F));
+                if (d0 != 0.0D || d2 != 0.0D) {
+                    float f1 = (float) (Mth.atan2(d2, d0) * 57.2957763671875D) - 90.0F;
+
+                    this.fish.setYRot(this.rotlerp(this.fish.getYRot(), f1, 90.0F));
                     this.fish.yBodyRot = this.fish.getYRot();
                 }
 
@@ -191,7 +225,8 @@
         }
     }
 
-    static class FishSwimGoal extends RandomSwimmingGoal {
+    private static class FishSwimGoal extends RandomSwimmingGoal {
+
         private final AbstractFish fish;
 
         public FishSwimGoal(AbstractFish fish) {
@@ -199,6 +234,7 @@
             this.fish = fish;
         }
 
+        @Override
         public boolean canUse() {
             return this.fish.canRandomSwim() && super.canUse();
         }
