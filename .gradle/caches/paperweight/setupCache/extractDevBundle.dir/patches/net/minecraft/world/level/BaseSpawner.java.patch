--- a/net/minecraft/world/level/BaseSpawner.java
+++ b/net/minecraft/world/level/BaseSpawner.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.level;
 
 import com.google.common.collect.Lists;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Optional;
 import java.util.Random;
@@ -27,130 +28,197 @@
 import org.apache.logging.log4j.Logger;
 
 public abstract class BaseSpawner {
+
     private static final Logger LOGGER = LogManager.getLogger();
     private static final int EVENT_SPAWN = 1;
-    private static WeightedRandomList<SpawnData> EMPTY_POTENTIALS = WeightedRandomList.create();
-    private int spawnDelay = 20;
-    private WeightedRandomList<SpawnData> spawnPotentials = EMPTY_POTENTIALS;
-    private SpawnData nextSpawnData = new SpawnData();
+    public static WeightedRandomList<SpawnData> EMPTY_POTENTIALS = WeightedRandomList.create(); // Paper - private->public
+    public int spawnDelay = 20;
+    public WeightedRandomList<SpawnData> spawnPotentials;
+    public SpawnData nextSpawnData;
     private double spin;
     private double oSpin;
-    private int minSpawnDelay = 200;
-    private int maxSpawnDelay = 800;
-    private int spawnCount = 4;
+    public int minSpawnDelay;
+    public int maxSpawnDelay;
+    public int spawnCount;
     @Nullable
     private Entity displayEntity;
-    private int maxNearbyEntities = 6;
-    private int requiredPlayerRange = 16;
-    private int spawnRange = 4;
-    private final Random random = new Random();
+    public int maxNearbyEntities;
+    public int requiredPlayerRange;
+    public int spawnRange;
+    private final Random random;
+    private int tickDelay = 0; // Paper
+
+    public BaseSpawner() {
+        this.spawnPotentials = BaseSpawner.EMPTY_POTENTIALS;
+        this.nextSpawnData = new SpawnData();
+        this.minSpawnDelay = 200;
+        this.maxSpawnDelay = 800;
+        this.spawnCount = 4;
+        this.maxNearbyEntities = 6;
+        this.requiredPlayerRange = 16;
+        this.spawnRange = 4;
+        this.random = new Random();
+    }
 
     @Nullable
-    private ResourceLocation getEntityId(@Nullable Level world, BlockPos pos) {
-        String string = this.nextSpawnData.getTag().getString("id");
+    public ResourceLocation getEntityId(@Nullable Level world, BlockPos pos) {
+        String s = this.nextSpawnData.getTag().getString("id");
 
         try {
-            return StringUtil.isNullOrEmpty(string) ? null : new ResourceLocation(string);
-        } catch (ResourceLocationException var5) {
-            LOGGER.warn("Invalid entity id '{}' at spawner {}:[{},{},{}]", string, world != null ? world.dimension().location() : "<null>", pos.getX(), pos.getY(), pos.getZ());
+            return StringUtil.isNullOrEmpty(s) ? null : new ResourceLocation(s);
+        } catch (ResourceLocationException resourcekeyinvalidexception) {
+            BaseSpawner.LOGGER.warn("Invalid entity id '{}' at spawner {}:[{},{},{}]", s, world != null ? world.dimension().location() : "<null>", pos.getX(), pos.getY(), pos.getZ());
             return null;
         }
     }
 
     public void setEntityId(EntityType<?> type) {
         this.nextSpawnData.getTag().putString("id", Registry.ENTITY_TYPE.getKey(type).toString());
+        this.spawnPotentials = BaseSpawner.EMPTY_POTENTIALS; // CraftBukkit - SPIGOT-3496, MC-92282
     }
 
-    private boolean isNearPlayer(Level world, BlockPos pos) {
-        return world.hasNearbyAlivePlayer((double)pos.getX() + 0.5D, (double)pos.getY() + 0.5D, (double)pos.getZ() + 0.5D, (double)this.requiredPlayerRange);
+    public boolean isNearPlayer(Level world, BlockPos pos) { // Paper private->public
+        return world.isAffectsSpawningPlayerNearby((double) pos.getX() + 0.5D, (double) pos.getY() + 0.5D, (double) pos.getZ() + 0.5D, (double) this.requiredPlayerRange); // Paper
     }
 
     public void clientTick(Level world, BlockPos pos) {
         if (!this.isNearPlayer(world, pos)) {
             this.oSpin = this.spin;
         } else {
-            double d = (double)pos.getX() + world.random.nextDouble();
-            double e = (double)pos.getY() + world.random.nextDouble();
-            double f = (double)pos.getZ() + world.random.nextDouble();
-            world.addParticle(ParticleTypes.SMOKE, d, e, f, 0.0D, 0.0D, 0.0D);
-            world.addParticle(ParticleTypes.FLAME, d, e, f, 0.0D, 0.0D, 0.0D);
+            double d0 = (double) pos.getX() + world.random.nextDouble();
+            double d1 = (double) pos.getY() + world.random.nextDouble();
+            double d2 = (double) pos.getZ() + world.random.nextDouble();
+
+            world.addParticle(ParticleTypes.SMOKE, d0, d1, d2, 0.0D, 0.0D, 0.0D);
+            world.addParticle(ParticleTypes.FLAME, d0, d1, d2, 0.0D, 0.0D, 0.0D);
             if (this.spawnDelay > 0) {
                 --this.spawnDelay;
             }
 
             this.oSpin = this.spin;
-            this.spin = (this.spin + (double)(1000.0F / ((float)this.spawnDelay + 200.0F))) % 360.0D;
+            this.spin = (this.spin + (double) (1000.0F / ((float) this.spawnDelay + 200.0F))) % 360.0D;
         }
 
     }
 
     public void serverTick(ServerLevel world, BlockPos pos) {
+        // Paper start - Configurable mob spawner tick rate
+        if (spawnDelay > 0 && --tickDelay > 0) return;
+        tickDelay = world.paperConfig.mobSpawnerTickRate;
+        // Paper end
         if (this.isNearPlayer(world, pos)) {
-            if (this.spawnDelay == -1) {
+            if (this.spawnDelay < -tickDelay) {
                 this.delay(world, pos);
             }
 
             if (this.spawnDelay > 0) {
-                --this.spawnDelay;
+                this.spawnDelay -= tickDelay; // Paper
             } else {
-                boolean bl = false;
+                boolean flag = false;
+
+                for (int i = 0; i < this.spawnCount; ++i) {
+                    CompoundTag nbttagcompound = this.nextSpawnData.getTag();
+                    Optional<EntityType<?>> optional = EntityType.by(nbttagcompound);
 
-                for(int i = 0; i < this.spawnCount; ++i) {
-                    CompoundTag compoundTag = this.nextSpawnData.getTag();
-                    Optional<EntityType<?>> optional = EntityType.by(compoundTag);
                     if (!optional.isPresent()) {
                         this.delay(world, pos);
                         return;
                     }
 
-                    ListTag listTag = compoundTag.getList("Pos", 6);
-                    int j = listTag.size();
-                    double d = j >= 1 ? listTag.getDouble(0) : (double)pos.getX() + (world.random.nextDouble() - world.random.nextDouble()) * (double)this.spawnRange + 0.5D;
-                    double e = j >= 2 ? listTag.getDouble(1) : (double)(pos.getY() + world.random.nextInt(3) - 1);
-                    double f = j >= 3 ? listTag.getDouble(2) : (double)pos.getZ() + (world.random.nextDouble() - world.random.nextDouble()) * (double)this.spawnRange + 0.5D;
-                    if (world.noCollision(optional.get().getAABB(d, e, f)) && SpawnPlacements.checkSpawnRules(optional.get(), world, MobSpawnType.SPAWNER, new BlockPos(d, e, f), world.getRandom())) {
-                        Entity entity = EntityType.loadEntityRecursive(compoundTag, world, (entityx) -> {
-                            entityx.moveTo(d, e, f, entityx.getYRot(), entityx.getXRot());
-                            return entityx;
+                    ListTag nbttaglist = nbttagcompound.getList("Pos", 6);
+                    int j = nbttaglist.size();
+                    double d0 = j >= 1 ? nbttaglist.getDouble(0) : (double) pos.getX() + (world.random.nextDouble() - world.random.nextDouble()) * (double) this.spawnRange + 0.5D;
+                    double d1 = j >= 2 ? nbttaglist.getDouble(1) : (double) (pos.getY() + world.random.nextInt(3) - 1);
+                    double d2 = j >= 3 ? nbttaglist.getDouble(2) : (double) pos.getZ() + (world.random.nextDouble() - world.random.nextDouble()) * (double) this.spawnRange + 0.5D;
+
+                    if (world.noCollision(((EntityType) optional.get()).getAABB(d0, d1, d2)) && SpawnPlacements.checkSpawnRules((EntityType) optional.get(), world, MobSpawnType.SPAWNER, new BlockPos(d0, d1, d2), world.getRandom())) {
+                        // Paper start
+                        EntityType<?> entityType = optional.get();
+                        String key = EntityType.getKey(entityType).getPath();
+
+                        org.bukkit.entity.EntityType type = org.bukkit.entity.EntityType.fromName(key);
+                        if (type != null) {
+                            com.destroystokyo.paper.event.entity.PreSpawnerSpawnEvent event;
+                            event = new com.destroystokyo.paper.event.entity.PreSpawnerSpawnEvent(
+                                net.minecraft.server.MCUtil.toLocation(world, d0, d1, d2),
+                                type,
+                                net.minecraft.server.MCUtil.toLocation(world, pos)
+                            );
+                            if (!event.callEvent()) {
+                                flag = true;
+                                if (event.shouldAbortSpawn()) {
+                                    break;
+                                }
+                                continue;
+                            }
+                        }
+                        // Paper end
+                        Entity entity = EntityType.loadEntityRecursive(nbttagcompound, world, (entity1) -> {
+                            entity1.moveTo(d0, d1, d2, entity1.getYRot(), entity1.getXRot());
+                            return entity1;
                         });
+
                         if (entity == null) {
                             this.delay(world, pos);
                             return;
                         }
 
-                        int k = world.getEntitiesOfClass(entity.getClass(), (new AABB((double)pos.getX(), (double)pos.getY(), (double)pos.getZ(), (double)(pos.getX() + 1), (double)(pos.getY() + 1), (double)(pos.getZ() + 1))).inflate((double)this.spawnRange)).size();
+                        int k = world.getEntitiesOfClass(entity.getClass(), (new AABB((double) pos.getX(), (double) pos.getY(), (double) pos.getZ(), (double) (pos.getX() + 1), (double) (pos.getY() + 1), (double) (pos.getZ() + 1))).inflate((double) this.spawnRange)).size();
+
                         if (k >= this.maxNearbyEntities) {
                             this.delay(world, pos);
                             return;
                         }
 
+                        entity.preserveMotion = true; // Paper - preserve entity motion from tag
                         entity.moveTo(entity.getX(), entity.getY(), entity.getZ(), world.random.nextFloat() * 360.0F, 0.0F);
                         if (entity instanceof Mob) {
-                            Mob mob = (Mob)entity;
-                            if (!mob.checkSpawnRules(world, MobSpawnType.SPAWNER) || !mob.checkSpawnObstruction(world)) {
+                            Mob entityinsentient = (Mob) entity;
+
+                            if (!entityinsentient.checkSpawnRules((LevelAccessor) world, MobSpawnType.SPAWNER) || !entityinsentient.checkSpawnObstruction((LevelReader) world)) {
                                 continue;
                             }
 
                             if (this.nextSpawnData.getTag().size() == 1 && this.nextSpawnData.getTag().contains("id", 8)) {
-                                ((Mob)entity).finalizeSpawn(world, world.getCurrentDifficultyAt(entity.blockPosition()), MobSpawnType.SPAWNER, (SpawnGroupData)null, (CompoundTag)null);
+                                ((Mob) entity).finalizeSpawn(world, world.getCurrentDifficultyAt(entity.blockPosition()), MobSpawnType.SPAWNER, (SpawnGroupData) null, (CompoundTag) null);
+                            }
+                            // Spigot Start
+                            if (entityinsentient.level.spigotConfig.nerfSpawnerMobs) {
+                                entityinsentient.aware = false;
+                            }
+                            // Spigot End
+                        }
+                        entity.spawnedViaMobSpawner = true; // Paper
+                        entity.spawnReason = org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.SPAWNER; // Paper
+                        flag = true; // Paper
+                        // Spigot Start
+                        if (org.bukkit.craftbukkit.v1_17_R1.event.CraftEventFactory.callSpawnerSpawnEvent(entity, pos).isCancelled()) {
+                            Entity vehicle = entity.getVehicle();
+                            if (vehicle != null) {
+                                vehicle.discard();
+                            }
+                            for (Entity passenger : entity.getIndirectPassengers()) {
+                                passenger.discard();
                             }
+                            continue;
                         }
+                        // Spigot End
 
-                        if (!world.tryAddFreshEntityWithPassengers(entity)) {
+                        if (!world.addAllEntitiesSafely(entity, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.SPAWNER)) { // CraftBukkit
                             this.delay(world, pos);
                             return;
                         }
 
                         world.levelEvent(2004, pos, 0);
                         if (entity instanceof Mob) {
-                            ((Mob)entity).spawnAnim();
+                            ((Mob) entity).spawnAnim();
                         }
 
-                        bl = true;
+                        //flag = true; // Paper - moved up above cancellable event
                     }
                 }
 
-                if (bl) {
+                if (flag) {
                     this.delay(world, pos);
                 }
 
@@ -158,42 +226,54 @@
         }
     }
 
-    private void delay(Level world, BlockPos pos) {
+    public void delay(Level world, BlockPos pos) { // Paper private->public
         if (this.maxSpawnDelay <= this.minSpawnDelay) {
             this.spawnDelay = this.minSpawnDelay;
         } else {
             this.spawnDelay = this.minSpawnDelay + this.random.nextInt(this.maxSpawnDelay - this.minSpawnDelay);
         }
 
-        this.spawnPotentials.getRandom(this.random).ifPresent((spawnData) -> {
-            this.setNextSpawnData(world, pos, spawnData);
+        this.spawnPotentials.getRandom(this.random).ifPresent((mobspawnerdata) -> {
+            this.setSpawnData(world, pos, mobspawnerdata);
         });
         this.broadcastEvent(world, pos, 1);
     }
 
     public void load(@Nullable Level world, BlockPos pos, CompoundTag nbt) {
+        // Paper start - use larger int if set
+        if (nbt.contains("Paper.Delay")) {
+            this.spawnDelay = nbt.getInt("Paper.Delay");
+        } else {
         this.spawnDelay = nbt.getShort("Delay");
+        }
+        // Paper end
         List<SpawnData> list = Lists.newArrayList();
+
         if (nbt.contains("SpawnPotentials", 9)) {
-            ListTag listTag = nbt.getList("SpawnPotentials", 10);
+            ListTag nbttaglist = nbt.getList("SpawnPotentials", 10);
 
-            for(int i = 0; i < listTag.size(); ++i) {
-                list.add(new SpawnData(listTag.getCompound(i)));
+            for (int i = 0; i < nbttaglist.size(); ++i) {
+                list.add(new SpawnData(nbttaglist.getCompound(i)));
             }
         }
 
-        this.spawnPotentials = WeightedRandomList.create(list);
+        this.spawnPotentials = WeightedRandomList.create((List) list);
         if (nbt.contains("SpawnData", 10)) {
-            this.setNextSpawnData(world, pos, new SpawnData(1, nbt.getCompound("SpawnData")));
+            this.setSpawnData(world, pos, new SpawnData(1, nbt.getCompound("SpawnData")));
         } else if (!list.isEmpty()) {
-            this.spawnPotentials.getRandom(this.random).ifPresent((spawnData) -> {
-                this.setNextSpawnData(world, pos, spawnData);
+            this.spawnPotentials.getRandom(this.random).ifPresent((mobspawnerdata) -> {
+                this.setSpawnData(world, pos, mobspawnerdata);
             });
         }
-
+        // Paper start - use ints if set
+        if (nbt.contains("Paper.MinSpawnDelay", 99)) {
+            this.minSpawnDelay = nbt.getInt("Paper.MinSpawnDelay");
+            this.maxSpawnDelay = nbt.getInt("Paper.MaxSpawnDelay");
+            this.spawnCount = nbt.getShort("SpawnCount");
+        } else // Paper end
         if (nbt.contains("MinSpawnDelay", 99)) {
-            this.minSpawnDelay = nbt.getShort("MinSpawnDelay");
-            this.maxSpawnDelay = nbt.getShort("MaxSpawnDelay");
+            this.minSpawnDelay = nbt.getInt("MinSpawnDelay"); // Paper - short->int
+            this.maxSpawnDelay = nbt.getInt("MaxSpawnDelay"); // Paper - short->int
             this.spawnCount = nbt.getShort("SpawnCount");
         }
 
@@ -210,28 +290,45 @@
     }
 
     public CompoundTag save(@Nullable Level world, BlockPos pos, CompoundTag nbt) {
-        ResourceLocation resourceLocation = this.getEntityId(world, pos);
-        if (resourceLocation == null) {
+        ResourceLocation minecraftkey = this.getEntityId(world, pos);
+
+        if (minecraftkey == null) {
             return nbt;
         } else {
-            nbt.putShort("Delay", (short)this.spawnDelay);
-            nbt.putShort("MinSpawnDelay", (short)this.minSpawnDelay);
-            nbt.putShort("MaxSpawnDelay", (short)this.maxSpawnDelay);
-            nbt.putShort("SpawnCount", (short)this.spawnCount);
-            nbt.putShort("MaxNearbyEntities", (short)this.maxNearbyEntities);
-            nbt.putShort("RequiredPlayerRange", (short)this.requiredPlayerRange);
-            nbt.putShort("SpawnRange", (short)this.spawnRange);
+            // Paper start
+            if (spawnDelay > Short.MAX_VALUE) {
+                nbt.putInt("Paper.Delay", this.spawnDelay);
+            }
+            nbt.putShort("Delay", (short) Math.min(Short.MAX_VALUE, this.spawnDelay));
+
+            if (minSpawnDelay > Short.MAX_VALUE || maxSpawnDelay > Short.MAX_VALUE) {
+                nbt.putInt("Paper.MinSpawnDelay", this.minSpawnDelay);
+                nbt.putInt("Paper.MaxSpawnDelay", this.maxSpawnDelay);
+            }
+
+            nbt.putShort("MinSpawnDelay", (short) Math.min(Short.MAX_VALUE, this.minSpawnDelay));
+            nbt.putShort("MaxSpawnDelay", (short) Math.min(Short.MAX_VALUE, this.maxSpawnDelay));
+            // Paper end
+            nbt.putShort("SpawnCount", (short) this.spawnCount);
+            nbt.putShort("MaxNearbyEntities", (short) this.maxNearbyEntities);
+            nbt.putShort("RequiredPlayerRange", (short) this.requiredPlayerRange);
+            nbt.putShort("SpawnRange", (short) this.spawnRange);
             nbt.put("SpawnData", this.nextSpawnData.getTag().copy());
-            ListTag listTag = new ListTag();
+            ListTag nbttaglist = new ListTag();
+
             if (this.spawnPotentials.isEmpty()) {
-                listTag.add(this.nextSpawnData.save());
+                nbttaglist.add(this.nextSpawnData.save());
             } else {
-                for(SpawnData spawnData : this.spawnPotentials.unwrap()) {
-                    listTag.add(spawnData.save());
+                Iterator iterator = this.spawnPotentials.unwrap().iterator();
+
+                while (iterator.hasNext()) {
+                    SpawnData mobspawnerdata = (SpawnData) iterator.next();
+
+                    nbttaglist.add(mobspawnerdata.save());
                 }
             }
 
-            nbt.put("SpawnPotentials", listTag);
+            nbt.put("SpawnPotentials", nbttaglist);
             return nbt;
         }
     }
@@ -241,15 +338,16 @@
         if (this.displayEntity == null) {
             this.displayEntity = EntityType.loadEntityRecursive(this.nextSpawnData.getTag(), world, Function.identity());
             if (this.nextSpawnData.getTag().size() == 1 && this.nextSpawnData.getTag().contains("id", 8) && this.displayEntity instanceof Mob) {
+                ;
             }
         }
 
         return this.displayEntity;
     }
 
-    public boolean onEventTriggered(Level level, int i) {
+    public boolean onEventTriggered(Level world, int i) {
         if (i == 1) {
-            if (level.isClientSide) {
+            if (world.isClientSide) {
                 this.spawnDelay = this.minSpawnDelay;
             }
 
@@ -259,8 +357,8 @@
         }
     }
 
-    public void setNextSpawnData(@Nullable Level world, BlockPos pos, SpawnData spawnEntry) {
-        this.nextSpawnData = spawnEntry;
+    public void setSpawnData(@Nullable Level world, BlockPos blockposition, SpawnData mobspawnerdata) {
+        this.nextSpawnData = mobspawnerdata;
     }
 
     public abstract void broadcastEvent(Level world, BlockPos pos, int i);
