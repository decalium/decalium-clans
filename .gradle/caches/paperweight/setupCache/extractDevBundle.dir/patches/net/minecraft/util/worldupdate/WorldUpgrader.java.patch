--- a/net/minecraft/util/worldupdate/WorldUpgrader.java
+++ b/net/minecraft/util/worldupdate/WorldUpgrader.java
@@ -2,9 +2,10 @@
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableMap.Builder;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Lists;
-import com.google.common.collect.ImmutableMap.Builder;
+import com.google.common.collect.UnmodifiableIterator;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import com.mojang.datafixers.DataFixer;
 import it.unimi.dsi.fastutil.objects.Object2FloatMap;
@@ -28,15 +29,17 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.chunk.storage.ChunkStorage;
 import net.minecraft.world.level.chunk.storage.RegionFile;
+import net.minecraft.world.level.dimension.DimensionType;
 import net.minecraft.world.level.storage.DimensionDataStorage;
 import net.minecraft.world.level.storage.LevelStorageSource;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class WorldUpgrader {
+
     private static final Logger LOGGER = LogManager.getLogger();
     private static final ThreadFactory THREAD_FACTORY = (new ThreadFactoryBuilder()).setDaemon(true).build();
-    private final ImmutableSet<ResourceKey<Level>> levels;
+    private final ImmutableSet<ResourceKey<DimensionType>> levels; // CraftBukkit
     private final boolean eraseCache;
     private final LevelStorageSource.LevelStorageAccess levelStorage;
     private final Thread thread;
@@ -47,20 +50,20 @@
     private volatile int totalChunks;
     private volatile int converted;
     private volatile int skipped;
-    private final Object2FloatMap<ResourceKey<Level>> progressMap = Object2FloatMaps.synchronize(new Object2FloatOpenCustomHashMap<>(Util.identityStrategy()));
+    private final Object2FloatMap<ResourceKey<DimensionType>> progressMap = Object2FloatMaps.synchronize(new Object2FloatOpenCustomHashMap(Util.identityStrategy())); // CraftBukkit
     private volatile Component status = new TranslatableComponent("optimizeWorld.stage.counting");
-    private static final Pattern REGEX = Pattern.compile("^r\\.(-?[0-9]+)\\.(-?[0-9]+)\\.mca$");
+    public static final Pattern REGEX = Pattern.compile("^r\\.(-?[0-9]+)\\.(-?[0-9]+)\\.mca$");
     private final DimensionDataStorage overworldDataStorage;
 
-    public WorldUpgrader(LevelStorageSource.LevelStorageAccess session, DataFixer dataFixer, ImmutableSet<ResourceKey<Level>> worlds, boolean eraseCache) {
+    public WorldUpgrader(LevelStorageSource.LevelStorageAccess session, DataFixer dataFixer, ImmutableSet<ResourceKey<DimensionType>> worlds, boolean eraseCache) { // CraftBukkit
         this.levels = worlds;
         this.eraseCache = eraseCache;
         this.dataFixer = dataFixer;
         this.levelStorage = session;
         this.overworldDataStorage = new DimensionDataStorage(new File(this.levelStorage.getDimensionPath(Level.OVERWORLD), "data"), dataFixer);
-        this.thread = THREAD_FACTORY.newThread(this::work);
+        this.thread = WorldUpgrader.THREAD_FACTORY.newThread(this::work);
         this.thread.setUncaughtExceptionHandler((thread, throwable) -> {
-            LOGGER.error("Error upgrading world", throwable);
+            WorldUpgrader.LOGGER.error("Error upgrading world", throwable);
             this.status = new TranslatableComponent("optimizeWorld.stage.failed");
             this.finished = true;
         });
@@ -72,163 +75,188 @@
 
         try {
             this.thread.join();
-        } catch (InterruptedException var2) {
+        } catch (InterruptedException interruptedexception) {
+            ;
         }
 
     }
 
     private void work() {
         this.totalChunks = 0;
-        Builder<ResourceKey<Level>, ListIterator<ChunkPos>> builder = ImmutableMap.builder();
+        Builder<ResourceKey<DimensionType>, ListIterator<ChunkPos>> builder = ImmutableMap.builder(); // CraftBukkit
 
-        for(ResourceKey<Level> resourceKey : this.levels) {
-            List<ChunkPos> list = this.getAllChunkPos(resourceKey);
-            builder.put(resourceKey, list.listIterator());
-            this.totalChunks += list.size();
+        List list;
+
+        for (UnmodifiableIterator unmodifiableiterator = this.levels.iterator(); unmodifiableiterator.hasNext(); this.totalChunks += list.size()) {
+            ResourceKey<DimensionType> resourcekey = (ResourceKey) unmodifiableiterator.next(); // CraftBukkit
+
+            list = this.getAllChunkPos(resourcekey);
+            builder.put(resourcekey, list.listIterator());
         }
 
         if (this.totalChunks == 0) {
             this.finished = true;
         } else {
-            float f = (float)this.totalChunks;
-            ImmutableMap<ResourceKey<Level>, ListIterator<ChunkPos>> immutableMap = builder.build();
-            Builder<ResourceKey<Level>, ChunkStorage> builder2 = ImmutableMap.builder();
+            float f = (float) this.totalChunks;
+            ImmutableMap<ResourceKey<DimensionType>, ListIterator<ChunkPos>> immutablemap = builder.build(); // CraftBukkit
+            Builder<ResourceKey<DimensionType>, ChunkStorage> builder1 = ImmutableMap.builder(); // CraftBukkit
+            UnmodifiableIterator unmodifiableiterator1 = this.levels.iterator();
 
-            for(ResourceKey<Level> resourceKey2 : this.levels) {
-                File file = this.levelStorage.getDimensionPath(resourceKey2);
-                builder2.put(resourceKey2, new ChunkStorage(new File(file, "region"), this.dataFixer, true));
+            while (unmodifiableiterator1.hasNext()) {
+                ResourceKey<DimensionType> resourcekey1 = (ResourceKey) unmodifiableiterator1.next(); // CraftBukkit
+                File file = this.levelStorage.getDimensionPath((ResourceKey) null); // CraftBukkit
+
+                builder1.put(resourcekey1, new ChunkStorage(new File(file, "region"), this.dataFixer, true));
             }
 
-            ImmutableMap<ResourceKey<Level>, ChunkStorage> immutableMap2 = builder2.build();
-            long l = Util.getMillis();
+            ImmutableMap<ResourceKey<DimensionType>, ChunkStorage> immutablemap1 = builder1.build(); // CraftBukkit
+            long i = Util.getMillis();
+
             this.status = new TranslatableComponent("optimizeWorld.stage.upgrading");
 
-            while(this.running) {
-                boolean bl = false;
-                float g = 0.0F;
+            while (this.running) {
+                boolean flag = false;
+                float f1 = 0.0F;
 
-                for(ResourceKey<Level> resourceKey3 : this.levels) {
-                    ListIterator<ChunkPos> listIterator = immutableMap.get(resourceKey3);
-                    ChunkStorage chunkStorage = immutableMap2.get(resourceKey3);
-                    if (listIterator.hasNext()) {
-                        ChunkPos chunkPos = listIterator.next();
-                        boolean bl2 = false;
+                float f2;
+
+                for (UnmodifiableIterator unmodifiableiterator2 = this.levels.iterator(); unmodifiableiterator2.hasNext(); f1 += f2) {
+                    ResourceKey<DimensionType> resourcekey2 = (ResourceKey) unmodifiableiterator2.next(); // CraftBukkit
+                    ListIterator<ChunkPos> listiterator = (ListIterator) immutablemap.get(resourcekey2);
+                    ChunkStorage ichunkloader = (ChunkStorage) immutablemap1.get(resourcekey2);
+
+                    if (listiterator.hasNext()) {
+                        ChunkPos chunkcoordintpair = (ChunkPos) listiterator.next();
+                        boolean flag1 = false;
 
                         try {
-                            CompoundTag compoundTag = chunkStorage.read(chunkPos);
-                            if (compoundTag != null) {
-                                int i = ChunkStorage.getVersion(compoundTag);
-                                CompoundTag compoundTag2 = chunkStorage.upgradeChunkTag(resourceKey3, () -> {
+                            CompoundTag nbttagcompound = ichunkloader.read(chunkcoordintpair);
+
+                            if (nbttagcompound != null) {
+                                int j = ChunkStorage.getVersion(nbttagcompound);
+                                CompoundTag nbttagcompound1 = ichunkloader.getChunkData(resourcekey2, () -> {
                                     return this.overworldDataStorage;
-                                }, compoundTag);
-                                CompoundTag compoundTag3 = compoundTag2.getCompound("Level");
-                                ChunkPos chunkPos2 = new ChunkPos(compoundTag3.getInt("xPos"), compoundTag3.getInt("zPos"));
-                                if (!chunkPos2.equals(chunkPos)) {
-                                    LOGGER.warn("Chunk {} has invalid position {}", chunkPos, chunkPos2);
+                                }, nbttagcompound, chunkcoordintpair, null); // CraftBukkit
+                                CompoundTag nbttagcompound2 = nbttagcompound1.getCompound("Level");
+                                ChunkPos chunkcoordintpair1 = new ChunkPos(nbttagcompound2.getInt("xPos"), nbttagcompound2.getInt("zPos"));
+
+                                if (!chunkcoordintpair1.equals(chunkcoordintpair)) {
+                                    WorldUpgrader.LOGGER.warn("Chunk {} has invalid position {}", chunkcoordintpair, chunkcoordintpair1);
                                 }
 
-                                boolean bl3 = i < SharedConstants.getCurrentVersion().getWorldVersion();
+                                boolean flag2 = j < SharedConstants.getCurrentVersion().getWorldVersion();
+
                                 if (this.eraseCache) {
-                                    bl3 = bl3 || compoundTag3.contains("Heightmaps");
-                                    compoundTag3.remove("Heightmaps");
-                                    bl3 = bl3 || compoundTag3.contains("isLightOn");
-                                    compoundTag3.remove("isLightOn");
+                                    flag2 = flag2 || nbttagcompound2.contains("Heightmaps");
+                                    nbttagcompound2.remove("Heightmaps");
+                                    flag2 = flag2 || nbttagcompound2.contains("isLightOn");
+                                    nbttagcompound2.remove("isLightOn");
                                 }
 
-                                if (bl3) {
-                                    chunkStorage.write(chunkPos, compoundTag2);
-                                    bl2 = true;
+                                if (flag2) {
+                                    ichunkloader.write(chunkcoordintpair, nbttagcompound1);
+                                    flag1 = true;
                                 }
                             }
-                        } catch (ReportedException var23) {
-                            Throwable throwable = var23.getCause();
+                        } catch (ReportedException reportedexception) {
+                            Throwable throwable = reportedexception.getCause();
+
                             if (!(throwable instanceof IOException)) {
-                                throw var23;
+                                throw reportedexception;
                             }
 
-                            LOGGER.error("Error upgrading chunk {}", chunkPos, throwable);
-                        } catch (IOException var24) {
-                            LOGGER.error("Error upgrading chunk {}", chunkPos, var24);
+                            WorldUpgrader.LOGGER.error("Error upgrading chunk {}", chunkcoordintpair, throwable);
+                        } catch (IOException ioexception) {
+                            WorldUpgrader.LOGGER.error("Error upgrading chunk {}", chunkcoordintpair, ioexception);
                         }
 
-                        if (bl2) {
+                        if (flag1) {
                             ++this.converted;
                         } else {
                             ++this.skipped;
                         }
 
-                        bl = true;
+                        flag = true;
                     }
 
-                    float h = (float)listIterator.nextIndex() / f;
-                    this.progressMap.put(resourceKey3, h);
-                    g += h;
+                    f2 = (float) listiterator.nextIndex() / f;
+                    this.progressMap.put(resourcekey2, f2);
                 }
 
-                this.progress = g;
-                if (!bl) {
+                this.progress = f1;
+                if (!flag) {
                     this.running = false;
                 }
             }
 
             this.status = new TranslatableComponent("optimizeWorld.stage.finished");
+            UnmodifiableIterator unmodifiableiterator3 = immutablemap1.values().iterator();
+
+            while (unmodifiableiterator3.hasNext()) {
+                ChunkStorage ichunkloader1 = (ChunkStorage) unmodifiableiterator3.next();
 
-            for(ChunkStorage chunkStorage2 : immutableMap2.values()) {
                 try {
-                    chunkStorage2.close();
-                } catch (IOException var22) {
-                    LOGGER.error("Error upgrading chunk", (Throwable)var22);
+                    ichunkloader1.close();
+                } catch (IOException ioexception1) {
+                    WorldUpgrader.LOGGER.error("Error upgrading chunk", ioexception1);
                 }
             }
 
             this.overworldDataStorage.save();
-            l = Util.getMillis() - l;
-            LOGGER.info("World optimizaton finished after {} ms", (long)l);
+            i = Util.getMillis() - i;
+            WorldUpgrader.LOGGER.info("World optimizaton finished after {} ms", i);
             this.finished = true;
         }
     }
 
-    private List<ChunkPos> getAllChunkPos(ResourceKey<Level> world) {
-        File file = this.levelStorage.getDimensionPath(world);
-        File file2 = new File(file, "region");
-        File[] files = file2.listFiles((directory, name) -> {
-            return name.endsWith(".mca");
+    private List<ChunkPos> getAllChunkPos(ResourceKey<DimensionType> world) { // CraftBukkit
+        File file = this.levelStorage.getDimensionPath((ResourceKey) null); // CraftBukkit
+        File file1 = new File(file, "region");
+        File[] afile = file1.listFiles((file2, s) -> {
+            return s.endsWith(".mca");
         });
-        if (files == null) {
+
+        if (afile == null) {
             return ImmutableList.of();
         } else {
             List<ChunkPos> list = Lists.newArrayList();
+            File[] afile1 = afile;
+            int i = afile.length;
+
+            for (int j = 0; j < i; ++j) {
+                File file2 = afile1[j];
+                Matcher matcher = WorldUpgrader.REGEX.matcher(file2.getName());
 
-            for(File file3 : files) {
-                Matcher matcher = REGEX.matcher(file3.getName());
                 if (matcher.matches()) {
-                    int i = Integer.parseInt(matcher.group(1)) << 5;
-                    int j = Integer.parseInt(matcher.group(2)) << 5;
+                    int k = Integer.parseInt(matcher.group(1)) << 5;
+                    int l = Integer.parseInt(matcher.group(2)) << 5;
 
                     try {
-                        RegionFile regionFile = new RegionFile(file3, file2, true);
+                        RegionFile regionfile = new RegionFile(file2, file1, true);
 
                         try {
-                            for(int k = 0; k < 32; ++k) {
-                                for(int l = 0; l < 32; ++l) {
-                                    ChunkPos chunkPos = new ChunkPos(k + i, l + j);
-                                    if (regionFile.doesChunkExist(chunkPos)) {
-                                        list.add(chunkPos);
+                            for (int i1 = 0; i1 < 32; ++i1) {
+                                for (int j1 = 0; j1 < 32; ++j1) {
+                                    ChunkPos chunkcoordintpair = new ChunkPos(i1 + k, j1 + l);
+
+                                    if (regionfile.doesChunkExist(chunkcoordintpair)) {
+                                        list.add(chunkcoordintpair);
                                     }
                                 }
                             }
-                        } catch (Throwable var18) {
+                        } catch (Throwable throwable) {
                             try {
-                                regionFile.close();
-                            } catch (Throwable var17) {
-                                var18.addSuppressed(var17);
+                                regionfile.close();
+                            } catch (Throwable throwable1) {
+                                throwable.addSuppressed(throwable1);
                             }
 
-                            throw var18;
+                            throw throwable;
                         }
 
-                        regionFile.close();
-                    } catch (Throwable var19) {
+                        regionfile.close();
+                    } catch (Throwable throwable2) {
+                        ;
                     }
                 }
             }
@@ -242,7 +270,7 @@
     }
 
     public ImmutableSet<ResourceKey<Level>> levels() {
-        return this.levels;
+        throw new AssertionError("Unsupported"); // CraftBukkit
     }
 
     public float dimensionProgress(ResourceKey<Level> world) {
