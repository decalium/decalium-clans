--- a/net/minecraft/world/level/chunk/storage/RegionFileStorage.java
+++ b/net/minecraft/world/level/chunk/storage/RegionFileStorage.java
@@ -1,20 +1,27 @@
 package net.minecraft.world.level.chunk.storage;
 
 import it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap;
+import it.unimi.dsi.fastutil.objects.ObjectIterator;
+import java.io.DataInput;
 import java.io.DataInputStream;
+import java.io.DataOutput;
 import java.io.DataOutputStream;
 import java.io.File;
 import java.io.IOException;
 import javax.annotation.Nullable;
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.NbtIo;
+import net.minecraft.nbt.Tag;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.ExceptionCollector;
 import net.minecraft.world.level.ChunkPos;
 
-public final class RegionFileStorage implements AutoCloseable {
+public class RegionFileStorage implements AutoCloseable {
+
     public static final String ANVIL_EXTENSION = ".mca";
     private static final int MAX_CACHE_SIZE = 256;
-    private final Long2ObjectLinkedOpenHashMap<RegionFile> regionCache = new Long2ObjectLinkedOpenHashMap<>();
+    public final Long2ObjectLinkedOpenHashMap<RegionFile> regionCache = new Long2ObjectLinkedOpenHashMap();
     private final File folder;
     private final boolean sync;
 
@@ -23,112 +30,277 @@
         this.sync = dsync;
     }
 
-    private RegionFile getRegionFile(ChunkPos pos) throws IOException {
-        long l = ChunkPos.asLong(pos.getRegionX(), pos.getRegionZ());
-        RegionFile regionFile = this.regionCache.getAndMoveToFirst(l);
-        if (regionFile != null) {
-            return regionFile;
+    // Paper start
+    public static ChunkPos getRegionFileCoordinates(File file) {
+        String fileName = file.getName();
+        if (!fileName.startsWith("r.") || !fileName.endsWith(".mca")) {
+            return null;
+        }
+
+        String[] split = fileName.split("\\.");
+
+        if (split.length != 4) {
+            return null;
+        }
+
+        try {
+            int x = Integer.parseInt(split[1]);
+            int z = Integer.parseInt(split[2]);
+
+            return new ChunkPos(x << 5, z << 5);
+        } catch (NumberFormatException ex) {
+            return null;
+        }
+    }
+
+    public synchronized RegionFile getRegionFileIfLoaded(ChunkPos chunkcoordintpair) {
+        return this.regionCache.getAndMoveToFirst(ChunkPos.asLong(chunkcoordintpair.getRegionX(), chunkcoordintpair.getRegionZ()));
+    }
+
+    public synchronized boolean chunkExists(ChunkPos pos) throws IOException {
+        RegionFile regionfile = getFile(pos, true);
+
+        return regionfile != null ? regionfile.hasChunk(pos) : false;
+    }
+
+    public synchronized RegionFile getFile(ChunkPos chunkcoordintpair, boolean existingOnly) throws IOException { // CraftBukkit
+        return this.getFile(chunkcoordintpair, existingOnly, false);
+    }
+    public synchronized RegionFile getFile(ChunkPos chunkcoordintpair, boolean existingOnly, boolean lock) throws IOException {
+        // Paper end
+        long i = ChunkPos.asLong(chunkcoordintpair.getRegionX(), chunkcoordintpair.getRegionZ());
+        RegionFile regionfile = (RegionFile) this.regionCache.getAndMoveToFirst(i);
+
+        if (regionfile != null) {
+            // Paper start
+            if (lock) {
+                // must be in this synchronized block
+                regionfile.fileLock.lock();
+            }
+            // Paper end
+            return regionfile;
         } else {
-            if (this.regionCache.size() >= 256) {
-                this.regionCache.removeLast().close();
+            if (this.regionCache.size() >= com.destroystokyo.paper.PaperConfig.regionFileCacheSize) { // Paper - configurable
+                ((RegionFile) this.regionCache.removeLast()).close();
             }
 
             if (!this.folder.exists()) {
                 this.folder.mkdirs();
             }
 
-            File file = new File(this.folder, "r." + pos.getRegionX() + "." + pos.getRegionZ() + ".mca");
-            RegionFile regionFile2 = new RegionFile(file, this.folder, this.sync);
-            this.regionCache.putAndMoveToFirst(l, regionFile2);
-            return regionFile2;
+            File file = this.folder;
+            int j = chunkcoordintpair.getRegionX();
+            File file1 = new File(file, "r." + j + "." + chunkcoordintpair.getRegionZ() + ".mca");
+            if (existingOnly && !file1.exists()) return null; // CraftBukkit
+            RegionFile regionfile1 = new RegionFile(file1, this.folder, this.sync);
+
+            this.regionCache.putAndMoveToFirst(i, regionfile1);
+            // Paper start
+            if (lock) {
+                // must be in this synchronized block
+                regionfile1.fileLock.lock();
+            }
+            // Paper end
+            return regionfile1;
+        }
+    }
+
+    // Paper start
+    private static void printOversizedLog(String msg, File file, int x, int z) {
+        org.apache.logging.log4j.LogManager.getLogger().fatal(msg + " (" + file.toString().replaceAll(".+[\\\\/]", "") + " - " + x + "," + z + ") Go clean it up to remove this message. /minecraft:tp " + (x<<4)+" 128 "+(z<<4) + " - DO NOT REPORT THIS TO PAPER - You may ask for help on Discord, but do not file an issue. These error messages can not be removed.");
+    }
+
+    private static final int DEFAULT_SIZE_THRESHOLD = 1024 * 8;
+    private static final int OVERZEALOUS_TOTAL_THRESHOLD = 1024 * 64;
+    private static final int OVERZEALOUS_THRESHOLD = 1024;
+    private static int SIZE_THRESHOLD = DEFAULT_SIZE_THRESHOLD;
+    private static void resetFilterThresholds() {
+        SIZE_THRESHOLD = Math.max(1024 * 4, Integer.getInteger("Paper.FilterThreshhold", DEFAULT_SIZE_THRESHOLD));
+    }
+    static {
+        resetFilterThresholds();
+    }
+
+    static boolean isOverzealous() {
+        return SIZE_THRESHOLD == OVERZEALOUS_THRESHOLD;
+    }
+
+
+    private static CompoundTag readOversizedChunk(RegionFile regionfile, ChunkPos chunkCoordinate) throws IOException {
+        synchronized (regionfile) {
+            try (DataInputStream datainputstream = regionfile.getChunkDataInputStream(chunkCoordinate)) {
+                CompoundTag oversizedData = regionfile.getOversizedData(chunkCoordinate.x, chunkCoordinate.z);
+                CompoundTag chunk = NbtIo.read((DataInput) datainputstream);
+                if (oversizedData == null) {
+                    return chunk;
+                }
+                CompoundTag oversizedLevel = oversizedData.getCompound("Level");
+                CompoundTag level = chunk.getCompound("Level");
+
+                mergeChunkList(level, oversizedLevel, "Entities");
+                mergeChunkList(level, oversizedLevel, "TileEntities");
+
+                chunk.put("Level", level);
+
+                return chunk;
+            } catch (Throwable throwable) {
+                throwable.printStackTrace();
+                throw throwable;
+            }
+        }
+    }
+
+    private static void mergeChunkList(CompoundTag level, CompoundTag oversizedLevel, String key) {
+        ListTag levelList = level.getList(key, 10);
+        ListTag oversizedList = oversizedLevel.getList(key, 10);
+
+        if (!oversizedList.isEmpty()) {
+            levelList.addAll(oversizedList);
+            level.put(key, levelList);
+        }
+    }
+
+    private static int getNBTSize(Tag nbtBase) {
+        DataOutputStream test = new DataOutputStream(new org.bukkit.craftbukkit.libs.org.apache.commons.io.output.NullOutputStream());
+        try {
+            nbtBase.write(test);
+            return test.size();
+        } catch (IOException e) {
+            e.printStackTrace();
+            return 0;
         }
     }
 
+    // Paper End
+
     @Nullable
     public CompoundTag read(ChunkPos pos) throws IOException {
-        RegionFile regionFile = this.getRegionFile(pos);
-        DataInputStream dataInputStream = regionFile.getChunkDataInputStream(pos);
+        // CraftBukkit start - SPIGOT-5680: There's no good reason to preemptively create files on read, save that for writing
+        RegionFile regionfile = this.getFile(pos, true, true); // Paper
+        if (regionfile == null) {
+            return null;
+        }
+        // CraftBukkit end
+        try { // Paper
+        DataInputStream datainputstream = regionfile.getChunkDataInputStream(pos);
 
-        CompoundTag var8;
-        label43: {
+        // Paper start
+        if (regionfile.isOversized(pos.x, pos.z)) {
+            printOversizedLog("Loading Oversized Chunk!", regionfile.regionFile, pos.x, pos.z);
+            return readOversizedChunk(regionfile, pos);
+        }
+        // Paper end
+        CompoundTag nbttagcompound;
+        label43:
+        {
             try {
-                if (dataInputStream == null) {
-                    var8 = null;
+                if (datainputstream != null) {
+                    nbttagcompound = NbtIo.read((DataInput) datainputstream);
                     break label43;
                 }
 
-                var8 = NbtIo.read(dataInputStream);
-            } catch (Throwable var7) {
-                if (dataInputStream != null) {
+                nbttagcompound = null;
+            } catch (Throwable throwable) {
+                if (datainputstream != null) {
                     try {
-                        dataInputStream.close();
-                    } catch (Throwable var6) {
-                        var7.addSuppressed(var6);
+                        datainputstream.close();
+                    } catch (Throwable throwable1) {
+                        throwable.addSuppressed(throwable1);
                     }
                 }
 
-                throw var7;
+                throw throwable;
             }
 
-            if (dataInputStream != null) {
-                dataInputStream.close();
+            if (datainputstream != null) {
+                datainputstream.close();
             }
 
-            return var8;
+            return nbttagcompound;
         }
 
-        if (dataInputStream != null) {
-            dataInputStream.close();
+        if (datainputstream != null) {
+            datainputstream.close();
         }
 
-        return var8;
+        return nbttagcompound;
+        } finally { // Paper start
+            regionfile.fileLock.unlock();
+        } // Paper end
     }
 
     protected void write(ChunkPos pos, @Nullable CompoundTag nbt) throws IOException {
-        RegionFile regionFile = this.getRegionFile(pos);
+        RegionFile regionfile = this.getFile(pos, false, true); // CraftBukkit // Paper
+        try { // Paper
+        int attempts = 0; Exception laste = null; while (attempts++ < 5) { try { // Paper
+
         if (nbt == null) {
-            regionFile.clear(pos);
+            regionfile.clear(pos);
         } else {
-            DataOutputStream dataOutputStream = regionFile.getChunkDataOutputStream(pos);
+            DataOutputStream dataoutputstream = regionfile.getChunkDataOutputStream(pos);
 
             try {
-                NbtIo.write(nbt, dataOutputStream);
-            } catch (Throwable var8) {
-                if (dataOutputStream != null) {
+                NbtIo.write(nbt, (DataOutput) dataoutputstream);
+                regionfile.setStatus(pos.x, pos.z, ChunkSerializer.getStatus(nbt)); // Paper - cache status on disk
+                regionfile.setOversized(pos.x, pos.z, false); // Paper - We don't do this anymore, mojang stores differently, but clear old meta flag if it exists to get rid of our own meta file once last oversized is gone
+            } catch (Throwable throwable) {
+                if (dataoutputstream != null) {
                     try {
-                        dataOutputStream.close();
-                    } catch (Throwable var7) {
-                        var8.addSuppressed(var7);
+                        dataoutputstream.close();
+                    } catch (Throwable throwable1) {
+                        throwable.addSuppressed(throwable1);
                     }
                 }
 
-                throw var8;
+                throw throwable;
             }
 
-            if (dataOutputStream != null) {
-                dataOutputStream.close();
+            if (dataoutputstream != null) {
+                dataoutputstream.close();
             }
         }
 
+            // Paper start
+            return;
+        } catch (Exception ex)  {
+            laste = ex;
+        }
+        }
+
+        if (laste != null) {
+            com.destroystokyo.paper.exception.ServerInternalException.reportInternalException(laste);
+            MinecraftServer.LOGGER.error("Failed to save chunk", laste);
+        }
+        // Paper end
+        } finally { // Paper start
+            regionfile.fileLock.unlock();
+        } // Paper end
     }
 
-    public void close() throws IOException {
-        ExceptionCollector<IOException> exceptionCollector = new ExceptionCollector<>();
+    public synchronized void close() throws IOException { // Paper -> synchronized
+        ExceptionCollector<IOException> exceptionsuppressor = new ExceptionCollector<>();
+        ObjectIterator objectiterator = this.regionCache.values().iterator();
+
+        while (objectiterator.hasNext()) {
+            RegionFile regionfile = (RegionFile) objectiterator.next();
 
-        for(RegionFile regionFile : this.regionCache.values()) {
             try {
-                regionFile.close();
-            } catch (IOException var5) {
-                exceptionCollector.add(var5);
+                regionfile.close();
+            } catch (IOException ioexception) {
+                exceptionsuppressor.add(ioexception);
             }
         }
 
-        exceptionCollector.throwIfPresent();
+        exceptionsuppressor.throwIfPresent();
     }
 
-    public void flush() throws IOException {
-        for(RegionFile regionFile : this.regionCache.values()) {
-            regionFile.flush();
+    public synchronized void flush() throws IOException { // Paper - synchronize
+        ObjectIterator objectiterator = this.regionCache.values().iterator();
+
+        while (objectiterator.hasNext()) {
+            RegionFile regionfile = (RegionFile) objectiterator.next();
+
+            regionfile.flush();
         }
 
     }
