--- a/net/minecraft/world/entity/ai/behavior/GateBehavior.java
+++ b/net/minecraft/world/entity/ai/behavior/GateBehavior.java
@@ -16,7 +16,7 @@
     private final Set<MemoryModuleType<?>> exitErasedMemories;
     private final GateBehavior.OrderPolicy orderPolicy;
     private final GateBehavior.RunningPolicy runningPolicy;
-    private final ShufflingList<Behavior<? super E>> behaviors = new ShufflingList<>();
+    private final ShufflingList<Behavior<? super E>> behaviors = new ShufflingList<>(false); // Paper  - don't use a clone
 
     public GateBehavior(Map<MemoryModuleType<?>, MemoryStatus> requiredMemoryState, Set<MemoryModuleType<?>> memoriesToForgetWhenStopped, GateBehavior.OrderPolicy order, GateBehavior.RunningPolicy runMode, List<Pair<Behavior<? super E>, Integer>> tasks) {
         super(requiredMemoryState);
@@ -28,6 +28,7 @@
         });
     }
 
+    @Override
     protected boolean canStillUse(ServerLevel world, E entity, long time) {
         return this.behaviors.stream().filter((behavior) -> {
             return behavior.getStatus() == Behavior.Status.RUNNING;
@@ -36,15 +37,18 @@
         });
     }
 
+    @Override
     protected boolean timedOut(long time) {
         return false;
     }
 
+    @Override
     protected void start(ServerLevel world, E entity, long time) {
         this.orderPolicy.apply(this.behaviors);
         this.runningPolicy.apply(this.behaviors.stream(), world, entity, time);
     }
 
+    @Override
     protected void tick(ServerLevel world, E entity, long time) {
         this.behaviors.stream().filter((behavior) -> {
             return behavior.getStatus() == Behavior.Status.RUNNING;
@@ -53,6 +57,7 @@
         });
     }
 
+    @Override
     protected void stop(ServerLevel world, E entity, long time) {
         this.behaviors.stream().filter((behavior) -> {
             return behavior.getStatus() == Behavior.Status.RUNNING;
@@ -62,6 +67,7 @@
         this.exitErasedMemories.forEach(entity.getBrain()::eraseMemory);
     }
 
+    @Override
     public String toString() {
         Set<? extends Behavior<? super E>> set = this.behaviors.stream().filter((behavior) -> {
             return behavior.getStatus() == Behavior.Status.RUNNING;
@@ -87,6 +93,7 @@
 
     public static enum RunningPolicy {
         RUN_ONE {
+            @Override
             public <E extends LivingEntity> void apply(Stream<Behavior<? super E>> tasks, ServerLevel world, E entity, long time) {
                 tasks.filter((behavior) -> {
                     return behavior.getStatus() == Behavior.Status.STOPPED;
@@ -96,6 +103,7 @@
             }
         },
         TRY_ALL {
+            @Override
             public <E extends LivingEntity> void apply(Stream<Behavior<? super E>> tasks, ServerLevel world, E entity, long time) {
                 tasks.filter((behavior) -> {
                     return behavior.getStatus() == Behavior.Status.STOPPED;
