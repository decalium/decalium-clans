--- a/net/minecraft/world/entity/monster/Skeleton.java
+++ b/net/minecraft/world/entity/monster/Skeleton.java
@@ -11,35 +11,40 @@
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.Items;
+import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.level.Level;
 
 public class Skeleton extends AbstractSkeleton {
-    private static final EntityDataAccessor<Boolean> DATA_STRAY_CONVERSION_ID = SynchedEntityData.defineId(Skeleton.class, EntityDataSerializers.BOOLEAN);
+
+    public static final EntityDataAccessor<Boolean> DATA_STRAY_CONVERSION_ID = SynchedEntityData.defineId(Skeleton.class, EntityDataSerializers.BOOLEAN);
     public static final String CONVERSION_TAG = "StrayConversionTime";
     private int inPowderSnowTime;
-    private int conversionTime;
+    public int conversionTime;
 
     public Skeleton(EntityType<? extends Skeleton> type, Level world) {
         super(type, world);
     }
 
+    @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.getEntityData().define(DATA_STRAY_CONVERSION_ID, false);
+        this.getEntityData().define(Skeleton.DATA_STRAY_CONVERSION_ID, false);
     }
 
     public boolean isFreezeConverting() {
-        return this.getEntityData().get(DATA_STRAY_CONVERSION_ID);
+        return (Boolean) this.getEntityData().get(Skeleton.DATA_STRAY_CONVERSION_ID);
     }
 
     public void setFreezeConverting(boolean converting) {
-        this.entityData.set(DATA_STRAY_CONVERSION_ID, converting);
+        this.entityData.set(Skeleton.DATA_STRAY_CONVERSION_ID, converting);
     }
 
+    @Override
     public boolean isShaking() {
         return this.isFreezeConverting();
     }
 
+    @Override
     public void tick() {
         if (!this.level.isClientSide && this.isAlive() && !this.isNoAi()) {
             if (this.isFreezeConverting()) {
@@ -60,11 +65,13 @@
         super.tick();
     }
 
+    @Override
     public void addAdditionalSaveData(CompoundTag nbt) {
         super.addAdditionalSaveData(nbt);
         nbt.putInt("StrayConversionTime", this.isFreezeConverting() ? this.conversionTime : -1);
     }
 
+    @Override
     public void readAdditionalSaveData(CompoundTag nbt) {
         super.readAdditionalSaveData(nbt);
         if (nbt.contains("StrayConversionTime", 99) && nbt.getInt("StrayConversionTime") > -1) {
@@ -73,47 +80,55 @@
 
     }
 
-    private void startFreezeConversion(int time) {
+    public void startFreezeConversion(int time) {
         this.conversionTime = time;
-        this.entityData.set(DATA_STRAY_CONVERSION_ID, true);
+        this.entityData.set(Skeleton.DATA_STRAY_CONVERSION_ID, true);
     }
 
     protected void doFreezeConversion() {
-        this.convertTo(EntityType.STRAY, true);
+        this.convertTo(EntityType.STRAY, true, org.bukkit.event.entity.EntityTransformEvent.TransformReason.FROZEN, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.FROZEN); // CraftBukkit - add spawn and transform reasons
         if (!this.isSilent()) {
-            this.level.levelEvent((Player)null, 1048, this.blockPosition(), 0);
+            this.level.levelEvent((Player) null, 1048, this.blockPosition(), 0);
         }
 
     }
 
+    @Override
     public boolean canFreeze() {
         return false;
     }
 
+    @Override
     protected SoundEvent getAmbientSound() {
         return SoundEvents.SKELETON_AMBIENT;
     }
 
+    @Override
     protected SoundEvent getHurtSound(DamageSource source) {
         return SoundEvents.SKELETON_HURT;
     }
 
+    @Override
     protected SoundEvent getDeathSound() {
         return SoundEvents.SKELETON_DEATH;
     }
 
+    @Override
     SoundEvent getStepSound() {
         return SoundEvents.SKELETON_STEP;
     }
 
+    @Override
     protected void dropCustomDeathLoot(DamageSource source, int lootingMultiplier, boolean allowDrops) {
         super.dropCustomDeathLoot(source, lootingMultiplier, allowDrops);
         Entity entity = source.getEntity();
+
         if (entity instanceof Creeper) {
-            Creeper creeper = (Creeper)entity;
-            if (creeper.canDropMobsSkull()) {
-                creeper.increaseDroppedSkulls();
-                this.spawnAtLocation(Items.SKELETON_SKULL);
+            Creeper entitycreeper = (Creeper) entity;
+
+            if (entitycreeper.canDropMobsSkull()) {
+                entitycreeper.increaseDroppedSkulls();
+                this.spawnAtLocation((ItemLike) Items.SKELETON_SKULL);
             }
         }
 
