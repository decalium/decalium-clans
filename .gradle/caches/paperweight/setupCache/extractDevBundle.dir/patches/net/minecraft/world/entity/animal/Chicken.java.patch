--- a/net/minecraft/world/entity/animal/Chicken.java
+++ b/net/minecraft/world/entity/animal/Chicken.java
@@ -28,12 +28,14 @@
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.crafting.Ingredient;
+import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.pathfinder.BlockPathTypes;
 import net.minecraft.world.phys.Vec3;
 
 public class Chicken extends Animal {
+
     private static final Ingredient FOOD_ITEMS = Ingredient.of(Items.WHEAT_SEEDS, Items.MELON_SEEDS, Items.PUMPKIN_SEEDS, Items.BEETROOT_SEEDS);
     public float flap;
     public float flapSpeed;
@@ -41,25 +43,28 @@
     public float oFlap;
     public float flapping = 1.0F;
     private float nextFlap = 1.0F;
-    public int eggTime = this.random.nextInt(6000) + 6000;
+    public int eggTime;
     public boolean isChickenJockey;
 
     public Chicken(EntityType<? extends Chicken> type, Level world) {
         super(type, world);
+        this.eggTime = this.random.nextInt(6000) + 6000;
         this.setPathfindingMalus(BlockPathTypes.WATER, 0.0F);
     }
 
+    @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new FloatGoal(this));
         this.goalSelector.addGoal(1, new PanicGoal(this, 1.4D));
         this.goalSelector.addGoal(2, new BreedGoal(this, 1.0D));
-        this.goalSelector.addGoal(3, new TemptGoal(this, 1.0D, FOOD_ITEMS, false));
+        this.goalSelector.addGoal(3, new TemptGoal(this, 1.0D, Chicken.FOOD_ITEMS, false));
         this.goalSelector.addGoal(4, new FollowParentGoal(this, 1.1D));
         this.goalSelector.addGoal(5, new WaterAvoidingRandomStrollGoal(this, 1.0D));
         this.goalSelector.addGoal(6, new LookAtPlayerGoal(this, Player.class, 6.0F));
         this.goalSelector.addGoal(7, new RandomLookAroundGoal(this));
     }
 
+    @Override
     protected float getStandingEyeHeight(Pose pose, EntityDimensions dimensions) {
         return this.isBaby() ? dimensions.height * 0.85F : dimensions.height * 0.92F;
     }
@@ -68,71 +73,91 @@
         return Mob.createMobAttributes().add(Attributes.MAX_HEALTH, 4.0D).add(Attributes.MOVEMENT_SPEED, 0.25D);
     }
 
+    @Override
     public void aiStep() {
+        // CraftBukkit start
+        if (this.isChickenJockey()) {
+            this.setPersistenceRequired(!this.removeWhenFarAway(0));
+        }
+        // CraftBukkit end
         super.aiStep();
         this.oFlap = this.flap;
         this.oFlapSpeed = this.flapSpeed;
-        this.flapSpeed = (float)((double)this.flapSpeed + (double)(this.onGround ? -1 : 4) * 0.3D);
+        this.flapSpeed = (float) ((double) this.flapSpeed + (double) (this.onGround ? -1 : 4) * 0.3D);
         this.flapSpeed = Mth.clamp(this.flapSpeed, 0.0F, 1.0F);
         if (!this.onGround && this.flapping < 1.0F) {
             this.flapping = 1.0F;
         }
 
-        this.flapping = (float)((double)this.flapping * 0.9D);
-        Vec3 vec3 = this.getDeltaMovement();
-        if (!this.onGround && vec3.y < 0.0D) {
-            this.setDeltaMovement(vec3.multiply(1.0D, 0.6D, 1.0D));
+        this.flapping = (float) ((double) this.flapping * 0.9D);
+        Vec3 vec3d = this.getDeltaMovement();
+
+        if (!this.onGround && vec3d.y < 0.0D) {
+            this.setDeltaMovement(vec3d.multiply(1.0D, 0.6D, 1.0D));
         }
 
         this.flap += this.flapping * 2.0F;
         if (!this.level.isClientSide && this.isAlive() && !this.isBaby() && !this.isChickenJockey() && --this.eggTime <= 0) {
             this.playSound(SoundEvents.CHICKEN_EGG, 1.0F, (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
-            this.spawnAtLocation(Items.EGG);
+            this.forceDrops = true; // CraftBukkit
+            this.spawnAtLocation((ItemLike) Items.EGG);
+            this.forceDrops = false; // CraftBukkit
             this.eggTime = this.random.nextInt(6000) + 6000;
         }
 
     }
 
+    @Override
     protected boolean isFlapping() {
         return this.flyDist > this.nextFlap;
     }
 
+    @Override
     protected void onFlap() {
         this.nextFlap = this.flyDist + this.flapSpeed / 2.0F;
     }
 
+    @Override
     public boolean causeFallDamage(float fallDistance, float damageMultiplier, DamageSource damageSource) {
         return false;
     }
 
+    @Override
     protected SoundEvent getAmbientSound() {
         return SoundEvents.CHICKEN_AMBIENT;
     }
 
+    @Override
     protected SoundEvent getHurtSound(DamageSource source) {
         return SoundEvents.CHICKEN_HURT;
     }
 
+    @Override
     protected SoundEvent getDeathSound() {
         return SoundEvents.CHICKEN_DEATH;
     }
 
+    @Override
     protected void playStepSound(BlockPos pos, BlockState state) {
         this.playSound(SoundEvents.CHICKEN_STEP, 0.15F, 1.0F);
     }
 
-    public Chicken getBreedOffspring(ServerLevel serverLevel, AgeableMob ageableMob) {
-        return EntityType.CHICKEN.create(serverLevel);
+    @Override
+    public Chicken getBreedOffspring(ServerLevel world, AgeableMob entity) {
+        return (Chicken) EntityType.CHICKEN.create((Level) world);
     }
 
+    @Override
     public boolean isFood(ItemStack stack) {
-        return FOOD_ITEMS.test(stack);
+        return Chicken.FOOD_ITEMS.test(stack);
     }
 
+    @Override
     protected int getExperienceReward(Player player) {
         return this.isChickenJockey() ? 10 : super.getExperienceReward(player);
     }
 
+    @Override
     public void readAdditionalSaveData(CompoundTag nbt) {
         super.readAdditionalSaveData(nbt);
         this.isChickenJockey = nbt.getBoolean("IsChickenJockey");
@@ -142,25 +167,29 @@
 
     }
 
+    @Override
     public void addAdditionalSaveData(CompoundTag nbt) {
         super.addAdditionalSaveData(nbt);
         nbt.putBoolean("IsChickenJockey", this.isChickenJockey);
         nbt.putInt("EggLayTime", this.eggTime);
     }
 
+    @Override
     public boolean removeWhenFarAway(double distanceSquared) {
         return this.isChickenJockey();
     }
 
+    @Override
     public void positionRider(Entity passenger) {
         super.positionRider(passenger);
-        float f = Mth.sin(this.yBodyRot * ((float)Math.PI / 180F));
-        float g = Mth.cos(this.yBodyRot * ((float)Math.PI / 180F));
-        float h = 0.1F;
-        float i = 0.0F;
-        passenger.setPos(this.getX() + (double)(0.1F * f), this.getY(0.5D) + passenger.getMyRidingOffset() + 0.0D, this.getZ() - (double)(0.1F * g));
+        float f = Mth.sin(this.yBodyRot * 0.017453292F);
+        float f1 = Mth.cos(this.yBodyRot * 0.017453292F);
+        float f2 = 0.1F;
+        float f3 = 0.0F;
+
+        passenger.setPos(this.getX() + (double) (0.1F * f), this.getY(0.5D) + passenger.getMyRidingOffset() + 0.0D, this.getZ() - (double) (0.1F * f1));
         if (passenger instanceof LivingEntity) {
-            ((LivingEntity)passenger).yBodyRot = this.yBodyRot;
+            ((LivingEntity) passenger).yBodyRot = this.yBodyRot;
         }
 
     }
