--- a/net/minecraft/core/Direction.java
+++ b/net/minecraft/core/Direction.java
@@ -62,6 +62,11 @@
     }, (direction1, direction2) -> {
         throw new IllegalArgumentException("Duplicate keys");
     }, Long2ObjectOpenHashMap::new));
+    // Paper start
+    private final int adjX;
+    private final int adjY;
+    private final int adjZ;
+    // Paper end
 
     private Direction(int id, int idOpposite, int idHorizontal, String name, Direction.AxisDirection direction, Direction.Axis axis, Vec3i vector) {
         this.data3d = id;
@@ -71,6 +76,11 @@
         this.axis = axis;
         this.axisDirection = direction;
         this.normal = vector;
+        // Paper start
+        this.adjX = vector.getX();
+        this.adjY = vector.getY();
+        this.adjZ = vector.getZ();
+        // Paper end
     }
 
     public static Direction[] orderedByNearest(Entity entity) {
@@ -310,15 +320,15 @@
     }
 
     public int getStepX() {
-        return this.normal.getX();
+        return this.adjX; // Paper
     }
 
     public int getStepY() {
-        return this.normal.getY();
+        return this.adjY; // Paper
     }
 
     public int getStepZ() {
-        return this.normal.getZ();
+        return this.adjZ; // Paper
     }
 
     public Vector3f step() {
@@ -399,10 +409,12 @@
         return direction;
     }
 
+    @Override
     public String toString() {
         return this.name;
     }
 
+    @Override
     public String getSerializedName() {
         return this.name;
     }
@@ -430,28 +442,34 @@
 
     public static enum Axis implements StringRepresentable, Predicate<Direction> {
         X("x") {
+            @Override
             public int choose(int x, int y, int z) {
                 return x;
             }
 
+            @Override
             public double choose(double x, double y, double z) {
                 return x;
             }
         },
         Y("y") {
+            @Override
             public int choose(int x, int y, int z) {
                 return y;
             }
 
+            @Override
             public double choose(double x, double y, double z) {
                 return y;
             }
         },
         Z("z") {
+            @Override
             public int choose(int x, int y, int z) {
                 return z;
             }
 
+            @Override
             public double choose(double x, double y, double z) {
                 return z;
             }
@@ -485,6 +503,7 @@
             return this == X || this == Z;
         }
 
+        @Override
         public String toString() {
             return this.name;
         }
@@ -493,6 +512,7 @@
             return Util.getRandom(VALUES, random);
         }
 
+        @Override
         public boolean test(@Nullable Direction direction) {
             return direction != null && direction.getAxis() == this;
         }
@@ -509,6 +529,7 @@
             }
         }
 
+        @Override
         public String getSerializedName() {
             return this.name;
         }
@@ -538,6 +559,7 @@
             return this.name;
         }
 
+        @Override
         public String toString() {
             return this.name;
         }
@@ -567,10 +589,12 @@
             return Util.getRandom(this.axis, random);
         }
 
+        @Override
         public boolean test(@Nullable Direction direction) {
             return direction != null && direction.getAxis().getPlane() == this;
         }
 
+        @Override
         public Iterator<Direction> iterator() {
             return Iterators.forArray(this.faces);
         }
