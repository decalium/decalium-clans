--- a/net/minecraft/world/level/block/MultifaceBlock.java
+++ b/net/minecraft/world/level/block/MultifaceBlock.java
@@ -6,6 +6,7 @@
 import com.mojang.datafixers.util.Pair;
 import java.util.Arrays;
 import java.util.Collections;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
@@ -28,12 +29,14 @@
 import net.minecraft.world.level.block.state.StateDefinition;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.BooleanProperty;
+import net.minecraft.world.level.material.Fluid;
 import net.minecraft.world.level.material.Fluids;
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class MultifaceBlock extends Block {
+
     private static final float AABB_OFFSET = 1.0F;
     private static final VoxelShape UP_AABB = Block.box(0.0D, 15.0D, 0.0D, 16.0D, 16.0D, 16.0D);
     private static final VoxelShape DOWN_AABB = Block.box(0.0D, 0.0D, 0.0D, 16.0D, 1.0D, 16.0D);
@@ -42,13 +45,13 @@
     private static final VoxelShape NORTH_AABB = Block.box(0.0D, 0.0D, 0.0D, 16.0D, 16.0D, 1.0D);
     private static final VoxelShape SOUTH_AABB = Block.box(0.0D, 0.0D, 15.0D, 16.0D, 16.0D, 16.0D);
     private static final Map<Direction, BooleanProperty> PROPERTY_BY_DIRECTION = PipeBlock.PROPERTY_BY_DIRECTION;
-    private static final Map<Direction, VoxelShape> SHAPE_BY_DIRECTION = Util.make(Maps.newEnumMap(Direction.class), (shapes) -> {
-        shapes.put(Direction.NORTH, NORTH_AABB);
-        shapes.put(Direction.EAST, EAST_AABB);
-        shapes.put(Direction.SOUTH, SOUTH_AABB);
-        shapes.put(Direction.WEST, WEST_AABB);
-        shapes.put(Direction.UP, UP_AABB);
-        shapes.put(Direction.DOWN, DOWN_AABB);
+    private static final Map<Direction, VoxelShape> SHAPE_BY_DIRECTION = (Map) Util.make(Maps.newEnumMap(Direction.class), (enummap) -> { // CraftBukkit - decompile error
+        enummap.put(Direction.NORTH, MultifaceBlock.NORTH_AABB);
+        enummap.put(Direction.EAST, MultifaceBlock.EAST_AABB);
+        enummap.put(Direction.SOUTH, MultifaceBlock.SOUTH_AABB);
+        enummap.put(Direction.WEST, MultifaceBlock.WEST_AABB);
+        enummap.put(Direction.UP, MultifaceBlock.UP_AABB);
+        enummap.put(Direction.DOWN, MultifaceBlock.DOWN_AABB);
     });
     protected static final Direction[] DIRECTIONS = Direction.values();
     private final ImmutableMap<BlockState, VoxelShape> shapesCache;
@@ -58,7 +61,7 @@
 
     public MultifaceBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState(getDefaultMultifaceState(this.stateDefinition));
+        this.registerDefaultState(MultifaceBlock.getDefaultMultifaceState(this.stateDefinition));
         this.shapesCache = this.getShapeForEachState(MultifaceBlock::calculateMultifaceShape);
         this.canRotate = Direction.Plane.HORIZONTAL.stream().allMatch(this::isFaceSupported);
         this.canMirrorX = Direction.Plane.HORIZONTAL.stream().filter(Direction.Axis.X).filter(this::isFaceSupported).count() % 2L == 0L;
@@ -69,151 +72,186 @@
         return true;
     }
 
+    @Override
     protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
-        for(Direction direction : DIRECTIONS) {
-            if (this.isFaceSupported(direction)) {
-                builder.add(getFaceProperty(direction));
+        Direction[] aenumdirection = MultifaceBlock.DIRECTIONS;
+        int i = aenumdirection.length;
+
+        for (int j = 0; j < i; ++j) {
+            Direction enumdirection = aenumdirection[j];
+
+            if (this.isFaceSupported(enumdirection)) {
+                builder.add(MultifaceBlock.getFaceProperty(enumdirection));
             }
         }
 
     }
 
+    @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (!hasAnyFace(state)) {
-            return Blocks.AIR.defaultBlockState();
-        } else {
-            return hasFace(state, direction) && !canAttachTo(world, direction, neighborPos, neighborState) ? removeFace(state, getFaceProperty(direction)) : state;
-        }
+        return !MultifaceBlock.hasAnyFace(state) ? Blocks.AIR.defaultBlockState() : (MultifaceBlock.hasFace(state, direction) && !MultifaceBlock.canAttachTo((BlockGetter) world, direction, neighborPos, neighborState) ? MultifaceBlock.removeFace(state, MultifaceBlock.getFaceProperty(direction)) : state);
     }
 
+    @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return this.shapesCache.get(state);
+        return (VoxelShape) this.shapesCache.get(state);
     }
 
+    @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
-        boolean bl = false;
+        boolean flag = false;
+        Direction[] aenumdirection = MultifaceBlock.DIRECTIONS;
+        int i = aenumdirection.length;
 
-        for(Direction direction : DIRECTIONS) {
-            if (hasFace(state, direction)) {
-                BlockPos blockPos = pos.relative(direction);
-                if (!canAttachTo(world, direction, blockPos, world.getBlockState(blockPos))) {
+        for (int j = 0; j < i; ++j) {
+            Direction enumdirection = aenumdirection[j];
+
+            if (MultifaceBlock.hasFace(state, enumdirection)) {
+                BlockPos blockposition1 = pos.relative(enumdirection);
+
+                if (!MultifaceBlock.canAttachTo((BlockGetter) world, enumdirection, blockposition1, world.getBlockState(blockposition1))) {
                     return false;
                 }
 
-                bl = true;
+                flag = true;
             }
         }
 
-        return bl;
+        return flag;
     }
 
+    @Override
     public boolean canBeReplaced(BlockState state, BlockPlaceContext context) {
-        return hasAnyVacantFace(state);
+        return MultifaceBlock.hasAnyVacantFace(state);
     }
 
     @Nullable
+    @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
-        Level level = ctx.getLevel();
-        BlockPos blockPos = ctx.getClickedPos();
-        BlockState blockState = level.getBlockState(blockPos);
-        return Arrays.stream(ctx.getNearestLookingDirections()).map((direction) -> {
-            return this.getStateForPlacement(blockState, level, blockPos, direction);
-        }).filter(Objects::nonNull).findFirst().orElse((BlockState)null);
+        Level world = ctx.getLevel();
+        BlockPos blockposition = ctx.getClickedPos();
+        BlockState iblockdata = world.getBlockState(blockposition);
+
+        return (BlockState) Arrays.stream(ctx.getNearestLookingDirections()).map((enumdirection) -> {
+            return this.getStateForPlacement(iblockdata, (BlockGetter) world, blockposition, enumdirection);
+        }).filter(Objects::nonNull).findFirst().orElse(null); // CraftBukkit - decompile error
     }
 
     @Nullable
-    public BlockState getStateForPlacement(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        if (!this.isFaceSupported(direction)) {
+    public BlockState getStateForPlacement(BlockState iblockdata, BlockGetter iblockaccess, BlockPos blockposition, Direction enumdirection) {
+        if (!this.isFaceSupported(enumdirection)) {
             return null;
         } else {
-            BlockState blockState;
-            if (state.is(this)) {
-                if (hasFace(state, direction)) {
+            BlockState iblockdata1;
+
+            if (iblockdata.is((Block) this)) {
+                if (MultifaceBlock.hasFace(iblockdata, enumdirection)) {
                     return null;
                 }
 
-                blockState = state;
-            } else if (this.isWaterloggable() && state.getFluidState().isSourceOfType(Fluids.WATER)) {
-                blockState = this.defaultBlockState().setValue(BlockStateProperties.WATERLOGGED, Boolean.valueOf(true));
+                iblockdata1 = iblockdata;
+            } else if (this.isWaterloggable() && iblockdata.getFluidState().isSourceOfType((Fluid) Fluids.WATER)) {
+                iblockdata1 = (BlockState) this.defaultBlockState().setValue(BlockStateProperties.WATERLOGGED, true);
             } else {
-                blockState = this.defaultBlockState();
+                iblockdata1 = this.defaultBlockState();
             }
 
-            BlockPos blockPos = pos.relative(direction);
-            return canAttachTo(world, direction, blockPos, world.getBlockState(blockPos)) ? blockState.setValue(getFaceProperty(direction), Boolean.valueOf(true)) : null;
+            BlockPos blockposition1 = blockposition.relative(enumdirection);
+
+            return MultifaceBlock.canAttachTo(iblockaccess, enumdirection, blockposition1, iblockaccess.getBlockState(blockposition1)) ? (BlockState) iblockdata1.setValue(MultifaceBlock.getFaceProperty(enumdirection), true) : null;
         }
     }
 
+    @Override
     public BlockState rotate(BlockState state, Rotation rotation) {
-        return !this.canRotate ? state : this.mapDirections(state, rotation::rotate);
+        if (!this.canRotate) {
+            return state;
+        } else {
+            Objects.requireNonNull(rotation);
+            return this.mapDirections(state, rotation::rotate);
+        }
     }
 
+    @Override
     public BlockState mirror(BlockState state, Mirror mirror) {
         if (mirror == Mirror.FRONT_BACK && !this.canMirrorX) {
             return state;
+        } else if (mirror == Mirror.LEFT_RIGHT && !this.canMirrorZ) {
+            return state;
         } else {
-            return mirror == Mirror.LEFT_RIGHT && !this.canMirrorZ ? state : this.mapDirections(state, mirror::mirror);
+            Objects.requireNonNull(mirror);
+            return this.mapDirections(state, mirror::mirror);
         }
     }
 
     private BlockState mapDirections(BlockState state, Function<Direction, Direction> mirror) {
-        BlockState blockState = state;
+        BlockState iblockdata1 = state;
+        Direction[] aenumdirection = MultifaceBlock.DIRECTIONS;
+        int i = aenumdirection.length;
 
-        for(Direction direction : DIRECTIONS) {
-            if (this.isFaceSupported(direction)) {
-                blockState = blockState.setValue(getFaceProperty(mirror.apply(direction)), state.getValue(getFaceProperty(direction)));
+        for (int j = 0; j < i; ++j) {
+            Direction enumdirection = aenumdirection[j];
+
+            if (this.isFaceSupported(enumdirection)) {
+                iblockdata1 = (BlockState) iblockdata1.setValue(MultifaceBlock.getFaceProperty((Direction) mirror.apply(enumdirection)), (Boolean) state.getValue(MultifaceBlock.getFaceProperty(enumdirection)));
             }
         }
 
-        return blockState;
+        return iblockdata1;
     }
 
     public boolean spreadFromRandomFaceTowardRandomDirection(BlockState state, ServerLevel world, BlockPos pos, Random random) {
-        List<Direction> list = Lists.newArrayList(DIRECTIONS);
+        List<Direction> list = Lists.newArrayList(MultifaceBlock.DIRECTIONS);
+
         Collections.shuffle(list);
-        return list.stream().filter((from) -> {
-            return hasFace(state, from);
-        }).anyMatch((to) -> {
-            return this.spreadFromFaceTowardRandomDirection(state, world, pos, to, random, false);
+        return list.stream().filter((enumdirection) -> {
+            return MultifaceBlock.hasFace(state, enumdirection);
+        }).anyMatch((enumdirection) -> {
+            return this.spreadFromFaceTowardRandomDirection(state, world, pos, enumdirection, random, false);
         });
     }
 
     public boolean spreadFromFaceTowardRandomDirection(BlockState state, LevelAccessor world, BlockPos pos, Direction from, Random random, boolean postProcess) {
-        List<Direction> list = Arrays.asList(DIRECTIONS);
+        List<Direction> list = Arrays.asList(MultifaceBlock.DIRECTIONS);
+
         Collections.shuffle(list, random);
-        return list.stream().anyMatch((direction2) -> {
-            return this.spreadFromFaceTowardDirection(state, world, pos, from, direction2, postProcess);
+        return list.stream().anyMatch((enumdirection1) -> {
+            return this.spreadFromFaceTowardDirection(state, world, pos, from, enumdirection1, postProcess);
         });
     }
 
     public boolean spreadFromFaceTowardDirection(BlockState state, LevelAccessor world, BlockPos pos, Direction from, Direction to, boolean postProcess) {
-        Optional<Pair<BlockPos, Direction>> optional = this.getSpreadFromFaceTowardDirection(state, world, pos, from, to);
+        Optional<Pair<BlockPos, Direction>> optional = this.getSpreadFromFaceTowardDirection(state, (BlockGetter) world, pos, from, to);
+
         if (optional.isPresent()) {
-            Pair<BlockPos, Direction> pair = optional.get();
-            return this.spreadToFace(world, pair.getFirst(), pair.getSecond(), postProcess);
+            Pair<BlockPos, Direction> pair = (Pair) optional.get();
+
+            return this.a(world, (BlockPos) pair.getFirst(), (Direction) pair.getSecond(), postProcess, pos); // CraftBukkit
         } else {
             return false;
         }
     }
 
     protected boolean canSpread(BlockState state, BlockGetter world, BlockPos pos, Direction from) {
-        return Stream.of(DIRECTIONS).anyMatch((to) -> {
-            return this.getSpreadFromFaceTowardDirection(state, world, pos, from, to).isPresent();
+        return Stream.of(MultifaceBlock.DIRECTIONS).anyMatch((enumdirection1) -> {
+            return this.getSpreadFromFaceTowardDirection(state, world, pos, from, enumdirection1).isPresent();
         });
     }
 
     private Optional<Pair<BlockPos, Direction>> getSpreadFromFaceTowardDirection(BlockState state, BlockGetter world, BlockPos pos, Direction from, Direction to) {
-        if (to.getAxis() != from.getAxis() && hasFace(state, from) && !hasFace(state, to)) {
+        if (to.getAxis() != from.getAxis() && MultifaceBlock.hasFace(state, from) && !MultifaceBlock.hasFace(state, to)) {
             if (this.canSpreadToFace(world, pos, to)) {
                 return Optional.of(Pair.of(pos, to));
             } else {
-                BlockPos blockPos = pos.relative(to);
-                if (this.canSpreadToFace(world, blockPos, from)) {
-                    return Optional.of(Pair.of(blockPos, from));
+                BlockPos blockposition1 = pos.relative(to);
+
+                if (this.canSpreadToFace(world, blockposition1, from)) {
+                    return Optional.of(Pair.of(blockposition1, from));
                 } else {
-                    BlockPos blockPos2 = blockPos.relative(from);
-                    Direction direction = to.getOpposite();
-                    return this.canSpreadToFace(world, blockPos2, direction) ? Optional.of(Pair.of(blockPos2, direction)) : Optional.empty();
+                    BlockPos blockposition2 = blockposition1.relative(from);
+                    Direction enumdirection2 = to.getOpposite();
+
+                    return this.canSpreadToFace(world, blockposition2, enumdirection2) ? Optional.of(Pair.of(blockposition2, enumdirection2)) : Optional.empty();
                 }
             }
         } else {
@@ -222,36 +260,40 @@
     }
 
     private boolean canSpreadToFace(BlockGetter world, BlockPos pos, Direction direction) {
-        BlockState blockState = world.getBlockState(pos);
-        if (!this.canSpreadInto(blockState)) {
+        BlockState iblockdata = world.getBlockState(pos);
+
+        if (!this.canSpreadInto(iblockdata)) {
             return false;
         } else {
-            BlockState blockState2 = this.getStateForPlacement(blockState, world, pos, direction);
-            return blockState2 != null;
+            BlockState iblockdata1 = this.getStateForPlacement(iblockdata, world, pos, direction);
+
+            return iblockdata1 != null;
         }
     }
 
-    private boolean spreadToFace(LevelAccessor world, BlockPos pos, Direction direction, boolean postProcess) {
-        BlockState blockState = world.getBlockState(pos);
-        BlockState blockState2 = this.getStateForPlacement(blockState, world, pos, direction);
-        if (blockState2 != null) {
-            if (postProcess) {
-                world.getChunk(pos).markPosForPostprocessing(pos);
+    private boolean a(LevelAccessor generatoraccess, BlockPos blockposition, Direction enumdirection, boolean flag, BlockPos source) { // CraftBukkit
+        BlockState iblockdata = generatoraccess.getBlockState(blockposition);
+        BlockState iblockdata1 = this.getStateForPlacement(iblockdata, (BlockGetter) generatoraccess, blockposition, enumdirection);
+
+        if (iblockdata1 != null) {
+            if (flag) {
+                generatoraccess.getChunk(blockposition).markPosForPostprocessing(blockposition);
             }
 
-            return world.setBlock(pos, blockState2, 2);
+            return org.bukkit.craftbukkit.v1_17_R1.event.CraftEventFactory.handleBlockSpreadEvent(generatoraccess, source, blockposition, iblockdata1, 2); // CraftBukkit
         } else {
             return false;
         }
     }
 
     private boolean canSpreadInto(BlockState state) {
-        return state.isAir() || state.is(this) || state.is(Blocks.WATER) && state.getFluidState().isSource();
+        return state.isAir() || state.is((Block) this) || state.is(Blocks.WATER) && state.getFluidState().isSource();
     }
 
     private static boolean hasFace(BlockState state, Direction direction) {
-        BooleanProperty booleanProperty = getFaceProperty(direction);
-        return state.hasProperty(booleanProperty) && state.getValue(booleanProperty);
+        BooleanProperty blockstateboolean = MultifaceBlock.getFaceProperty(direction);
+
+        return state.hasProperty(blockstateboolean) && (Boolean) state.getValue(blockstateboolean);
     }
 
     private static boolean canAttachTo(BlockGetter world, Direction direction, BlockPos pos, BlockState state) {
@@ -263,47 +305,55 @@
     }
 
     private static BlockState removeFace(BlockState state, BooleanProperty direction) {
-        BlockState blockState = state.setValue(direction, Boolean.valueOf(false));
-        return hasAnyFace(blockState) ? blockState : Blocks.AIR.defaultBlockState();
+        BlockState iblockdata1 = (BlockState) state.setValue(direction, false);
+
+        return MultifaceBlock.hasAnyFace(iblockdata1) ? iblockdata1 : Blocks.AIR.defaultBlockState();
     }
 
     public static BooleanProperty getFaceProperty(Direction direction) {
-        return PROPERTY_BY_DIRECTION.get(direction);
+        return (BooleanProperty) MultifaceBlock.PROPERTY_BY_DIRECTION.get(direction);
     }
 
     private static BlockState getDefaultMultifaceState(StateDefinition<Block, BlockState> stateManager) {
-        BlockState blockState = stateManager.any();
+        BlockState iblockdata = (BlockState) stateManager.any();
+        Iterator iterator = MultifaceBlock.PROPERTY_BY_DIRECTION.values().iterator();
 
-        for(BooleanProperty booleanProperty : PROPERTY_BY_DIRECTION.values()) {
-            if (blockState.hasProperty(booleanProperty)) {
-                blockState = blockState.setValue(booleanProperty, Boolean.valueOf(false));
+        while (iterator.hasNext()) {
+            BooleanProperty blockstateboolean = (BooleanProperty) iterator.next();
+
+            if (iblockdata.hasProperty(blockstateboolean)) {
+                iblockdata = (BlockState) iblockdata.setValue(blockstateboolean, false);
             }
         }
 
-        return blockState;
+        return iblockdata;
     }
 
     private static VoxelShape calculateMultifaceShape(BlockState state) {
-        VoxelShape voxelShape = Shapes.empty();
+        VoxelShape voxelshape = Shapes.empty();
+        Direction[] aenumdirection = MultifaceBlock.DIRECTIONS;
+        int i = aenumdirection.length;
 
-        for(Direction direction : DIRECTIONS) {
-            if (hasFace(state, direction)) {
-                voxelShape = Shapes.or(voxelShape, SHAPE_BY_DIRECTION.get(direction));
+        for (int j = 0; j < i; ++j) {
+            Direction enumdirection = aenumdirection[j];
+
+            if (MultifaceBlock.hasFace(state, enumdirection)) {
+                voxelshape = Shapes.or(voxelshape, (VoxelShape) MultifaceBlock.SHAPE_BY_DIRECTION.get(enumdirection));
             }
         }
 
-        return voxelShape.isEmpty() ? Shapes.block() : voxelShape;
+        return voxelshape.isEmpty() ? Shapes.block() : voxelshape;
     }
 
     protected static boolean hasAnyFace(BlockState state) {
-        return Arrays.stream(DIRECTIONS).anyMatch((direction) -> {
-            return hasFace(state, direction);
+        return Arrays.stream(MultifaceBlock.DIRECTIONS).anyMatch((enumdirection) -> {
+            return MultifaceBlock.hasFace(state, enumdirection);
         });
     }
 
     private static boolean hasAnyVacantFace(BlockState state) {
-        return Arrays.stream(DIRECTIONS).anyMatch((direction) -> {
-            return !hasFace(state, direction);
+        return Arrays.stream(MultifaceBlock.DIRECTIONS).anyMatch((enumdirection) -> {
+            return !MultifaceBlock.hasFace(state, enumdirection);
         });
     }
 }
