--- a/net/minecraft/nbt/NbtUtils.java
+++ b/net/minecraft/nbt/NbtUtils.java
@@ -40,14 +40,14 @@
 import org.apache.logging.log4j.Logger;
 
 public final class NbtUtils {
-    private static final Comparator<ListTag> YXZ_LISTTAG_INT_COMPARATOR = Comparator.comparingInt((listTag) -> {
+    private static final Comparator<ListTag> YXZ_LISTTAG_INT_COMPARATOR = Comparator.<ListTag>comparingInt((listTag) -> { // Paper - decompile fix
         return listTag.getInt(1);
     }).thenComparingInt((listTag) -> {
         return listTag.getInt(0);
     }).thenComparingInt((listTag) -> {
         return listTag.getInt(2);
     });
-    private static final Comparator<ListTag> YXZ_LISTTAG_DOUBLE_COMPARATOR = Comparator.comparingDouble((listTag) -> {
+    private static final Comparator<ListTag> YXZ_LISTTAG_DOUBLE_COMPARATOR = Comparator.<ListTag>comparingDouble((listTag) -> { // Paper - decompile fix
         return listTag.getDouble(1);
     }).thenComparingDouble((listTag) -> {
         return listTag.getDouble(0);
@@ -76,6 +76,11 @@
             string = compound.getString("Name");
         }
 
+        // Paper start - support string UUID's
+        if (compound.contains("Id", 8)) {
+            uUID = UUID.fromString(compound.getString("Id"));
+        }
+        // Paper end
         if (compound.hasUUID("Id")) {
             uUID = compound.getUUID("Id");
         }
@@ -88,7 +93,8 @@
                 for(String string2 : compoundTag.getAllKeys()) {
                     ListTag listTag = compoundTag.getList(string2, 10);
 
-                    for(int i = 0; i < listTag.size(); ++i) {
+                    if (listTag.size() == 0) continue; // Paper - remove duplicate properties
+                    for (int i = listTag.size() - 1; i < listTag.size(); ++i) { // Paper - remove duplicate properties
                         CompoundTag compoundTag2 = listTag.getCompound(i);
                         String string3 = compoundTag2.getString("Value");
                         if (compoundTag2.contains("Signature", 8)) {
@@ -495,7 +501,7 @@
     }
 
     public static CompoundTag update(DataFixer fixer, DataFixTypes fixTypes, CompoundTag compound, int oldVersion, int targetVersion) {
-        return fixer.update(fixTypes.getType(), new Dynamic<>(NbtOps.INSTANCE, compound), oldVersion, targetVersion).getValue();
+        return (CompoundTag) fixer.update(fixTypes.getType(), new com.mojang.serialization.Dynamic<>(NbtOps.INSTANCE, compound), oldVersion, targetVersion).getValue(); // Paper - decompile fix
     }
 
     public static Component toPrettyComponent(Tag element) {
@@ -620,8 +626,8 @@
             CompoundTag compoundTag2 = new CompoundTag();
             if (i + 2 <= string.length()) {
                 String string3 = string.substring(i + 1, string.indexOf(125, i));
-                COMMA_SPLITTER.split(string3).forEach((string2) -> {
-                    List<String> list = COLON_SPLITTER.splitToList(string2);
+                COMMA_SPLITTER.split(string3).forEach(it -> { // Paper - decompile fix
+                    List<String> list = COLON_SPLITTER.splitToList(it); // Paper - decompile fix
                     if (list.size() == 2) {
                         compoundTag2.putString(list.get(0), list.get(1));
                     } else {
