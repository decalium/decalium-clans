--- a/net/minecraft/world/entity/Mob.java
+++ b/net/minecraft/world/entity/Mob.java
@@ -2,6 +2,8 @@
 
 import com.google.common.collect.Maps;
 import java.util.Arrays;
+import java.util.Iterator;
+import java.util.List;
 import java.util.Map;
 import java.util.Optional;
 import java.util.Random;
@@ -20,6 +22,7 @@
 import net.minecraft.network.syncher.SynchedEntityData;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.tags.Tag;
 import net.minecraft.util.Mth;
@@ -59,7 +62,9 @@
 import net.minecraft.world.item.SpawnEggItem;
 import net.minecraft.world.item.SwordItem;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
+import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.GameRules;
+import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.LevelReader;
@@ -67,8 +72,19 @@
 import net.minecraft.world.level.material.Fluid;
 import net.minecraft.world.level.pathfinder.BlockPathTypes;
 import net.minecraft.world.level.storage.loot.LootContext;
+import org.bukkit.craftbukkit.v1_17_R1.event.CraftEventFactory;
+import org.bukkit.craftbukkit.v1_17_R1.entity.CraftLivingEntity;
+import org.bukkit.event.entity.CreatureSpawnEvent;
+import org.bukkit.event.entity.EntityCombustByEntityEvent;
+import org.bukkit.event.entity.EntityTargetLivingEntityEvent;
+import org.bukkit.event.entity.EntityTargetEvent;
+import org.bukkit.event.entity.EntityTransformEvent;
+import org.bukkit.event.entity.EntityUnleashEvent;
+import org.bukkit.event.entity.EntityUnleashEvent.UnleashReason;
+// CraftBukkit end
 
 public abstract class Mob extends LivingEntity {
+
     private static final EntityDataAccessor<Byte> DATA_MOB_FLAGS_ID = SynchedEntityData.defineId(Mob.class, EntityDataSerializers.BYTE);
     private static final int MOB_FLAG_NO_AI = 1;
     private static final int MOB_FLAG_LEFTHANDED = 2;
@@ -87,29 +103,39 @@
     protected JumpControl jumpControl;
     private final BodyRotationControl bodyRotationControl;
     protected PathNavigation navigation;
-    protected final GoalSelector goalSelector;
-    protected final GoalSelector targetSelector;
+    public GoalSelector goalSelector;
+    @Nullable public net.minecraft.world.entity.ai.goal.FloatGoal goalFloat; // Paper
+    public GoalSelector targetSelector;
     private LivingEntity target;
     private final Sensing sensing;
-    private final NonNullList<ItemStack> handItems = NonNullList.withSize(2, ItemStack.EMPTY);
-    protected final float[] handDropChances = new float[2];
-    private final NonNullList<ItemStack> armorItems = NonNullList.withSize(4, ItemStack.EMPTY);
-    protected final float[] armorDropChances = new float[4];
+    private final NonNullList<ItemStack> handItems;
+    public final float[] handDropChances;
+    private final NonNullList<ItemStack> armorItems;
+    public final float[] armorDropChances;
     private boolean canPickUpLoot;
     private boolean persistenceRequired;
-    private final Map<BlockPathTypes, Float> pathfindingMalus = Maps.newEnumMap(BlockPathTypes.class);
-    private ResourceLocation lootTable;
-    private long lootTableSeed;
+    private final Map<BlockPathTypes, Float> pathfindingMalus;
+    public ResourceLocation lootTable;
+    public long lootTableSeed;
     @Nullable
-    private Entity leashHolder;
+    public Entity leashHolder;
     private int delayedLeashHolderId;
     @Nullable
     private CompoundTag leashInfoTag;
-    private BlockPos restrictCenter = BlockPos.ZERO;
-    private float restrictRadius = -1.0F;
+    private BlockPos restrictCenter;
+    private float restrictRadius;
+
+    public boolean aware = true; // CraftBukkit
 
     protected Mob(EntityType<? extends Mob> type, Level world) {
         super(type, world);
+        this.handItems = NonNullList.withSize(2, ItemStack.EMPTY);
+        this.handDropChances = new float[2];
+        this.armorItems = NonNullList.withSize(4, ItemStack.EMPTY);
+        this.armorDropChances = new float[4];
+        this.pathfindingMalus = Maps.newEnumMap(BlockPathTypes.class);
+        this.restrictCenter = BlockPos.ZERO;
+        this.restrictRadius = -1.0F;
         this.goalSelector = new GoalSelector(world.getProfilerSupplier());
         this.targetSelector = new GoalSelector(world.getProfilerSupplier());
         this.lookControl = new LookControl(this);
@@ -124,10 +150,16 @@
             this.registerGoals();
         }
 
+        // CraftBukkit start - default persistance to type's persistance value
+        this.persistenceRequired = !this.removeWhenFarAway(0);
     }
 
-    protected void registerGoals() {
+    public void setPersistenceRequired(boolean persistenceRequired) {
+        this.persistenceRequired = persistenceRequired;
     }
+    // CraftBukkit end
+
+    protected void registerGoals() {}
 
     public static AttributeSupplier.Builder createMobAttributes() {
         return LivingEntity.createLivingAttributes().add(Attributes.FOLLOW_RANGE, 16.0D).add(Attributes.ATTACK_KNOCKBACK);
@@ -142,15 +174,17 @@
     }
 
     public float getPathfindingMalus(BlockPathTypes nodeType) {
-        Mob mob;
-        if (this.getVehicle() instanceof Mob && ((Mob)this.getVehicle()).shouldPassengersInheritMalus()) {
-            mob = (Mob)this.getVehicle();
+        Mob entityinsentient;
+
+        if (this.getVehicle() instanceof Mob && ((Mob) this.getVehicle()).shouldPassengersInheritMalus()) {
+            entityinsentient = (Mob) this.getVehicle();
         } else {
-            mob = this;
+            entityinsentient = this;
         }
 
-        Float float_ = mob.pathfindingMalus.get(nodeType);
-        return float_ == null ? nodeType.getMalus() : float_;
+        Float ofloat = (Float) entityinsentient.pathfindingMalus.get(nodeType);
+
+        return ofloat == null ? nodeType.getMalus() : ofloat;
     }
 
     public void setPathfindingMalus(BlockPathTypes nodeType, float penalty) {
@@ -169,10 +203,24 @@
         return this.lookControl;
     }
 
+    // Paper start
+    @Override
+    public void inactiveTick() {
+        super.inactiveTick();
+        if (this.goalSelector.inactiveTick()) {
+            this.goalSelector.tick();
+        }
+        if (this.targetSelector.inactiveTick()) {
+            this.targetSelector.tick();
+        }
+    }
+    // Paper end
+
     public MoveControl getMoveControl() {
         if (this.isPassenger() && this.getVehicle() instanceof Mob) {
-            Mob mob = (Mob)this.getVehicle();
-            return mob.getMoveControl();
+            Mob entityinsentient = (Mob) this.getVehicle();
+
+            return entityinsentient.getMoveControl();
         } else {
             return this.moveControl;
         }
@@ -184,8 +232,9 @@
 
     public PathNavigation getNavigation() {
         if (this.isPassenger() && this.getVehicle() instanceof Mob) {
-            Mob mob = (Mob)this.getVehicle();
-            return mob.getNavigation();
+            Mob entityinsentient = (Mob) this.getVehicle();
+
+            return entityinsentient.getNavigation();
         } else {
             return this.navigation;
         }
@@ -200,10 +249,43 @@
         return this.target;
     }
 
+    public org.bukkit.craftbukkit.v1_17_R1.entity.CraftMob getBukkitMob() { return (org.bukkit.craftbukkit.v1_17_R1.entity.CraftMob) super.getBukkitEntity(); } // Paper
     public void setTarget(@Nullable LivingEntity target) {
-        this.target = target;
+        // CraftBukkit start - fire event
+        this.setGoalTarget(target, EntityTargetEvent.TargetReason.UNKNOWN, true);
+    }
+
+    public boolean setGoalTarget(LivingEntity entityliving, EntityTargetEvent.TargetReason reason, boolean fireEvent) {
+        if (this.getTarget() == entityliving) return false;
+        if (fireEvent) {
+            if (reason == EntityTargetEvent.TargetReason.UNKNOWN && this.getTarget() != null && entityliving == null) {
+                reason = this.getTarget().isAlive() ? EntityTargetEvent.TargetReason.FORGOT_TARGET : EntityTargetEvent.TargetReason.TARGET_DIED;
+            }
+            if (reason == EntityTargetEvent.TargetReason.UNKNOWN) {
+                level.getCraftServer().getLogger().log(java.util.logging.Level.WARNING, "Unknown target reason, please report on the issue tracker", new Exception());
+            }
+            CraftLivingEntity ctarget = null;
+            if (entityliving != null) {
+                ctarget = (CraftLivingEntity) entityliving.getBukkitEntity();
+            }
+            EntityTargetLivingEntityEvent event = new EntityTargetLivingEntityEvent(this.getBukkitEntity(), ctarget, reason);
+            level.getCraftServer().getPluginManager().callEvent(event);
+            if (event.isCancelled()) {
+                return false;
+            }
+
+            if (event.getTarget() != null) {
+                entityliving = ((CraftLivingEntity) event.getTarget()).getHandle();
+            } else {
+                entityliving = null;
+            }
+        }
+        this.target = entityliving;
+        return true;
+        // CraftBukkit end
     }
 
+    @Override
     public boolean canAttackType(EntityType<?> type) {
         return type != EntityType.GHAST;
     }
@@ -212,12 +294,12 @@
         return false;
     }
 
-    public void ate() {
-    }
+    public void ate() {}
 
+    @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(DATA_MOB_FLAGS_ID, (byte)0);
+        this.entityData.define(Mob.DATA_MOB_FLAGS_ID, (byte) 0);
     }
 
     public int getAmbientSoundInterval() {
@@ -225,13 +307,15 @@
     }
 
     public void playAmbientSound() {
-        SoundEvent soundEvent = this.getAmbientSound();
-        if (soundEvent != null) {
-            this.playSound(soundEvent, this.getSoundVolume(), this.getVoicePitch());
+        SoundEvent soundeffect = this.getAmbientSound();
+
+        if (soundeffect != null) {
+            this.playSound(soundeffect, this.getSoundVolume(), this.getVoicePitch());
         }
 
     }
 
+    @Override
     public void baseTick() {
         super.baseTick();
         this.level.getProfiler().push("mobBaseTick");
@@ -243,6 +327,7 @@
         this.level.getProfiler().pop();
     }
 
+    @Override
     protected void playHurtSound(DamageSource source) {
         this.resetAmbientSoundTime();
         super.playHurtSound(source);
@@ -252,18 +337,21 @@
         this.ambientSoundTime = -this.getAmbientSoundInterval();
     }
 
+    @Override
     protected int getExperienceReward(Player player) {
         if (this.xpReward > 0) {
             int i = this.xpReward;
 
-            for(int j = 0; j < this.armorItems.size(); ++j) {
-                if (!this.armorItems.get(j).isEmpty() && this.armorDropChances[j] <= 1.0F) {
+            int j;
+
+            for (j = 0; j < this.armorItems.size(); ++j) {
+                if (!((ItemStack) this.armorItems.get(j)).isEmpty() && this.armorDropChances[j] <= 1.0F) {
                     i += 1 + this.random.nextInt(3);
                 }
             }
 
-            for(int k = 0; k < this.handItems.size(); ++k) {
-                if (!this.handItems.get(k).isEmpty() && this.handDropChances[k] <= 1.0F) {
+            for (j = 0; j < this.handItems.size(); ++j) {
+                if (!((ItemStack) this.handItems.get(j)).isEmpty() && this.handDropChances[j] <= 1.0F) {
                     i += 1 + this.random.nextInt(3);
                 }
             }
@@ -276,19 +364,21 @@
 
     public void spawnAnim() {
         if (this.level.isClientSide) {
-            for(int i = 0; i < 20; ++i) {
-                double d = this.random.nextGaussian() * 0.02D;
-                double e = this.random.nextGaussian() * 0.02D;
-                double f = this.random.nextGaussian() * 0.02D;
-                double g = 10.0D;
-                this.level.addParticle(ParticleTypes.POOF, this.getX(1.0D) - d * 10.0D, this.getRandomY() - e * 10.0D, this.getRandomZ(1.0D) - f * 10.0D, d, e, f);
+            for (int i = 0; i < 20; ++i) {
+                double d0 = this.random.nextGaussian() * 0.02D;
+                double d1 = this.random.nextGaussian() * 0.02D;
+                double d2 = this.random.nextGaussian() * 0.02D;
+                double d3 = 10.0D;
+
+                this.level.addParticle(ParticleTypes.POOF, this.getX(1.0D) - d0 * 10.0D, this.getRandomY() - d1 * 10.0D, this.getRandomZ(1.0D) - d2 * 10.0D, d0, d1, d2);
             }
         } else {
-            this.level.broadcastEntityEvent(this, (byte)20);
+            this.level.broadcastEntityEvent(this, (byte) 20);
         }
 
     }
 
+    @Override
     public void handleEntityEvent(byte status) {
         if (status == 20) {
             this.spawnAnim();
@@ -298,6 +388,7 @@
 
     }
 
+    @Override
     public void tick() {
         super.tick();
         if (!this.level.isClientSide) {
@@ -310,13 +401,15 @@
     }
 
     protected void updateControlFlags() {
-        boolean bl = !(this.getControllingPassenger() instanceof Mob);
-        boolean bl2 = !(this.getVehicle() instanceof Boat);
-        this.goalSelector.setControlFlag(Goal.Flag.MOVE, bl);
-        this.goalSelector.setControlFlag(Goal.Flag.JUMP, bl && bl2);
-        this.goalSelector.setControlFlag(Goal.Flag.LOOK, bl);
+        boolean flag = !(this.getControllingPassenger() instanceof Mob);
+        boolean flag1 = !(this.getVehicle() instanceof Boat);
+
+        this.goalSelector.setControlFlag(Goal.Flag.MOVE, flag);
+        this.goalSelector.setControlFlag(Goal.Flag.JUMP, flag && flag1);
+        this.goalSelector.setControlFlag(Goal.Flag.LOOK, flag);
     }
 
+    @Override
     protected float tickHeadTurn(float bodyRotation, float headRotation) {
         this.bodyRotationControl.clientTick();
         return headRotation;
@@ -327,61 +420,79 @@
         return null;
     }
 
+    @Override
     public void addAdditionalSaveData(CompoundTag nbt) {
         super.addAdditionalSaveData(nbt);
         nbt.putBoolean("CanPickUpLoot", this.canPickUpLoot());
         nbt.putBoolean("PersistenceRequired", this.persistenceRequired);
-        ListTag listTag = new ListTag();
+        ListTag nbttaglist = new ListTag();
 
-        for(ItemStack itemStack : this.armorItems) {
-            CompoundTag compoundTag = new CompoundTag();
-            if (!itemStack.isEmpty()) {
-                itemStack.save(compoundTag);
-            }
+        CompoundTag nbttagcompound1;
 
-            listTag.add(compoundTag);
+        for (Iterator iterator = this.armorItems.iterator(); iterator.hasNext(); nbttaglist.add(nbttagcompound1)) {
+            ItemStack itemstack = (ItemStack) iterator.next();
+
+            nbttagcompound1 = new CompoundTag();
+            if (!itemstack.isEmpty()) {
+                itemstack.save(nbttagcompound1);
+            }
         }
 
-        nbt.put("ArmorItems", listTag);
-        ListTag listTag2 = new ListTag();
+        nbt.put("ArmorItems", nbttaglist);
+        ListTag nbttaglist1 = new ListTag();
 
-        for(ItemStack itemStack2 : this.handItems) {
-            CompoundTag compoundTag2 = new CompoundTag();
-            if (!itemStack2.isEmpty()) {
-                itemStack2.save(compoundTag2);
-            }
+        CompoundTag nbttagcompound2;
 
-            listTag2.add(compoundTag2);
+        for (Iterator iterator1 = this.handItems.iterator(); iterator1.hasNext(); nbttaglist1.add(nbttagcompound2)) {
+            ItemStack itemstack1 = (ItemStack) iterator1.next();
+
+            nbttagcompound2 = new CompoundTag();
+            if (!itemstack1.isEmpty()) {
+                itemstack1.save(nbttagcompound2);
+            }
         }
 
-        nbt.put("HandItems", listTag2);
-        ListTag listTag3 = new ListTag();
+        nbt.put("HandItems", nbttaglist1);
+        ListTag nbttaglist2 = new ListTag();
+        float[] afloat = this.armorDropChances;
+        int i = afloat.length;
 
-        for(float f : this.armorDropChances) {
-            listTag3.add(FloatTag.valueOf(f));
+        int j;
+
+        for (j = 0; j < i; ++j) {
+            float f = afloat[j];
+
+            nbttaglist2.add(FloatTag.valueOf(f));
         }
 
-        nbt.put("ArmorDropChances", listTag3);
-        ListTag listTag4 = new ListTag();
+        nbt.put("ArmorDropChances", nbttaglist2);
+        ListTag nbttaglist3 = new ListTag();
+        float[] afloat1 = this.handDropChances;
 
-        for(float g : this.handDropChances) {
-            listTag4.add(FloatTag.valueOf(g));
+        j = afloat1.length;
+
+        for (int k = 0; k < j; ++k) {
+            float f1 = afloat1[k];
+
+            nbttaglist3.add(FloatTag.valueOf(f1));
         }
 
-        nbt.put("HandDropChances", listTag4);
+        nbt.put("HandDropChances", nbttaglist3);
         if (this.leashHolder != null) {
-            CompoundTag compoundTag3 = new CompoundTag();
+            nbttagcompound2 = new CompoundTag();
             if (this.leashHolder instanceof LivingEntity) {
-                UUID uUID = this.leashHolder.getUUID();
-                compoundTag3.putUUID("UUID", uUID);
+                UUID uuid = this.leashHolder.getUUID();
+
+                nbttagcompound2.putUUID("UUID", uuid);
             } else if (this.leashHolder instanceof HangingEntity) {
-                BlockPos blockPos = ((HangingEntity)this.leashHolder).getPos();
-                compoundTag3.putInt("X", blockPos.getX());
-                compoundTag3.putInt("Y", blockPos.getY());
-                compoundTag3.putInt("Z", blockPos.getZ());
+                BlockPos blockposition = ((HangingEntity) this.leashHolder).getPos();
+
+                nbttagcompound2.putInt("X", blockposition.getX());
+                nbttagcompound2.putInt("Y", blockposition.getY());
+                nbttagcompound2.putInt("Z", blockposition.getZ());
             }
 
-            nbt.put("Leash", compoundTag3);
+            nbt.put("Leash", nbttagcompound2);
         } else if (this.leashInfoTag != null) {
             nbt.put("Leash", this.leashInfoTag.copy());
         }
@@ -398,44 +509,58 @@
             nbt.putBoolean("NoAI", this.isNoAi());
         }
 
+        nbt.putBoolean("Bukkit.Aware", this.aware); // CraftBukkit
     }
 
+    @Override
     public void readAdditionalSaveData(CompoundTag nbt) {
         super.readAdditionalSaveData(nbt);
+
+        // CraftBukkit start - If looting or persistence is false only use it if it was set after we started using it
         if (nbt.contains("CanPickUpLoot", 1)) {
-            this.setCanPickUpLoot(nbt.getBoolean("CanPickUpLoot"));
+            boolean data = nbt.getBoolean("CanPickUpLoot");
+            if (isLevelAtLeast(nbt, 1) || data) {
+                this.setCanPickUpLoot(data);
+            }
         }
 
-        this.persistenceRequired = nbt.getBoolean("PersistenceRequired");
+        boolean data = nbt.getBoolean("PersistenceRequired");
+        if (isLevelAtLeast(nbt, 1) || data) {
+            this.persistenceRequired = data;
+        }
+        // CraftBukkit end
+        ListTag nbttaglist;
+        int i;
+
         if (nbt.contains("ArmorItems", 9)) {
-            ListTag listTag = nbt.getList("ArmorItems", 10);
+            nbttaglist = nbt.getList("ArmorItems", 10);
 
-            for(int i = 0; i < this.armorItems.size(); ++i) {
-                this.armorItems.set(i, ItemStack.of(listTag.getCompound(i)));
+            for (i = 0; i < this.armorItems.size(); ++i) {
+                this.armorItems.set(i, ItemStack.of(nbttaglist.getCompound(i)));
             }
         }
 
         if (nbt.contains("HandItems", 9)) {
-            ListTag listTag2 = nbt.getList("HandItems", 10);
+            nbttaglist = nbt.getList("HandItems", 10);
 
-            for(int j = 0; j < this.handItems.size(); ++j) {
-                this.handItems.set(j, ItemStack.of(listTag2.getCompound(j)));
+            for (i = 0; i < this.handItems.size(); ++i) {
+                this.handItems.set(i, ItemStack.of(nbttaglist.getCompound(i)));
             }
         }
 
         if (nbt.contains("ArmorDropChances", 9)) {
-            ListTag listTag3 = nbt.getList("ArmorDropChances", 5);
+            nbttaglist = nbt.getList("ArmorDropChances", 5);
 
-            for(int k = 0; k < listTag3.size(); ++k) {
-                this.armorDropChances[k] = listTag3.getFloat(k);
+            for (i = 0; i < nbttaglist.size(); ++i) {
+                this.armorDropChances[i] = nbttaglist.getFloat(i);
             }
         }
 
         if (nbt.contains("HandDropChances", 9)) {
-            ListTag listTag4 = nbt.getList("HandDropChances", 5);
+            nbttaglist = nbt.getList("HandDropChances", 5);
 
-            for(int l = 0; l < listTag4.size(); ++l) {
-                this.handDropChances[l] = listTag4.getFloat(l);
+            for (i = 0; i < nbttaglist.size(); ++i) {
+                this.handDropChances[i] = nbttaglist.getFloat(i);
             }
         }
 
@@ -450,22 +575,30 @@
         }
 
         this.setNoAi(nbt.getBoolean("NoAI"));
+        // CraftBukkit start
+        if (nbt.contains("Bukkit.Aware")) {
+            this.aware = nbt.getBoolean("Bukkit.Aware");
+        }
+        // CraftBukkit end
     }
 
+    @Override
     protected void dropFromLootTable(DamageSource source, boolean causedByPlayer) {
         super.dropFromLootTable(source, causedByPlayer);
         this.lootTable = null;
     }
 
+    @Override
     protected LootContext.Builder createLootContext(boolean causedByPlayer, DamageSource source) {
         return super.createLootContext(causedByPlayer, source).withOptionalRandomSeed(this.lootTableSeed, this.random);
     }
 
+    @Override
     public final ResourceLocation getLootTable() {
         return this.lootTable == null ? this.getDefaultLootTable() : this.lootTable;
     }
 
-    protected ResourceLocation getDefaultLootTable() {
+    public ResourceLocation getDefaultLootTable() {
         return super.getLootTable();
     }
 
@@ -481,18 +614,30 @@
         this.xxa = sidewaysMovement;
     }
 
+    @Override
     public void setSpeed(float movementSpeed) {
         super.setSpeed(movementSpeed);
         this.setZza(movementSpeed);
     }
 
+    @Override
     public void aiStep() {
         super.aiStep();
         this.level.getProfiler().push("looting");
         if (!this.level.isClientSide && this.canPickUpLoot() && this.isAlive() && !this.dead && this.level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
-            for(ItemEntity itemEntity : this.level.getEntitiesOfClass(ItemEntity.class, this.getBoundingBox().inflate(1.0D, 0.0D, 1.0D))) {
-                if (!itemEntity.isRemoved() && !itemEntity.getItem().isEmpty() && !itemEntity.hasPickUpDelay() && this.wantsToPickUp(itemEntity.getItem())) {
-                    this.pickUpItem(itemEntity);
+            List<ItemEntity> list = this.level.getEntitiesOfClass(ItemEntity.class, this.getBoundingBox().inflate(1.0D, 0.0D, 1.0D));
+            Iterator iterator = list.iterator();
+
+            while (iterator.hasNext()) {
+                ItemEntity entityitem = (ItemEntity) iterator.next();
+
+                if (!entityitem.isRemoved() && !entityitem.getItem().isEmpty() && !entityitem.hasPickUpDelay() && this.wantsToPickUp(entityitem.getItem())) {
+                    // Paper Start
+                    if (!entityitem.canMobPickup) {
+                        continue;
+                    }
+                    // Paper End
+                    this.pickUpItem(entityitem);
                 }
             }
         }
@@ -501,27 +646,44 @@
     }
 
     protected void pickUpItem(ItemEntity item) {
-        ItemStack itemStack = item.getItem();
-        if (this.equipItemIfPossible(itemStack)) {
+        ItemStack itemstack = item.getItem();
+
+        if (this.equipItemIfPossible(itemstack, item)) { // CraftBukkit - add item
             this.onItemPickup(item);
-            this.take(item, itemStack.getCount());
+            this.take(item, itemstack.getCount());
             item.discard();
         }
 
     }
 
     public boolean equipItemIfPossible(ItemStack equipment) {
-        EquipmentSlot equipmentSlot = getEquipmentSlotForItem(equipment);
-        ItemStack itemStack = this.getItemBySlot(equipmentSlot);
-        boolean bl = this.canReplaceCurrentItem(equipment, itemStack);
-        if (bl && this.canHoldItem(equipment)) {
-            double d = (double)this.getEquipmentDropChance(equipmentSlot);
-            if (!itemStack.isEmpty() && (double)Math.max(this.random.nextFloat() - 0.1F, 0.0F) < d) {
-                this.spawnAtLocation(itemStack);
+        // CraftBukkit start - add item
+        return this.equipItemIfPossible(equipment, null);
+    }
+
+    public boolean equipItemIfPossible(ItemStack itemstack, ItemEntity entityitem) {
+        // CraftBukkit end
+        EquipmentSlot enumitemslot = getEquipmentSlotForItem(itemstack);
+        ItemStack itemstack1 = this.getItemBySlot(enumitemslot);
+        boolean flag = this.canReplaceCurrentItem(itemstack, itemstack1);
+
+        // CraftBukkit start
+        boolean canPickup = flag && this.canHoldItem(itemstack);
+        if (entityitem != null) {
+            canPickup = !org.bukkit.craftbukkit.v1_17_R1.event.CraftEventFactory.callEntityPickupItemEvent(this, entityitem, 0, !canPickup).isCancelled();
+        }
+        if (canPickup) {
+            // CraftBukkit end
+            double d0 = (double) this.getEquipmentDropChance(enumitemslot);
+
+            if (!itemstack1.isEmpty() && (double) Math.max(this.random.nextFloat() - 0.1F, 0.0F) < d0) {
+                this.forceDrops = true; // CraftBukkit
+                this.spawnAtLocation(itemstack1);
+                this.forceDrops = false; // CraftBukkit
             }
 
-            this.setItemSlotAndDropWhenKilled(equipmentSlot, equipment);
-            this.equipEventAndSound(equipment);
+            this.setItemSlotAndDropWhenKilled(enumitemslot, itemstack);
+            this.equipEventAndSound(itemstack);
             return true;
         } else {
             return false;
@@ -535,12 +697,12 @@
     }
 
     public void setGuaranteedDrop(EquipmentSlot slot) {
-        switch(slot.getType()) {
-        case HAND:
-            this.handDropChances[slot.getIndex()] = 2.0F;
-            break;
-        case ARMOR:
-            this.armorDropChances[slot.getIndex()] = 2.0F;
+        switch (slot.getType()) {
+            case HAND:
+                this.handDropChances[slot.getIndex()] = 2.0F;
+                break;
+            case ARMOR:
+                this.armorDropChances[slot.getIndex()] = 2.0F;
         }
 
     }
@@ -552,13 +714,10 @@
             if (!(oldStack.getItem() instanceof SwordItem)) {
                 return true;
             } else {
-                SwordItem swordItem = (SwordItem)newStack.getItem();
-                SwordItem swordItem2 = (SwordItem)oldStack.getItem();
-                if (swordItem.getDamage() != swordItem2.getDamage()) {
-                    return swordItem.getDamage() > swordItem2.getDamage();
-                } else {
-                    return this.canReplaceEqualItem(newStack, oldStack);
-                }
+                SwordItem itemsword = (SwordItem) newStack.getItem();
+                SwordItem itemsword1 = (SwordItem) oldStack.getItem();
+
+                return itemsword.getDamage() != itemsword1.getDamage() ? itemsword.getDamage() > itemsword1.getDamage() : this.canReplaceEqualItem(newStack, oldStack);
             }
         } else if (newStack.getItem() instanceof BowItem && oldStack.getItem() instanceof BowItem) {
             return this.canReplaceEqualItem(newStack, oldStack);
@@ -570,15 +729,10 @@
             } else if (!(oldStack.getItem() instanceof ArmorItem)) {
                 return true;
             } else {
-                ArmorItem armorItem = (ArmorItem)newStack.getItem();
-                ArmorItem armorItem2 = (ArmorItem)oldStack.getItem();
-                if (armorItem.getDefense() != armorItem2.getDefense()) {
-                    return armorItem.getDefense() > armorItem2.getDefense();
-                } else if (armorItem.getToughness() != armorItem2.getToughness()) {
-                    return armorItem.getToughness() > armorItem2.getToughness();
-                } else {
-                    return this.canReplaceEqualItem(newStack, oldStack);
-                }
+                ArmorItem itemarmor = (ArmorItem) newStack.getItem();
+                ArmorItem itemarmor1 = (ArmorItem) oldStack.getItem();
+
+                return itemarmor.getDefense() != itemarmor1.getDefense() ? itemarmor.getDefense() > itemarmor1.getDefense() : (itemarmor.getToughness() != itemarmor1.getToughness() ? itemarmor.getToughness() > itemarmor1.getToughness() : this.canReplaceEqualItem(newStack, oldStack));
             }
         } else {
             if (newStack.getItem() instanceof DiggerItem) {
@@ -587,10 +741,11 @@
                 }
 
                 if (oldStack.getItem() instanceof DiggerItem) {
-                    DiggerItem diggerItem = (DiggerItem)newStack.getItem();
-                    DiggerItem diggerItem2 = (DiggerItem)oldStack.getItem();
-                    if (diggerItem.getAttackDamage() != diggerItem2.getAttackDamage()) {
-                        return diggerItem.getAttackDamage() > diggerItem2.getAttackDamage();
+                    DiggerItem itemtool = (DiggerItem) newStack.getItem();
+                    DiggerItem itemtool1 = (DiggerItem) oldStack.getItem();
+
+                    if (itemtool.getAttackDamage() != itemtool1.getAttackDamage()) {
+                        return itemtool.getAttackDamage() > itemtool1.getAttackDamage();
                     }
 
                     return this.canReplaceEqualItem(newStack, oldStack);
@@ -602,19 +757,11 @@
     }
 
     public boolean canReplaceEqualItem(ItemStack newStack, ItemStack oldStack) {
-        if (newStack.getDamageValue() >= oldStack.getDamageValue() && (!newStack.hasTag() || oldStack.hasTag())) {
-            if (newStack.hasTag() && oldStack.hasTag()) {
-                return newStack.getTag().getAllKeys().stream().anyMatch((string) -> {
-                    return !string.equals("Damage");
-                }) && !oldStack.getTag().getAllKeys().stream().anyMatch((string) -> {
-                    return !string.equals("Damage");
-                });
-            } else {
-                return false;
-            }
-        } else {
-            return true;
-        }
+        return newStack.getDamageValue() >= oldStack.getDamageValue() && (!newStack.hasTag() || oldStack.hasTag()) ? (newStack.hasTag() && oldStack.hasTag() ? newStack.getTag().getAllKeys().stream().anyMatch((s) -> {
+            return !s.equals("Damage");
+        }) && !oldStack.getTag().getAllKeys().stream().anyMatch((s) -> {
+            return !s.equals("Damage");
+        }) : false) : true;
     }
 
     public boolean canHoldItem(ItemStack stack) {
@@ -637,24 +784,28 @@
         return false;
     }
 
+    @Override
     public void checkDespawn() {
         if (this.level.getDifficulty() == Difficulty.PEACEFUL && this.shouldDespawnInPeaceful()) {
             this.discard();
         } else if (!this.isPersistenceRequired() && !this.requiresCustomPersistence()) {
-            Entity entity = this.level.getNearestPlayer(this, -1.0D);
-            if (entity != null) {
-                double d = entity.distanceToSqr(this);
+            Player entityhuman = this.level.findNearbyPlayer(this, -1.0D, EntitySelector.affectsSpawning); // Paper
+
+            if (entityhuman != null) {
+                double d0 = entityhuman.distanceToSqr((Entity) this); // CraftBukkit - decompile error
                 int i = this.getType().getCategory().getDespawnDistance();
                 int j = i * i;
-                if (d > (double)j && this.removeWhenFarAway(d)) {
+
+                if (d0 > (double) level.paperConfig.hardDespawnDistance) { // CraftBukkit - remove isTypeNotPersistent() check // Paper - custom despawn distances
                     this.discard();
                 }
 
                 int k = this.getType().getCategory().getNoDespawnDistance();
                 int l = k * k;
-                if (this.noActionTime > 600 && this.random.nextInt(800) == 0 && d > (double)l && this.removeWhenFarAway(d)) {
+
+                if (this.noActionTime > 600 && this.random.nextInt(800) == 0 && d0 > level.paperConfig.softDespawnDistance) { // CraftBukkit - remove isTypeNotPersistent() check // Paper - custom despawn distances
                     this.discard();
-                } else if (d < (double)l) {
+                } else if (d0 < level.paperConfig.softDespawnDistance) { // Paper - custom despawn distances
                     this.noActionTime = 0;
                 }
             }
@@ -664,8 +815,20 @@
         }
     }
 
+    @Override
     protected final void serverAiStep() {
         ++this.noActionTime;
+        if (!this.aware) { // Paper start - Allow nerfed mobs to jump, float and take water damage
+            if (goalFloat != null) {
+                if (goalFloat.canUse()) goalFloat.tick();
+                this.getJumpControl().tick();
+            }
+            if ((this instanceof net.minecraft.world.entity.monster.Blaze || this instanceof net.minecraft.world.entity.monster.EnderMan) && isInWaterRainOrBubble()) {
+                hurt(DamageSource.DROWN, 1.0F);
+            }
+            return;
+        }
+        // Paper end
         this.level.getProfiler().push("sensing");
         this.sensing.tick();
         this.level.getProfiler().pop();
@@ -697,8 +860,7 @@
         DebugPackets.sendGoalSelector(this.level, this, this.goalSelector);
     }
 
-    protected void customServerAiStep() {
-    }
+    protected void customServerAiStep() {}
 
     public int getMaxHeadXRot() {
         return 40;
@@ -713,39 +875,44 @@
     }
 
     public void lookAt(Entity targetEntity, float maxYawChange, float maxPitchChange) {
-        double d = targetEntity.getX() - this.getX();
-        double e = targetEntity.getZ() - this.getZ();
-        double f;
+        double d0 = targetEntity.getX() - this.getX();
+        double d1 = targetEntity.getZ() - this.getZ();
+        double d2;
+
         if (targetEntity instanceof LivingEntity) {
-            LivingEntity livingEntity = (LivingEntity)targetEntity;
-            f = livingEntity.getEyeY() - this.getEyeY();
+            LivingEntity entityliving = (LivingEntity) targetEntity;
+
+            d2 = entityliving.getEyeY() - this.getEyeY();
         } else {
-            f = (targetEntity.getBoundingBox().minY + targetEntity.getBoundingBox().maxY) / 2.0D - this.getEyeY();
+            d2 = (targetEntity.getBoundingBox().minY + targetEntity.getBoundingBox().maxY) / 2.0D - this.getEyeY();
         }
 
-        double h = Math.sqrt(d * d + e * e);
-        float i = (float)(Mth.atan2(e, d) * (double)(180F / (float)Math.PI)) - 90.0F;
-        float j = (float)(-(Mth.atan2(f, h) * (double)(180F / (float)Math.PI)));
-        this.setXRot(this.rotlerp(this.getXRot(), j, maxPitchChange));
-        this.setYRot(this.rotlerp(this.getYRot(), i, maxYawChange));
+        double d3 = Math.sqrt(d0 * d0 + d1 * d1);
+        float f2 = (float) (Mth.atan2(d1, d0) * 57.2957763671875D) - 90.0F;
+        float f3 = (float) (-(Mth.atan2(d2, d3) * 57.2957763671875D));
+
+        this.setXRot(this.rotlerp(this.getXRot(), f3, maxPitchChange));
+        this.setYRot(this.rotlerp(this.getYRot(), f2, maxYawChange));
     }
 
     private float rotlerp(float oldAngle, float newAngle, float maxChangeInAngle) {
-        float f = Mth.wrapDegrees(newAngle - oldAngle);
-        if (f > maxChangeInAngle) {
-            f = maxChangeInAngle;
+        float f3 = Mth.wrapDegrees(newAngle - oldAngle);
+
+        if (f3 > maxChangeInAngle) {
+            f3 = maxChangeInAngle;
         }
 
-        if (f < -maxChangeInAngle) {
-            f = -maxChangeInAngle;
+        if (f3 < -maxChangeInAngle) {
+            f3 = -maxChangeInAngle;
         }
 
-        return oldAngle + f;
+        return oldAngle + f3;
     }
 
     public static boolean checkMobSpawnRules(EntityType<? extends Mob> type, LevelAccessor world, MobSpawnType spawnReason, BlockPos pos, Random random) {
-        BlockPos blockPos = pos.below();
-        return spawnReason == MobSpawnType.SPAWNER || world.getBlockState(blockPos).isValidSpawn(world, blockPos, type);
+        BlockPos blockposition1 = pos.below();
+
+        return spawnReason == MobSpawnType.SPAWNER || world.getBlockState(blockposition1).isValidSpawn((BlockGetter) world, blockposition1, type);
     }
 
     public boolean checkSpawnRules(LevelAccessor world, MobSpawnType spawnReason) {
@@ -753,7 +920,7 @@
     }
 
     public boolean checkSpawnObstruction(LevelReader world) {
-        return !world.containsAnyLiquid(this.getBoundingBox()) && world.isUnobstructed(this);
+        return !world.containsAnyLiquid(this.getBoundingBox()) && world.isUnobstructed((Entity) this);
     }
 
     public int getMaxSpawnClusterSize() {
@@ -764,12 +931,14 @@
         return false;
     }
 
+    @Override
     public int getMaxFallDistance() {
         if (this.getTarget() == null) {
             return 3;
         } else {
-            int i = (int)(this.getHealth() - this.getMaxHealth() * 0.33F);
-            i = i - (3 - this.level.getDifficulty().getId()) * 4;
+            int i = (int) (this.getHealth() - this.getMaxHealth() * 0.33F);
+
+            i -= (3 - this.level.getDifficulty().getId()) * 4;
             if (i < 0) {
                 i = 0;
             }
@@ -778,51 +947,60 @@
         }
     }
 
+    @Override
     public Iterable<ItemStack> getHandSlots() {
         return this.handItems;
     }
 
+    @Override
     public Iterable<ItemStack> getArmorSlots() {
         return this.armorItems;
     }
 
+    @Override
     public ItemStack getItemBySlot(EquipmentSlot slot) {
-        switch(slot.getType()) {
-        case HAND:
-            return this.handItems.get(slot.getIndex());
-        case ARMOR:
-            return this.armorItems.get(slot.getIndex());
-        default:
-            return ItemStack.EMPTY;
+        switch (slot.getType()) {
+            case HAND:
+                return (ItemStack) this.handItems.get(slot.getIndex());
+            case ARMOR:
+                return (ItemStack) this.armorItems.get(slot.getIndex());
+            default:
+                return ItemStack.EMPTY;
         }
     }
 
+    @Override
     public void setItemSlot(EquipmentSlot slot, ItemStack stack) {
         this.verifyEquippedItem(stack);
-        switch(slot.getType()) {
-        case HAND:
-            this.handItems.set(slot.getIndex(), stack);
-            break;
-        case ARMOR:
-            this.armorItems.set(slot.getIndex(), stack);
+        switch (slot.getType()) {
+            case HAND:
+                this.handItems.set(slot.getIndex(), stack);
+                break;
+            case ARMOR:
+                this.armorItems.set(slot.getIndex(), stack);
         }
 
     }
 
+    @Override
     protected void dropCustomDeathLoot(DamageSource source, int lootingMultiplier, boolean allowDrops) {
         super.dropCustomDeathLoot(source, lootingMultiplier, allowDrops);
+        EquipmentSlot[] aenumitemslot = EquipmentSlot.values();
+        int j = aenumitemslot.length;
 
-        for(EquipmentSlot equipmentSlot : EquipmentSlot.values()) {
-            ItemStack itemStack = this.getItemBySlot(equipmentSlot);
-            float f = this.getEquipmentDropChance(equipmentSlot);
-            boolean bl = f > 1.0F;
-            if (!itemStack.isEmpty() && !EnchantmentHelper.hasVanishingCurse(itemStack) && (allowDrops || bl) && Math.max(this.random.nextFloat() - (float)lootingMultiplier * 0.01F, 0.0F) < f) {
-                if (!bl && itemStack.isDamageableItem()) {
-                    itemStack.setDamageValue(itemStack.getMaxDamage() - this.random.nextInt(1 + this.random.nextInt(Math.max(itemStack.getMaxDamage() - 3, 1))));
+        for (int k = 0; k < j; ++k) {
+            EquipmentSlot enumitemslot = aenumitemslot[k];
+            ItemStack itemstack = this.getItemBySlot(enumitemslot);
+            float f = this.getEquipmentDropChance(enumitemslot);
+            boolean flag1 = f > 1.0F;
+
+            if (!itemstack.isEmpty() && !EnchantmentHelper.hasVanishingCurse(itemstack) && (allowDrops || flag1) && Math.max(this.random.nextFloat() - (float) lootingMultiplier * 0.01F, 0.0F) < f) {
+                if (!flag1 && itemstack.isDamageableItem()) {
+                    itemstack.setDamageValue(itemstack.getMaxDamage() - this.random.nextInt(1 + this.random.nextInt(Math.max(itemstack.getMaxDamage() - 3, 1))));
                 }
 
-                this.spawnAtLocation(itemStack);
-                this.setItemSlot(equipmentSlot, ItemStack.EMPTY);
+                this.spawnAtLocation(itemstack);
+                this.setItemSlot(enumitemslot, ItemStack.EMPTY);
             }
         }
 
@@ -830,15 +1008,16 @@
 
     protected float getEquipmentDropChance(EquipmentSlot slot) {
         float f;
-        switch(slot.getType()) {
-        case HAND:
-            f = this.handDropChances[slot.getIndex()];
-            break;
-        case ARMOR:
-            f = this.armorDropChances[slot.getIndex()];
-            break;
-        default:
-            f = 0.0F;
+
+        switch (slot.getType()) {
+            case HAND:
+                f = this.handDropChances[slot.getIndex()];
+                break;
+            case ARMOR:
+                f = this.armorDropChances[slot.getIndex()];
+                break;
+            default:
+                f = 0.0F;
         }
 
         return f;
@@ -848,6 +1027,7 @@
         if (this.random.nextFloat() < 0.15F * difficulty.getSpecialMultiplier()) {
             int i = this.random.nextInt(2);
             float f = this.level.getDifficulty() == Difficulty.HARD ? 0.1F : 0.25F;
+
             if (this.random.nextFloat() < 0.095F) {
                 ++i;
             }
@@ -860,20 +1040,26 @@
                 ++i;
             }
 
-            boolean bl = true;
+            boolean flag = true;
+            EquipmentSlot[] aenumitemslot = EquipmentSlot.values();
+            int j = aenumitemslot.length;
 
-            for(EquipmentSlot equipmentSlot : EquipmentSlot.values()) {
-                if (equipmentSlot.getType() == EquipmentSlot.Type.ARMOR) {
-                    ItemStack itemStack = this.getItemBySlot(equipmentSlot);
-                    if (!bl && this.random.nextFloat() < f) {
+            for (int k = 0; k < j; ++k) {
+                EquipmentSlot enumitemslot = aenumitemslot[k];
+
+                if (enumitemslot.getType() == EquipmentSlot.Type.ARMOR) {
+                    ItemStack itemstack = this.getItemBySlot(enumitemslot);
+
+                    if (!flag && this.random.nextFloat() < f) {
                         break;
                     }
 
-                    bl = false;
-                    if (itemStack.isEmpty()) {
-                        Item item = getEquipmentForSlot(equipmentSlot, i);
+                    flag = false;
+                    if (itemstack.isEmpty()) {
+                        Item item = Mob.getEquipmentForSlot(enumitemslot, i);
+
                         if (item != null) {
-                            this.setItemSlot(equipmentSlot, new ItemStack(item));
+                            this.setItemSlot(enumitemslot, new ItemStack(item));
                         }
                     }
                 }
@@ -884,67 +1070,72 @@
 
     @Nullable
     public static Item getEquipmentForSlot(EquipmentSlot equipmentSlot, int equipmentLevel) {
-        switch(equipmentSlot) {
-        case HEAD:
-            if (equipmentLevel == 0) {
-                return Items.LEATHER_HELMET;
-            } else if (equipmentLevel == 1) {
-                return Items.GOLDEN_HELMET;
-            } else if (equipmentLevel == 2) {
-                return Items.CHAINMAIL_HELMET;
-            } else if (equipmentLevel == 3) {
-                return Items.IRON_HELMET;
-            } else if (equipmentLevel == 4) {
-                return Items.DIAMOND_HELMET;
-            }
-        case CHEST:
-            if (equipmentLevel == 0) {
-                return Items.LEATHER_CHESTPLATE;
-            } else if (equipmentLevel == 1) {
-                return Items.GOLDEN_CHESTPLATE;
-            } else if (equipmentLevel == 2) {
-                return Items.CHAINMAIL_CHESTPLATE;
-            } else if (equipmentLevel == 3) {
-                return Items.IRON_CHESTPLATE;
-            } else if (equipmentLevel == 4) {
-                return Items.DIAMOND_CHESTPLATE;
-            }
-        case LEGS:
-            if (equipmentLevel == 0) {
-                return Items.LEATHER_LEGGINGS;
-            } else if (equipmentLevel == 1) {
-                return Items.GOLDEN_LEGGINGS;
-            } else if (equipmentLevel == 2) {
-                return Items.CHAINMAIL_LEGGINGS;
-            } else if (equipmentLevel == 3) {
-                return Items.IRON_LEGGINGS;
-            } else if (equipmentLevel == 4) {
-                return Items.DIAMOND_LEGGINGS;
-            }
-        case FEET:
-            if (equipmentLevel == 0) {
-                return Items.LEATHER_BOOTS;
-            } else if (equipmentLevel == 1) {
-                return Items.GOLDEN_BOOTS;
-            } else if (equipmentLevel == 2) {
-                return Items.CHAINMAIL_BOOTS;
-            } else if (equipmentLevel == 3) {
-                return Items.IRON_BOOTS;
-            } else if (equipmentLevel == 4) {
-                return Items.DIAMOND_BOOTS;
-            }
-        default:
-            return null;
+        switch (equipmentSlot) {
+            case HEAD:
+                if (equipmentLevel == 0) {
+                    return Items.LEATHER_HELMET;
+                } else if (equipmentLevel == 1) {
+                    return Items.GOLDEN_HELMET;
+                } else if (equipmentLevel == 2) {
+                    return Items.CHAINMAIL_HELMET;
+                } else if (equipmentLevel == 3) {
+                    return Items.IRON_HELMET;
+                } else if (equipmentLevel == 4) {
+                    return Items.DIAMOND_HELMET;
+                }
+            case CHEST:
+                if (equipmentLevel == 0) {
+                    return Items.LEATHER_CHESTPLATE;
+                } else if (equipmentLevel == 1) {
+                    return Items.GOLDEN_CHESTPLATE;
+                } else if (equipmentLevel == 2) {
+                    return Items.CHAINMAIL_CHESTPLATE;
+                } else if (equipmentLevel == 3) {
+                    return Items.IRON_CHESTPLATE;
+                } else if (equipmentLevel == 4) {
+                    return Items.DIAMOND_CHESTPLATE;
+                }
+            case LEGS:
+                if (equipmentLevel == 0) {
+                    return Items.LEATHER_LEGGINGS;
+                } else if (equipmentLevel == 1) {
+                    return Items.GOLDEN_LEGGINGS;
+                } else if (equipmentLevel == 2) {
+                    return Items.CHAINMAIL_LEGGINGS;
+                } else if (equipmentLevel == 3) {
+                    return Items.IRON_LEGGINGS;
+                } else if (equipmentLevel == 4) {
+                    return Items.DIAMOND_LEGGINGS;
+                }
+            case FEET:
+                if (equipmentLevel == 0) {
+                    return Items.LEATHER_BOOTS;
+                } else if (equipmentLevel == 1) {
+                    return Items.GOLDEN_BOOTS;
+                } else if (equipmentLevel == 2) {
+                    return Items.CHAINMAIL_BOOTS;
+                } else if (equipmentLevel == 3) {
+                    return Items.IRON_BOOTS;
+                } else if (equipmentLevel == 4) {
+                    return Items.DIAMOND_BOOTS;
+                }
+            default:
+                return null;
         }
     }
 
     protected void populateDefaultEquipmentEnchantments(DifficultyInstance difficulty) {
         float f = difficulty.getSpecialMultiplier();
+
         this.enchantSpawnedWeapon(f);
+        EquipmentSlot[] aenumitemslot = EquipmentSlot.values();
+        int i = aenumitemslot.length;
 
-        for(EquipmentSlot equipmentSlot : EquipmentSlot.values()) {
-            if (equipmentSlot.getType() == EquipmentSlot.Type.ARMOR) {
-                this.enchantSpawnedArmor(f, equipmentSlot);
+        for (int j = 0; j < i; ++j) {
+            EquipmentSlot enumitemslot = aenumitemslot[j];
+
+            if (enumitemslot.getType() == EquipmentSlot.Type.ARMOR) {
+                this.enchantSpawnedArmor(f, enumitemslot);
             }
         }
 
@@ -952,15 +1143,16 @@
 
     protected void enchantSpawnedWeapon(float power) {
         if (!this.getMainHandItem().isEmpty() && this.random.nextFloat() < 0.25F * power) {
-            this.setItemSlot(EquipmentSlot.MAINHAND, EnchantmentHelper.enchantItem(this.random, this.getMainHandItem(), (int)(5.0F + power * (float)this.random.nextInt(18)), false));
+            this.setItemSlot(EquipmentSlot.MAINHAND, EnchantmentHelper.enchantItem(this.random, this.getMainHandItem(), (int) (5.0F + power * (float) this.random.nextInt(18)), false));
         }
 
     }
 
     protected void enchantSpawnedArmor(float power, EquipmentSlot slot) {
-        ItemStack itemStack = this.getItemBySlot(slot);
-        if (!itemStack.isEmpty() && this.random.nextFloat() < 0.5F * power) {
-            this.setItemSlot(slot, EnchantmentHelper.enchantItem(this.random, itemStack, (int)(5.0F + power * (float)this.random.nextInt(18)), false));
+        ItemStack itemstack = this.getItemBySlot(slot);
+
+        if (!itemstack.isEmpty() && this.random.nextFloat() < 0.5F * power) {
+            this.setItemSlot(slot, EnchantmentHelper.enchantItem(this.random, itemstack, (int) (5.0F + power * (float) this.random.nextInt(18)), false));
         }
 
     }
@@ -986,12 +1178,12 @@
     }
 
     public void setDropChance(EquipmentSlot slot, float chance) {
-        switch(slot.getType()) {
-        case HAND:
-            this.handDropChances[slot.getIndex()] = chance;
-            break;
-        case ARMOR:
-            this.armorDropChances[slot.getIndex()] = chance;
+        switch (slot.getType()) {
+            case HAND:
+                this.handDropChances[slot.getIndex()] = chance;
+                break;
+            case ARMOR:
+                this.armorDropChances[slot.getIndex()] = chance;
         }
 
     }
@@ -1004,52 +1196,74 @@
         this.canPickUpLoot = pickUpLoot;
     }
 
+    @Override
     public boolean canTakeItem(ItemStack stack) {
-        EquipmentSlot equipmentSlot = getEquipmentSlotForItem(stack);
-        return this.getItemBySlot(equipmentSlot).isEmpty() && this.canPickUpLoot();
+        EquipmentSlot enumitemslot = getEquipmentSlotForItem(stack);
+
+        return this.getItemBySlot(enumitemslot).isEmpty() && this.canPickUpLoot();
     }
 
     public boolean isPersistenceRequired() {
         return this.persistenceRequired;
     }
 
+    @Override
     public final InteractionResult interact(Player player, InteractionHand hand) {
         if (!this.isAlive()) {
             return InteractionResult.PASS;
         } else if (this.getLeashHolder() == player) {
-            this.dropLeash(true, !player.getAbilities().instabuild);
+            // CraftBukkit start - fire PlayerUnleashEntityEvent
+            // Paper start - drop leash variable
+            org.bukkit.event.player.PlayerUnleashEntityEvent event = CraftEventFactory.callPlayerUnleashEntityEvent(this, player, !player.getAbilities().instabuild);
+            if (event.isCancelled()) {
+                // Paper end
+                ((ServerPlayer) player).connection.send(new ClientboundSetEntityLinkPacket(this, this.getLeashHolder()));
+                return InteractionResult.PASS;
+            }
+            // CraftBukkit end
+            this.dropLeash(true, event.isDropLeash()); // Paper - drop leash variable
             return InteractionResult.sidedSuccess(this.level.isClientSide);
         } else {
-            InteractionResult interactionResult = this.checkAndHandleImportantInteractions(player, hand);
-            if (interactionResult.consumesAction()) {
-                return interactionResult;
+            InteractionResult enuminteractionresult = this.checkAndHandleImportantInteractions(player, hand);
+
+            if (enuminteractionresult.consumesAction()) {
+                return enuminteractionresult;
             } else {
-                interactionResult = this.mobInteract(player, hand);
-                return interactionResult.consumesAction() ? interactionResult : super.interact(player, hand);
+                enuminteractionresult = this.mobInteract(player, hand);
+                return enuminteractionresult.consumesAction() ? enuminteractionresult : super.interact(player, hand);
             }
         }
     }
 
     private InteractionResult checkAndHandleImportantInteractions(Player player, InteractionHand hand) {
-        ItemStack itemStack = player.getItemInHand(hand);
-        if (itemStack.is(Items.LEAD) && this.canBeLeashed(player)) {
+        ItemStack itemstack = player.getItemInHand(hand);
+
+        if (itemstack.is(Items.LEAD) && this.canBeLeashed(player)) {
+            // CraftBukkit start - fire PlayerLeashEntityEvent
+            if (CraftEventFactory.callPlayerLeashEntityEvent(this, player, player).isCancelled()) {
+                ((ServerPlayer) player).connection.send(new ClientboundSetEntityLinkPacket(this, this.getLeashHolder()));
+                return InteractionResult.PASS;
+            }
+            // CraftBukkit end
             this.setLeashedTo(player, true);
-            itemStack.shrink(1);
+            itemstack.shrink(1);
             return InteractionResult.sidedSuccess(this.level.isClientSide);
         } else {
-            if (itemStack.is(Items.NAME_TAG)) {
-                InteractionResult interactionResult = itemStack.interactLivingEntity(player, this, hand);
-                if (interactionResult.consumesAction()) {
-                    return interactionResult;
+            if (itemstack.is(Items.NAME_TAG)) {
+                InteractionResult enuminteractionresult = itemstack.interactLivingEntity(player, (LivingEntity) this, hand);
+
+                if (enuminteractionresult.consumesAction()) {
+                    return enuminteractionresult;
                 }
             }
 
-            if (itemStack.getItem() instanceof SpawnEggItem) {
+            if (itemstack.getItem() instanceof SpawnEggItem) {
                 if (this.level instanceof ServerLevel) {
-                    SpawnEggItem spawnEggItem = (SpawnEggItem)itemStack.getItem();
-                    Optional<Mob> optional = spawnEggItem.spawnOffspringFromSpawnEgg(player, this, this.getType(), (ServerLevel)this.level, this.position(), itemStack);
-                    optional.ifPresent((mob) -> {
-                        this.onOffspringSpawnedFromEgg(player, mob);
+                    SpawnEggItem itemmonsteregg = (SpawnEggItem) itemstack.getItem();
+                    Optional<Mob> optional = itemmonsteregg.spawnOffspringFromSpawnEgg(player, this, (EntityType<? extends Mob>) this.getType(), (ServerLevel) this.level, this.position(), itemstack); // CraftBukkit - decompile error
+
+                    optional.ifPresent((entityinsentient) -> {
+                        this.onOffspringSpawnedFromEgg(player, entityinsentient);
                     });
                     return optional.isPresent() ? InteractionResult.SUCCESS : InteractionResult.PASS;
                 } else {
@@ -1061,8 +1275,7 @@
         }
     }
 
-    protected void onOffspringSpawnedFromEgg(Player player, Mob child) {
-    }
+    protected void onOffspringSpawnedFromEgg(Player player, Mob child) {}
 
     protected InteractionResult mobInteract(Player player, InteractionHand hand) {
         return InteractionResult.PASS;
@@ -1073,16 +1286,12 @@
     }
 
     public boolean isWithinRestriction(BlockPos pos) {
-        if (this.restrictRadius == -1.0F) {
-            return true;
-        } else {
-            return this.restrictCenter.distSqr(pos) < (double)(this.restrictRadius * this.restrictRadius);
-        }
+        return this.restrictRadius == -1.0F ? true : this.restrictCenter.distSqr(pos) < (double) (this.restrictRadius * this.restrictRadius);
     }
 
     public void restrictTo(BlockPos target, int range) {
         this.restrictCenter = target;
-        this.restrictRadius = (float)range;
+        this.restrictRadius = (float) range;
     }
 
     public BlockPos getRestrictCenter() {
@@ -1101,47 +1310,65 @@
         return this.restrictRadius != -1.0F;
     }
 
+    // CraftBukkit start
     @Nullable
     public <T extends Mob> T convertTo(EntityType<T> entityType, boolean keepEquipment) {
+        return this.convertTo(entityType, keepEquipment, EntityTransformEvent.TransformReason.UNKNOWN, CreatureSpawnEvent.SpawnReason.DEFAULT);
+    }
+
+    @Nullable
+    public <T extends Mob> T convertTo(EntityType<T> entitytypes, boolean flag, EntityTransformEvent.TransformReason transformReason, CreatureSpawnEvent.SpawnReason spawnReason) {
+        // CraftBukkit end
         if (this.isRemoved()) {
-            return (T)null;
+            return null;
         } else {
-            T mob = entityType.create(this.level);
-            mob.copyPosition(this);
-            mob.setBaby(this.isBaby());
-            mob.setNoAi(this.isNoAi());
+            T t0 = entitytypes.create(this.level); // CraftBukkit - decompile error
+
+            t0.copyPosition(this);
+            t0.setBaby(this.isBaby());
+            t0.setNoAi(this.isNoAi());
             if (this.hasCustomName()) {
-                mob.setCustomName(this.getCustomName());
-                mob.setCustomNameVisible(this.isCustomNameVisible());
+                t0.setCustomName(this.getCustomName());
+                t0.setCustomNameVisible(this.isCustomNameVisible());
             }
 
             if (this.isPersistenceRequired()) {
-                mob.setPersistenceRequired();
+                t0.setPersistenceRequired();
             }
 
-            mob.setInvulnerable(this.isInvulnerable());
-            if (keepEquipment) {
-                mob.setCanPickUpLoot(this.canPickUpLoot());
+            t0.setInvulnerable(this.isInvulnerable());
+            if (flag) {
+                t0.setCanPickUpLoot(this.canPickUpLoot());
+                EquipmentSlot[] aenumitemslot = EquipmentSlot.values();
+                int i = aenumitemslot.length;
 
-                for(EquipmentSlot equipmentSlot : EquipmentSlot.values()) {
-                    ItemStack itemStack = this.getItemBySlot(equipmentSlot);
-                    if (!itemStack.isEmpty()) {
-                        mob.setItemSlot(equipmentSlot, itemStack.copy());
-                        mob.setDropChance(equipmentSlot, this.getEquipmentDropChance(equipmentSlot));
-                        itemStack.setCount(0);
+                for (int j = 0; j < i; ++j) {
+                    EquipmentSlot enumitemslot = aenumitemslot[j];
+                    ItemStack itemstack = this.getItemBySlot(enumitemslot);
+
+                    if (!itemstack.isEmpty()) {
+                        t0.setItemSlot(enumitemslot, itemstack.copy());
+                        t0.setDropChance(enumitemslot, this.getEquipmentDropChance(enumitemslot));
+                        itemstack.setCount(0);
                     }
                 }
             }
 
-            this.level.addFreshEntity(mob);
+            // CraftBukkit start
+            if (CraftEventFactory.callEntityTransformEvent(this, t0, transformReason).isCancelled()) {
+                return null;
+            }
+            this.level.addEntity(t0, spawnReason);
+            // CraftBukkit end
             if (this.isPassenger()) {
                 Entity entity = this.getVehicle();
+
                 this.stopRiding();
-                mob.startRiding(entity, true);
+                t0.startRiding(entity, true);
             }
 
             this.discard();
-            return mob;
+            return t0;
         }
     }
 
@@ -1152,7 +1379,11 @@
 
         if (this.leashHolder != null) {
             if (!this.isAlive() || !this.leashHolder.isAlive()) {
-                this.dropLeash(true, true);
+                // Paper start - drop leash variable
+                EntityUnleashEvent event = new EntityUnleashEvent(this.getBukkitEntity(), (!this.isAlive()) ? UnleashReason.PLAYER_UNLEASH : UnleashReason.HOLDER_GONE, true);
+                this.level.getCraftServer().getPluginManager().callEvent(event); // CraftBukkit
+                this.dropLeash(true, event.isDropLeash());
+                // Paper end
             }
 
         }
@@ -1163,11 +1394,13 @@
             this.leashHolder = null;
             this.leashInfoTag = null;
             if (!this.level.isClientSide && dropItem) {
-                this.spawnAtLocation(Items.LEAD);
+                this.forceDrops = true; // CraftBukkit
+                this.spawnAtLocation((ItemLike) Items.LEAD);
+                this.forceDrops = false; // CraftBukkit
             }
 
             if (!this.level.isClientSide && sendPacket && this.level instanceof ServerLevel) {
-                ((ServerLevel)this.level).getChunkSource().broadcast(this, new ClientboundSetEntityLinkPacket(this, (Entity)null));
+                ((ServerLevel) this.level).getChunkSource().broadcast(this, new ClientboundSetEntityLinkPacket(this, (Entity) null));
             }
         }
 
@@ -1194,7 +1427,7 @@
         this.leashHolder = entity;
         this.leashInfoTag = null;
         if (!this.level.isClientSide && sendPacket && this.level instanceof ServerLevel) {
-            ((ServerLevel)this.level).getChunkSource().broadcast(this, new ClientboundSetEntityLinkPacket(this, this.leashHolder));
+            ((ServerLevel) this.level).getChunkSource().broadcast(this, new ClientboundSetEntityLinkPacket(this, this.leashHolder));
         }
 
         if (this.isPassenger()) {
@@ -1208,133 +1441,162 @@
         this.dropLeash(false, false);
     }
 
+    @Override
     public boolean startRiding(Entity entity, boolean force) {
-        boolean bl = super.startRiding(entity, force);
-        if (bl && this.isLeashed()) {
-            this.dropLeash(true, true);
+        boolean flag1 = super.startRiding(entity, force);
+
+        if (flag1 && this.isLeashed()) {
+            // Paper start - drop leash variable
+            EntityUnleashEvent event = new EntityUnleashEvent(this.getBukkitEntity(), UnleashReason.UNKNOWN, true);
+            this.level.getCraftServer().getPluginManager().callEvent(event); // CraftBukkit
+            this.dropLeash(true, event.isDropLeash());
+            // Paper end
         }
 
-        return bl;
+        return flag1;
     }
 
     private void restoreLeashFromSave() {
         if (this.leashInfoTag != null && this.level instanceof ServerLevel) {
             if (this.leashInfoTag.hasUUID("UUID")) {
-                UUID uUID = this.leashInfoTag.getUUID("UUID");
-                Entity entity = ((ServerLevel)this.level).getEntity(uUID);
+                UUID uuid = this.leashInfoTag.getUUID("UUID");
+                Entity entity = ((ServerLevel) this.level).getEntity(uuid);
+
                 if (entity != null) {
                     this.setLeashedTo(entity, true);
                     return;
                 }
             } else if (this.leashInfoTag.contains("X", 99) && this.leashInfoTag.contains("Y", 99) && this.leashInfoTag.contains("Z", 99)) {
-                BlockPos blockPos = new BlockPos(this.leashInfoTag.getInt("X"), this.leashInfoTag.getInt("Y"), this.leashInfoTag.getInt("Z"));
-                this.setLeashedTo(LeashFenceKnotEntity.getOrCreateKnot(this.level, blockPos), true);
+                BlockPos blockposition = new BlockPos(this.leashInfoTag.getInt("X"), this.leashInfoTag.getInt("Y"), this.leashInfoTag.getInt("Z"));
+
+                this.setLeashedTo(LeashFenceKnotEntity.getOrCreateKnot(this.level, blockposition), true);
                 return;
             }
 
             if (this.tickCount > 100) {
-                this.spawnAtLocation(Items.LEAD);
+                this.forceDrops = true; // Paper
+                this.spawnAtLocation((ItemLike) Items.LEAD);
+                this.forceDrops = false; // Paper
                 this.leashInfoTag = null;
             }
         }
 
     }
 
+    @Override
     public boolean isControlledByLocalInstance() {
         return this.canBeControlledByRider() && super.isControlledByLocalInstance();
     }
 
+    @Override
     public boolean isEffectiveAi() {
         return super.isEffectiveAi() && !this.isNoAi();
     }
 
     public void setNoAi(boolean aiDisabled) {
-        byte b = this.entityData.get(DATA_MOB_FLAGS_ID);
-        this.entityData.set(DATA_MOB_FLAGS_ID, aiDisabled ? (byte)(b | 1) : (byte)(b & -2));
+        byte b0 = (Byte) this.entityData.get(Mob.DATA_MOB_FLAGS_ID);
+
+        this.entityData.set(Mob.DATA_MOB_FLAGS_ID, aiDisabled ? (byte) (b0 | 1) : (byte) (b0 & -2));
     }
 
     public void setLeftHanded(boolean leftHanded) {
-        byte b = this.entityData.get(DATA_MOB_FLAGS_ID);
-        this.entityData.set(DATA_MOB_FLAGS_ID, leftHanded ? (byte)(b | 2) : (byte)(b & -3));
+        byte b0 = (Byte) this.entityData.get(Mob.DATA_MOB_FLAGS_ID);
+
+        this.entityData.set(Mob.DATA_MOB_FLAGS_ID, leftHanded ? (byte) (b0 | 2) : (byte) (b0 & -3));
     }
 
     public void setAggressive(boolean attacking) {
-        byte b = this.entityData.get(DATA_MOB_FLAGS_ID);
-        this.entityData.set(DATA_MOB_FLAGS_ID, attacking ? (byte)(b | 4) : (byte)(b & -5));
+        byte b0 = (Byte) this.entityData.get(Mob.DATA_MOB_FLAGS_ID);
+
+        this.entityData.set(Mob.DATA_MOB_FLAGS_ID, attacking ? (byte) (b0 | 4) : (byte) (b0 & -5));
     }
 
     public boolean isNoAi() {
-        return (this.entityData.get(DATA_MOB_FLAGS_ID) & 1) != 0;
+        return ((Byte) this.entityData.get(Mob.DATA_MOB_FLAGS_ID) & 1) != 0;
     }
 
     public boolean isLeftHanded() {
-        return (this.entityData.get(DATA_MOB_FLAGS_ID) & 2) != 0;
+        return ((Byte) this.entityData.get(Mob.DATA_MOB_FLAGS_ID) & 2) != 0;
     }
 
     public boolean isAggressive() {
-        return (this.entityData.get(DATA_MOB_FLAGS_ID) & 4) != 0;
+        return ((Byte) this.entityData.get(Mob.DATA_MOB_FLAGS_ID) & 4) != 0;
     }
 
-    public void setBaby(boolean baby) {
-    }
+    public void setBaby(boolean baby) {}
 
+    @Override
     public HumanoidArm getMainArm() {
         return this.isLeftHanded() ? HumanoidArm.LEFT : HumanoidArm.RIGHT;
     }
 
     public double getMeleeAttackRangeSqr(LivingEntity target) {
-        return (double)(this.getBbWidth() * 2.0F * this.getBbWidth() * 2.0F + target.getBbWidth());
+        return (double) (this.getBbWidth() * 2.0F * this.getBbWidth() * 2.0F + target.getBbWidth());
     }
 
+    @Override
     public boolean doHurtTarget(Entity target) {
-        float f = (float)this.getAttributeValue(Attributes.ATTACK_DAMAGE);
-        float g = (float)this.getAttributeValue(Attributes.ATTACK_KNOCKBACK);
+        float f = (float) this.getAttributeValue(Attributes.ATTACK_DAMAGE);
+        float f1 = (float) this.getAttributeValue(Attributes.ATTACK_KNOCKBACK);
+
         if (target instanceof LivingEntity) {
-            f += EnchantmentHelper.getDamageBonus(this.getMainHandItem(), ((LivingEntity)target).getMobType());
-            g += (float)EnchantmentHelper.getKnockbackBonus(this);
+            f += EnchantmentHelper.getDamageBonus(this.getMainHandItem(), ((LivingEntity) target).getMobType());
+            f1 += (float) EnchantmentHelper.getKnockbackBonus((LivingEntity) this);
         }
 
         int i = EnchantmentHelper.getFireAspect(this);
+
         if (i > 0) {
-            target.setSecondsOnFire(i * 4);
+            // CraftBukkit start - Call a combust event when somebody hits with a fire enchanted item
+            EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), target.getBukkitEntity(), i * 4);
+            org.bukkit.Bukkit.getPluginManager().callEvent(combustEvent);
+
+            if (!combustEvent.isCancelled()) {
+                target.setOnFire(combustEvent.getDuration(), false);
+            }
+            // CraftBukkit end
         }
 
-        boolean bl = target.hurt(DamageSource.mobAttack(this), f);
-        if (bl) {
-            if (g > 0.0F && target instanceof LivingEntity) {
-                ((LivingEntity)target).knockback((double)(g * 0.5F), (double)Mth.sin(this.getYRot() * ((float)Math.PI / 180F)), (double)(-Mth.cos(this.getYRot() * ((float)Math.PI / 180F))));
+        boolean flag = target.hurt(DamageSource.mobAttack(this), f);
+
+        if (flag) {
+            if (f1 > 0.0F && target instanceof LivingEntity) {
+                ((LivingEntity) target).knockback((double) (f1 * 0.5F), (double) Mth.sin(this.getYRot() * 0.017453292F), (double) (-Mth.cos(this.getYRot() * 0.017453292F)), this); // Paper
                 this.setDeltaMovement(this.getDeltaMovement().multiply(0.6D, 1.0D, 0.6D));
             }
 
             if (target instanceof Player) {
-                Player player = (Player)target;
-                this.maybeDisableShield(player, this.getMainHandItem(), player.isUsingItem() ? player.getUseItem() : ItemStack.EMPTY);
+                Player entityhuman = (Player) target;
+
+                this.maybeDisableShield(entityhuman, this.getMainHandItem(), entityhuman.isUsingItem() ? entityhuman.getUseItem() : ItemStack.EMPTY);
             }
 
-            this.doEnchantDamageEffects(this, target);
+            this.doEnchantDamageEffects((LivingEntity) this, target);
             this.setLastHurtMob(target);
         }
 
-        return bl;
+        return flag;
     }
 
     private void maybeDisableShield(Player player, ItemStack mobStack, ItemStack playerStack) {
         if (!mobStack.isEmpty() && !playerStack.isEmpty() && mobStack.getItem() instanceof AxeItem && playerStack.is(Items.SHIELD)) {
-            float f = 0.25F + (float)EnchantmentHelper.getBlockEfficiency(this) * 0.05F;
+            float f = 0.25F + (float) EnchantmentHelper.getBlockEfficiency(this) * 0.05F;
+
             if (this.random.nextFloat() < f) {
                 player.getCooldowns().addCooldown(Items.SHIELD, 100);
-                this.level.broadcastEntityEvent(player, (byte)30);
+                this.level.broadcastEntityEvent(player, (byte) 30);
             }
         }
 
     }
 
-    protected boolean isSunBurnTick() {
+    public boolean isSunBurnTick() {
         if (this.level.isDay() && !this.level.isClientSide) {
             float f = this.getBrightness();
-            BlockPos blockPos = new BlockPos(this.getX(), this.getEyeY(), this.getZ());
-            boolean bl = this.isInWaterRainOrBubble() || this.isInPowderSnow || this.wasInPowderSnow;
-            if (f > 0.5F && this.random.nextFloat() * 30.0F < (f - 0.4F) * 2.0F && !bl && this.level.canSeeSky(blockPos)) {
+            BlockPos blockposition = new BlockPos(this.getX(), this.getEyeY(), this.getZ());
+            boolean flag = this.isInWaterRainOrBubble() || this.isInPowderSnow || this.wasInPowderSnow;
+
+            if (f > 0.5F && this.random.nextFloat() * 30.0F < (f - 0.4F) * 2.0F && !flag && this.level.canSeeSky(blockposition)) {
                 return true;
             }
         }
@@ -1342,6 +1604,7 @@
         return false;
     }
 
+    @Override
     protected void jumpInLiquid(Tag<Fluid> fluid) {
         if (this.getNavigation().canFloat()) {
             super.jumpInLiquid(fluid);
@@ -1356,17 +1619,24 @@
         this.getBrain().removeAllBehaviors();
     }
 
+    @Override
     protected void removeAfterChangingDimensions() {
         super.removeAfterChangingDimensions();
-        this.dropLeash(true, false);
-        this.getAllSlots().forEach((stack) -> {
-            stack.setCount(0);
+        // Paper start - drop leash variable
+        EntityUnleashEvent event = new EntityUnleashEvent(this.getBukkitEntity(), UnleashReason.UNKNOWN, false);
+        this.level.getCraftServer().getPluginManager().callEvent(event); // CraftBukkit
+        this.dropLeash(true, event.isDropLeash());
+        // Paper end
+        this.getAllSlots().forEach((itemstack) -> {
+            if (!itemstack.isEmpty()) itemstack.setCount(0); // CraftBukkit
         });
     }
 
     @Nullable
+    @Override
     public ItemStack getPickResult() {
-        SpawnEggItem spawnEggItem = SpawnEggItem.byId(this.getType());
-        return spawnEggItem == null ? null : new ItemStack(spawnEggItem);
+        SpawnEggItem itemmonsteregg = SpawnEggItem.byId(this.getType());
+
+        return itemmonsteregg == null ? null : new ItemStack(itemmonsteregg);
     }
 }
