--- a/net/minecraft/world/level/entity/EntitySectionStorage.java
+++ b/net/minecraft/world/level/entity/EntitySectionStorage.java
@@ -105,7 +105,7 @@
 
     public LongSet getAllChunksWithExistingSections() {
         LongSet longSet = new LongOpenHashSet();
-        this.sections.keySet().forEach((sectionPos) -> {
+        this.sections.keySet().forEach((java.util.function.LongConsumer) (sectionPos) -> { // Paper - decompile fix
             longSet.add(getChunkKeyFromSectionKey(sectionPos));
         });
         return longSet;
@@ -118,13 +118,20 @@
     }
 
     public void getEntities(AABB box, Consumer<T> action) {
+        // Paper start
+        this.getEntities(box, action, false);
+    }
+    public void getEntities(AABB box, Consumer<T> action, boolean isContainerSearch) {
+        // Paper end
         this.forEachAccessibleSection(box, (entitySection) -> {
+            if (isContainerSearch && entitySection.inventoryEntityCount <= 0) return; // Paper
             entitySection.getEntities(createBoundingBoxCheck(box), action);
         });
     }
 
     public <U extends T> void getEntities(EntityTypeTest<T, U> filter, AABB box, Consumer<U> action) {
         this.forEachAccessibleSection(box, (entitySection) -> {
+            if (filter.getBaseClass() == net.minecraft.world.entity.item.ItemEntity.class && entitySection.itemCount <= 0) return; // Paper
             entitySection.getEntities(filter, createBoundingBoxCheck(box), action);
         });
     }
