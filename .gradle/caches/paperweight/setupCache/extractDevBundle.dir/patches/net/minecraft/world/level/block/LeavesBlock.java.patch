--- a/net/minecraft/world/level/block/LeavesBlock.java
+++ b/net/minecraft/world/level/block/LeavesBlock.java
@@ -3,9 +3,11 @@
 import java.util.Random;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
+import net.minecraft.core.Vec3i;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.tags.BlockTags;
+import net.minecraft.tags.Tag;
 import net.minecraft.world.item.context.BlockPlaceContext;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.Level;
@@ -18,8 +20,10 @@
 import net.minecraft.world.level.block.state.properties.IntegerProperty;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import org.bukkit.event.block.LeavesDecayEvent; // CraftBukkit
 
 public class LeavesBlock extends Block {
+
     public static final int DECAY_DISTANCE = 7;
     public static final IntegerProperty DISTANCE = BlockStateProperties.DISTANCE;
     public static final BooleanProperty PERSISTENT = BlockStateProperties.PERSISTENT;
@@ -27,36 +31,51 @@
 
     public LeavesBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState(this.stateDefinition.any().setValue(DISTANCE, Integer.valueOf(7)).setValue(PERSISTENT, Boolean.valueOf(false)));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(LeavesBlock.DISTANCE, 7)).setValue(LeavesBlock.PERSISTENT, false));
     }
 
+    @Override
     public VoxelShape getBlockSupportShape(BlockState state, BlockGetter world, BlockPos pos) {
         return Shapes.empty();
     }
 
+    @Override
     public boolean isRandomlyTicking(BlockState state) {
-        return state.getValue(DISTANCE) == 7 && !state.getValue(PERSISTENT);
+        return (Integer) state.getValue(LeavesBlock.DISTANCE) == 7 && !(Boolean) state.getValue(LeavesBlock.PERSISTENT);
     }
 
+    @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, Random random) {
-        if (!state.getValue(PERSISTENT) && state.getValue(DISTANCE) == 7) {
-            dropResources(state, world, pos);
+        if (!(Boolean) state.getValue(LeavesBlock.PERSISTENT) && (Integer) state.getValue(LeavesBlock.DISTANCE) == 7) {
+            // CraftBukkit start
+            LeavesDecayEvent event = new LeavesDecayEvent(world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()));
+            world.getCraftServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled() || world.getBlockState(pos).getBlock() != this) {
+                return;
+            }
+            // CraftBukkit end
+            dropResources(state, (Level) world, pos);
             world.removeBlock(pos, false);
         }
 
     }
 
+    @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, Random random) {
-        world.setBlock(pos, updateDistance(state, world, pos), 3);
+        world.setBlock(pos, LeavesBlock.updateDistance(state, (LevelAccessor) world, pos), 3);
     }
 
+    @Override
     public int getLightBlock(BlockState state, BlockGetter world, BlockPos pos) {
         return 1;
     }
 
+    @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        int i = getDistanceAt(neighborState) + 1;
-        if (i != 1 || state.getValue(DISTANCE) != i) {
+        int i = LeavesBlock.getDistanceAt(neighborState) + 1;
+
+        if (i != 1 || (Integer) state.getValue(LeavesBlock.DISTANCE) != i) {
             world.getBlockTicks().scheduleTick(pos, this, 1);
         }
 
@@ -65,47 +84,52 @@
 
     private static BlockState updateDistance(BlockState state, LevelAccessor world, BlockPos pos) {
         int i = 7;
-        BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos();
+        BlockPos.MutableBlockPos blockposition_mutableblockposition = new BlockPos.MutableBlockPos();
+        Direction[] aenumdirection = Direction.values();
+        int j = aenumdirection.length;
 
-        for(Direction direction : Direction.values()) {
-            mutableBlockPos.setWithOffset(pos, direction);
-            i = Math.min(i, getDistanceAt(world.getBlockState(mutableBlockPos)) + 1);
+        for (int k = 0; k < j; ++k) {
+            Direction enumdirection = aenumdirection[k];
+
+            blockposition_mutableblockposition.setWithOffset((Vec3i) pos, enumdirection);
+            i = Math.min(i, LeavesBlock.getDistanceAt(world.getBlockState(blockposition_mutableblockposition)) + 1);
             if (i == 1) {
                 break;
             }
         }
 
-        return state.setValue(DISTANCE, Integer.valueOf(i));
+        return (BlockState) state.setValue(LeavesBlock.DISTANCE, i);
     }
 
     private static int getDistanceAt(BlockState state) {
-        if (state.is(BlockTags.LOGS)) {
-            return 0;
-        } else {
-            return state.getBlock() instanceof LeavesBlock ? state.getValue(DISTANCE) : 7;
-        }
+        return state.is((Tag) BlockTags.LOGS) ? 0 : (state.getBlock() instanceof LeavesBlock ? (Integer) state.getValue(LeavesBlock.DISTANCE) : 7);
     }
 
+    @Override
     public void animateTick(BlockState state, Level world, BlockPos pos, Random random) {
         if (world.isRainingAt(pos.above())) {
             if (random.nextInt(15) == 1) {
-                BlockPos blockPos = pos.below();
-                BlockState blockState = world.getBlockState(blockPos);
-                if (!blockState.canOcclude() || !blockState.isFaceSturdy(world, blockPos, Direction.UP)) {
-                    double d = (double)pos.getX() + random.nextDouble();
-                    double e = (double)pos.getY() - 0.05D;
-                    double f = (double)pos.getZ() + random.nextDouble();
-                    world.addParticle(ParticleTypes.DRIPPING_WATER, d, e, f, 0.0D, 0.0D, 0.0D);
+                BlockPos blockposition1 = pos.below();
+                BlockState iblockdata1 = world.getBlockState(blockposition1);
+
+                if (!iblockdata1.canOcclude() || !iblockdata1.isFaceSturdy(world, blockposition1, Direction.UP)) {
+                    double d0 = (double) pos.getX() + random.nextDouble();
+                    double d1 = (double) pos.getY() - 0.05D;
+                    double d2 = (double) pos.getZ() + random.nextDouble();
+
+                    world.addParticle(ParticleTypes.DRIPPING_WATER, d0, d1, d2, 0.0D, 0.0D, 0.0D);
                 }
             }
         }
     }
 
+    @Override
     protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
-        builder.add(DISTANCE, PERSISTENT);
+        builder.add(LeavesBlock.DISTANCE, LeavesBlock.PERSISTENT);
     }
 
+    @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
-        return updateDistance(this.defaultBlockState().setValue(PERSISTENT, Boolean.valueOf(true)), ctx.getLevel(), ctx.getClickedPos());
+        return LeavesBlock.updateDistance((BlockState) this.defaultBlockState().setValue(LeavesBlock.PERSISTENT, true), (LevelAccessor) ctx.getLevel(), ctx.getClickedPos());
     }
 }
