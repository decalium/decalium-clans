--- a/net/minecraft/world/entity/ai/navigation/FlyingPathNavigation.java
+++ b/net/minecraft/world/entity/ai/navigation/FlyingPathNavigation.java
@@ -16,24 +16,29 @@
         super(mob, world);
     }
 
+    @Override
     protected PathFinder createPathFinder(int range) {
         this.nodeEvaluator = new FlyNodeEvaluator();
         this.nodeEvaluator.setCanPassDoors(true);
         return new PathFinder(this.nodeEvaluator, range);
     }
 
+    @Override
     protected boolean canUpdatePath() {
         return this.canFloat() && this.isInLiquid() || !this.mob.isPassenger();
     }
 
+    @Override
     protected Vec3 getTempMobPos() {
         return this.mob.position();
     }
 
+    @Override
     public Path createPath(Entity entity, int distance) {
-        return this.createPath(entity.blockPosition(), distance);
+        return this.a(entity.blockPosition(), entity, distance); // Paper - Forward target entity
     }
 
+    @Override
     public void tick() {
         ++this.tick;
         if (this.hasDelayedRecomputation) {
@@ -58,6 +63,7 @@
         }
     }
 
+    @Override
     protected boolean canMoveDirectly(Vec3 origin, Vec3 target, int sizeX, int sizeY, int sizeZ) {
         int i = Mth.floor(origin.x);
         int j = Mth.floor(origin.y);
@@ -140,6 +146,7 @@
         return this.nodeEvaluator.canPassDoors();
     }
 
+    @Override
     public boolean isStableDestination(BlockPos pos) {
         return this.level.getBlockState(pos).entityCanStandOn(this.level, pos, this.mob);
     }
