--- a/net/minecraft/nbt/ListTag.java
+++ b/net/minecraft/nbt/ListTag.java
@@ -2,15 +2,20 @@
 
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
+import it.unimi.dsi.fastutil.bytes.ByteOpenHashSet;
+import it.unimi.dsi.fastutil.bytes.ByteSet;
+
 import java.io.DataInput;
 import java.io.DataOutput;
 import java.io.IOException;
+import java.util.Arrays;
 import java.util.List;
 import java.util.Objects;
 
 public class ListTag extends CollectionTag<Tag> {
     private static final int SELF_SIZE_IN_BITS = 296;
     public static final TagType<ListTag> TYPE = new TagType<ListTag>() {
+        @Override
         public ListTag load(DataInput dataInput, int i, NbtAccounter nbtAccounter) throws IOException {
             nbtAccounter.accountBits(296L);
             if (i > 512) {
@@ -34,14 +39,17 @@
             }
         }
 
+        @Override
         public String getName() {
             return "LIST";
         }
 
+        @Override
         public String getPrettyName() {
             return "TAG_List";
         }
     };
+    private static final ByteSet INLINE_ELEMENT_TYPES = new ByteOpenHashSet(Arrays.asList((byte) 1, (byte) 2, (byte) 3, (byte) 4, (byte) 5, (byte) 6)); // Paper - decompiler fix
     private final List<Tag> list;
     private byte type;
 
@@ -54,6 +62,7 @@
         this(Lists.newArrayList(), (byte)0);
     }
 
+    @Override
     public void write(DataOutput output) throws IOException {
         if (this.list.isEmpty()) {
             this.type = 0;
@@ -70,14 +79,17 @@
 
     }
 
+    @Override
     public byte getId() {
         return 9;
     }
 
+    @Override
     public TagType<ListTag> getType() {
         return TYPE;
     }
 
+    @Override
     public String toString() {
         return this.getAsString();
     }
@@ -89,12 +101,14 @@
 
     }
 
+    @Override
     public Tag remove(int i) {
         Tag tag = this.list.remove(i);
         this.updateTypeAfterRemove();
         return tag;
     }
 
+    @Override
     public boolean isEmpty() {
         return this.list.isEmpty();
     }
@@ -196,14 +210,17 @@
         }
     }
 
+    @Override
     public int size() {
         return this.list.size();
     }
 
+    @Override
     public Tag get(int i) {
         return this.list.get(i);
     }
 
+    @Override
     public Tag set(int i, Tag tag) {
         Tag tag2 = this.get(i);
         if (!this.setTag(i, tag)) {
@@ -213,12 +230,14 @@
         }
     }
 
+    @Override
     public void add(int i, Tag tag) {
         if (!this.addTag(i, tag)) {
             throw new UnsupportedOperationException(String.format("Trying to add tag of type %d to list of %d", tag.getId(), this.type));
         }
     }
 
+    @Override
     public boolean setTag(int index, Tag element) {
         if (this.updateType(element)) {
             this.list.set(index, element);
@@ -228,6 +247,7 @@
         }
     }
 
+    @Override
     public boolean addTag(int index, Tag element) {
         if (this.updateType(element)) {
             this.list.add(index, element);
@@ -248,12 +268,14 @@
         }
     }
 
+    @Override
     public ListTag copy() {
         Iterable<Tag> iterable = (Iterable<Tag>)(TagTypes.getType(this.type).isValue() ? this.list : Iterables.transform(this.list, Tag::copy));
         List<Tag> list = Lists.newArrayList(iterable);
         return new ListTag(list, this.type);
     }
 
+    @Override
     public boolean equals(Object object) {
         if (this == object) {
             return true;
@@ -262,18 +284,22 @@
         }
     }
 
+    @Override
     public int hashCode() {
         return this.list.hashCode();
     }
 
+    @Override
     public void accept(TagVisitor visitor) {
         visitor.visitList(this);
     }
 
+    @Override
     public byte getElementType() {
         return this.type;
     }
 
+    @Override
     public void clear() {
         this.list.clear();
         this.type = 0;
