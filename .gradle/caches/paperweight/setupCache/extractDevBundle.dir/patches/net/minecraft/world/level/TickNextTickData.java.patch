--- a/net/minecraft/world/level/TickNextTickData.java
+++ b/net/minecraft/world/level/TickNextTickData.java
@@ -4,25 +4,29 @@
 import net.minecraft.core.BlockPos;
 
 public class TickNextTickData<T> {
-    private static long counter;
+    private static final java.util.concurrent.atomic.AtomicLong COUNTER = new java.util.concurrent.atomic.AtomicLong(); // Paper - async chunk loading
     private final T type;
     public final BlockPos pos;
     public final long triggerTick;
     public final TickPriority priority;
-    private final long c;
+    private final long c; @Deprecated public final long getId() { return this.c; } // Paper - OBFHELPER
+    private final int hash; // Paper
+    public int tickState; // Paper
 
     public TickNextTickData(BlockPos pos, T t) {
         this(pos, t, 0L, TickPriority.NORMAL);
     }
 
     public TickNextTickData(BlockPos pos, T t, long time, TickPriority priority) {
-        this.c = (long)(counter++);
+        this.c =  (TickNextTickData.COUNTER.getAndIncrement()); // Paper - async chunk loading
         this.pos = pos.immutable();
         this.type = t;
         this.triggerTick = time;
         this.priority = priority;
+        this.hash = this.computeHash(); // Paper
     }
 
+    @Override
     public boolean equals(Object object) {
         if (!(object instanceof TickNextTickData)) {
             return false;
@@ -32,20 +36,32 @@
         }
     }
 
+    @Override
     public int hashCode() {
+        // Paper start - optimize hashcode
+        return this.hash;
+    }
+    public final int computeHash() {
+        // Paper end - optimize hashcode
         return this.pos.hashCode();
     }
 
     public static <T> Comparator<TickNextTickData<T>> createTimeComparator() {
-        return Comparator.comparingLong((tickNextTickData) -> {
-            return tickNextTickData.triggerTick;
-        }).thenComparing((tickNextTickData) -> {
-            return tickNextTickData.priority;
-        }).thenComparingLong((tickNextTickData) -> {
-            return tickNextTickData.c;
-        });
+        // Paper start - let's not use more functional code for no reason.
+        return (Comparator) (Comparator<TickNextTickData>) (TickNextTickData nextticklistentry, TickNextTickData nextticklistentry1) -> {
+            int i = Long.compare(nextticklistentry.triggerTick, nextticklistentry1.triggerTick);
+
+            if (i != 0) {
+                return i;
+            } else {
+                i = nextticklistentry.priority.compareTo(nextticklistentry1.priority);
+                return i != 0 ? i : Long.compare(nextticklistentry.getId(), nextticklistentry1.getId());
+            }
+        };
+        // Paper end - let's not use more functional code for no reason.
     }
 
+    @Override
     public String toString() {
         return this.type + ": " + this.pos + ", " + this.triggerTick + ", " + this.priority + ", " + this.c;
     }
