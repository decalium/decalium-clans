--- a/net/minecraft/world/level/levelgen/WorldGenSettings.java
+++ b/net/minecraft/world/level/levelgen/WorldGenSettings.java
@@ -10,19 +10,18 @@
 import com.mojang.serialization.JsonOps;
 import com.mojang.serialization.Lifecycle;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
+import java.util.Iterator;
 import java.util.Locale;
+import java.util.Map.Entry;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.OptionalLong;
 import java.util.Properties;
 import java.util.Random;
-import java.util.Map.Entry;
 import java.util.function.Function;
 import java.util.function.Supplier;
-import net.minecraft.core.MappedRegistry;
-import net.minecraft.core.Registry;
-import net.minecraft.core.RegistryAccess;
 import net.minecraft.resources.ResourceKey;
+import net.minecraft.server.packs.resources.ResourceManager;
 import net.minecraft.util.GsonHelper;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.biome.Biome;
@@ -33,11 +32,17 @@
 import net.minecraft.world.level.levelgen.flat.FlatLevelGeneratorSettings;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import net.minecraft.core.MappedRegistry;
+import net.minecraft.core.Registry;
+import net.minecraft.core.RegistryAccess;
+// CraftBukkit start
+import net.minecraft.resources.RegistryReadOps;
 
 public class WorldGenSettings {
-    public static final Codec<WorldGenSettings> CODEC = RecordCodecBuilder.create((instance) -> {
-        return instance.group(Codec.LONG.fieldOf("seed").stable().forGetter(WorldGenSettings::seed), Codec.BOOL.fieldOf("generate_features").orElse(true).stable().forGetter(WorldGenSettings::generateFeatures), Codec.BOOL.fieldOf("bonus_chest").orElse(false).stable().forGetter(WorldGenSettings::generateBonusChest), MappedRegistry.dataPackCodec(Registry.LEVEL_STEM_REGISTRY, Lifecycle.stable(), LevelStem.CODEC).xmap(LevelStem::sortMap, Function.identity()).fieldOf("dimensions").forGetter(WorldGenSettings::dimensions), Codec.STRING.optionalFieldOf("legacy_custom_options").stable().forGetter((worldGenSettings) -> {
-            return worldGenSettings.legacyCustomOptions;
+
+    public static final Codec<WorldGenSettings> CODEC = RecordCodecBuilder.<WorldGenSettings>create((instance) -> { // CraftBukkit - decompile error
+        return instance.group(Codec.LONG.fieldOf("seed").stable().forGetter(WorldGenSettings::seed), Codec.BOOL.fieldOf("generate_features").orElse(true).stable().forGetter(WorldGenSettings::generateFeatures), Codec.BOOL.fieldOf("bonus_chest").orElse(false).stable().forGetter(WorldGenSettings::generateBonusChest), MappedRegistry.dataPackCodec(Registry.LEVEL_STEM_REGISTRY, Lifecycle.stable(), LevelStem.CODEC).xmap(LevelStem::sortMap, Function.identity()).fieldOf("dimensions").forGetter(WorldGenSettings::dimensions), Codec.STRING.optionalFieldOf("legacy_custom_options").stable().forGetter((generatorsettings) -> {
+            return generatorsettings.legacyCustomOptions;
         })).apply(instance, instance.stable(WorldGenSettings::new));
     }).comapFlatMap(WorldGenSettings::guardExperimental, Function.identity());
     private static final Logger LOGGER = LogManager.getLogger();
@@ -48,12 +53,9 @@
     private final Optional<String> legacyCustomOptions;
 
     private DataResult<WorldGenSettings> guardExperimental() {
-        LevelStem levelStem = this.dimensions.get(LevelStem.OVERWORLD);
-        if (levelStem == null) {
-            return DataResult.error("Overworld settings missing");
-        } else {
-            return this.stable() ? DataResult.success(this, Lifecycle.stable()) : DataResult.success(this);
-        }
+        LevelStem worlddimension = (LevelStem) this.dimensions.get(LevelStem.OVERWORLD);
+
+        return worlddimension == null ? DataResult.error("Overworld settings missing") : (this.stable() ? DataResult.success(this, Lifecycle.stable()) : DataResult.success(this));
     }
 
     private boolean stable() {
@@ -62,8 +64,9 @@
 
     public WorldGenSettings(long seed, boolean generateStructures, boolean bonusChest, MappedRegistry<LevelStem> options) {
         this(seed, generateStructures, bonusChest, options, Optional.empty());
-        LevelStem levelStem = options.get(LevelStem.OVERWORLD);
-        if (levelStem == null) {
+        LevelStem worlddimension = (LevelStem) options.get(LevelStem.OVERWORLD);
+
+        if (worlddimension == null) {
             throw new IllegalStateException("Overworld settings missing");
         }
     }
@@ -77,21 +80,23 @@
     }
 
     public static WorldGenSettings demoSettings(RegistryAccess registryManager) {
-        Registry<Biome> registry = registryManager.registryOrThrow(Registry.BIOME_REGISTRY);
+        Registry<Biome> iregistry = registryManager.registryOrThrow(Registry.BIOME_REGISTRY);
         int i = "North Carolina".hashCode();
-        Registry<DimensionType> registry2 = registryManager.registryOrThrow(Registry.DIMENSION_TYPE_REGISTRY);
-        Registry<NoiseGeneratorSettings> registry3 = registryManager.registryOrThrow(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY);
-        return new WorldGenSettings((long)i, true, true, withOverworld(registry2, DimensionType.defaultDimensions(registry2, registry, registry3, (long)i), makeDefaultOverworld(registry, registry3, (long)i)));
+        Registry<DimensionType> iregistry1 = registryManager.registryOrThrow(Registry.DIMENSION_TYPE_REGISTRY);
+        Registry<NoiseGeneratorSettings> iregistry2 = registryManager.registryOrThrow(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY);
+
+        return new WorldGenSettings((long) i, true, true, WorldGenSettings.withOverworld(iregistry1, DimensionType.defaultDimensions(iregistry1, iregistry, iregistry2, (long) i), (ChunkGenerator) WorldGenSettings.makeDefaultOverworld(iregistry, iregistry2, (long) i)));
     }
 
-    public static WorldGenSettings makeDefault(Registry<DimensionType> registry, Registry<Biome> registry2, Registry<NoiseGeneratorSettings> registry3) {
-        long l = (new Random()).nextLong();
-        return new WorldGenSettings(l, true, false, withOverworld(registry, DimensionType.defaultDimensions(registry, registry2, registry3, l), makeDefaultOverworld(registry2, registry3, l)));
+    public static WorldGenSettings makeDefault(Registry<DimensionType> iregistry, Registry<Biome> iregistry1, Registry<NoiseGeneratorSettings> iregistry2) {
+        long i = (new Random()).nextLong();
+
+        return new WorldGenSettings(i, true, false, WorldGenSettings.withOverworld(iregistry, DimensionType.defaultDimensions(iregistry, iregistry1, iregistry2, i), (ChunkGenerator) WorldGenSettings.makeDefaultOverworld(iregistry1, iregistry2, i)));
     }
 
     public static NoiseBasedChunkGenerator makeDefaultOverworld(Registry<Biome> biomeRegistry, Registry<NoiseGeneratorSettings> chunkGeneratorSettingsRegistry, long seed) {
         return new NoiseBasedChunkGenerator(new OverworldBiomeSource(seed, false, false, biomeRegistry), seed, () -> {
-            return chunkGeneratorSettingsRegistry.getOrThrow(NoiseGeneratorSettings.OVERWORLD);
+            return (NoiseGeneratorSettings) chunkGeneratorSettingsRegistry.getOrThrow(NoiseGeneratorSettings.OVERWORLD);
         });
     }
 
@@ -108,25 +113,30 @@
     }
 
     public static MappedRegistry<LevelStem> withOverworld(Registry<DimensionType> dimensionTypeRegistry, MappedRegistry<LevelStem> optionsRegistry, ChunkGenerator overworldGenerator) {
-        LevelStem levelStem = optionsRegistry.get(LevelStem.OVERWORLD);
+        LevelStem worlddimension = (LevelStem) optionsRegistry.get(LevelStem.OVERWORLD);
         Supplier<DimensionType> supplier = () -> {
-            return levelStem == null ? dimensionTypeRegistry.getOrThrow(DimensionType.OVERWORLD_LOCATION) : levelStem.type();
+            return worlddimension == null ? (DimensionType) dimensionTypeRegistry.getOrThrow(DimensionType.OVERWORLD_LOCATION) : worlddimension.type();
         };
-        return withOverworld(optionsRegistry, supplier, overworldGenerator);
+
+        return WorldGenSettings.withOverworld(optionsRegistry, supplier, overworldGenerator);
     }
 
     public static MappedRegistry<LevelStem> withOverworld(MappedRegistry<LevelStem> optionsRegistry, Supplier<DimensionType> overworldDimensionType, ChunkGenerator overworldGenerator) {
-        MappedRegistry<LevelStem> mappedRegistry = new MappedRegistry<>(Registry.LEVEL_STEM_REGISTRY, Lifecycle.experimental());
-        mappedRegistry.register(LevelStem.OVERWORLD, new LevelStem(overworldDimensionType, overworldGenerator), Lifecycle.stable());
+        MappedRegistry<LevelStem> registrymaterials1 = new MappedRegistry<>(Registry.LEVEL_STEM_REGISTRY, Lifecycle.experimental());
 
-        for(Entry<ResourceKey<LevelStem>, LevelStem> entry : optionsRegistry.entrySet()) {
-            ResourceKey<LevelStem> resourceKey = entry.getKey();
-            if (resourceKey != LevelStem.OVERWORLD) {
-                mappedRegistry.register(resourceKey, entry.getValue(), optionsRegistry.lifecycle(entry.getValue()));
+        registrymaterials1.register(LevelStem.OVERWORLD, (new LevelStem(overworldDimensionType, overworldGenerator)), Lifecycle.stable()); // CraftBukkit - decompile error
+        Iterator iterator = optionsRegistry.entrySet().iterator();
+
+        while (iterator.hasNext()) {
+            Entry<ResourceKey<LevelStem>, LevelStem> entry = (Entry) iterator.next();
+            ResourceKey<LevelStem> resourcekey = (ResourceKey) entry.getKey();
+
+            if (resourcekey != LevelStem.OVERWORLD) {
+                registrymaterials1.register(resourcekey, ((LevelStem) entry.getValue()), optionsRegistry.lifecycle(((LevelStem) entry.getValue()))); // CraftBukkit - decompile error
             }
         }
 
-        return mappedRegistry;
+        return registrymaterials1;
     }
 
     public MappedRegistry<LevelStem> dimensions() {
@@ -134,17 +144,18 @@
     }
 
     public ChunkGenerator overworld() {
-        LevelStem levelStem = this.dimensions.get(LevelStem.OVERWORLD);
-        if (levelStem == null) {
+        LevelStem worlddimension = (LevelStem) this.dimensions.get(LevelStem.OVERWORLD);
+
+        if (worlddimension == null) {
             throw new IllegalStateException("Overworld settings missing");
         } else {
-            return levelStem.generator();
+            return worlddimension.generator();
         }
     }
 
     public ImmutableSet<ResourceKey<Level>> levels() {
-        return this.dimensions().entrySet().stream().map((entry) -> {
-            return ResourceKey.create(Registry.DIMENSION_REGISTRY, entry.getKey().location());
+        return (ImmutableSet) this.dimensions().entrySet().stream().map((entry) -> {
+            return ResourceKey.create(Registry.DIMENSION_REGISTRY, ((ResourceKey) entry.getKey()).location());
         }).collect(ImmutableSet.toImmutableSet());
     }
 
@@ -173,78 +184,117 @@
     }
 
     public static WorldGenSettings create(RegistryAccess registryManager, Properties properties) {
-        String string = MoreObjects.firstNonNull((String)properties.get("generator-settings"), "");
-        properties.put("generator-settings", string);
-        String string2 = MoreObjects.firstNonNull((String)properties.get("level-seed"), "");
-        properties.put("level-seed", string2);
-        String string3 = (String)properties.get("generate-structures");
-        boolean bl = string3 == null || Boolean.parseBoolean(string3);
-        properties.put("generate-structures", Objects.toString(bl));
-        String string4 = (String)properties.get("level-type");
-        String string5 = Optional.ofNullable(string4).map((stringx) -> {
-            return stringx.toLowerCase(Locale.ROOT);
+        String s = (String) MoreObjects.firstNonNull((String) properties.get("generator-settings"), "");
+
+        properties.put("generator-settings", s);
+        String s1 = (String) MoreObjects.firstNonNull((String) properties.get("level-seed"), "");
+
+        properties.put("level-seed", s1);
+        String s2 = (String) properties.get("generate-structures");
+        boolean flag = s2 == null || Boolean.parseBoolean(s2);
+
+        properties.put("generate-structures", Objects.toString(flag));
+        String s3 = (String) properties.get("level-type");
+        String s4 = (String) Optional.ofNullable(s3).map((s5) -> {
+            return s5.toLowerCase(Locale.ROOT);
         }).orElse("default");
-        properties.put("level-type", string5);
-        long l = (new Random()).nextLong();
-        if (!string2.isEmpty()) {
+
+        properties.put("level-type", s4);
+        long i = (new Random()).nextLong();
+
+        if (!s1.isEmpty()) {
             try {
-                long m = Long.parseLong(string2);
-                if (m != 0L) {
-                    l = m;
+                long j = Long.parseLong(s1);
+
+                if (j != 0L) {
+                    i = j;
                 }
-            } catch (NumberFormatException var18) {
-                l = (long)string2.hashCode();
+            } catch (NumberFormatException numberformatexception) {
+                i = (long) s1.hashCode();
             }
         }
 
-        Registry<DimensionType> registry = registryManager.registryOrThrow(Registry.DIMENSION_TYPE_REGISTRY);
-        Registry<Biome> registry2 = registryManager.registryOrThrow(Registry.BIOME_REGISTRY);
-        Registry<NoiseGeneratorSettings> registry3 = registryManager.registryOrThrow(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY);
-        MappedRegistry<LevelStem> mappedRegistry = DimensionType.defaultDimensions(registry, registry2, registry3, l);
-        switch(string5) {
-        case "flat":
-            JsonObject jsonObject = !string.isEmpty() ? GsonHelper.parse(string) : new JsonObject();
-            Dynamic<JsonElement> dynamic = new Dynamic<>(JsonOps.INSTANCE, jsonObject);
-            return new WorldGenSettings(l, bl, false, withOverworld(registry, mappedRegistry, new FlatLevelSource(FlatLevelGeneratorSettings.CODEC.parse(dynamic).resultOrPartial(LOGGER::error).orElseGet(() -> {
-                return FlatLevelGeneratorSettings.getDefault(registry2);
-            }))));
-        case "debug_all_block_states":
-            return new WorldGenSettings(l, bl, false, withOverworld(registry, mappedRegistry, new DebugLevelSource(registry2)));
-        case "amplified":
-            return new WorldGenSettings(l, bl, false, withOverworld(registry, mappedRegistry, new NoiseBasedChunkGenerator(new OverworldBiomeSource(l, false, false, registry2), l, () -> {
-                return registry3.getOrThrow(NoiseGeneratorSettings.AMPLIFIED);
-            })));
-        case "largebiomes":
-            return new WorldGenSettings(l, bl, false, withOverworld(registry, mappedRegistry, new NoiseBasedChunkGenerator(new OverworldBiomeSource(l, false, true, registry2), l, () -> {
-                return registry3.getOrThrow(NoiseGeneratorSettings.OVERWORLD);
-            })));
-        default:
-            return new WorldGenSettings(l, bl, false, withOverworld(registry, mappedRegistry, makeDefaultOverworld(registry2, registry3, l)));
+        Registry<DimensionType> iregistry = registryManager.registryOrThrow(Registry.DIMENSION_TYPE_REGISTRY);
+        Registry<Biome> iregistry1 = registryManager.registryOrThrow(Registry.BIOME_REGISTRY);
+        Registry<NoiseGeneratorSettings> iregistry2 = registryManager.registryOrThrow(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY);
+        MappedRegistry<LevelStem> registrymaterials = DimensionType.defaultDimensions(iregistry, iregistry1, iregistry2, i);
+        byte b0 = -1;
+
+        switch (s4.hashCode()) {
+            case -1100099890:
+                if (s4.equals("largebiomes")) {
+                    b0 = 3;
+                }
+                break;
+            case 3145593:
+                if (s4.equals("flat")) {
+                    b0 = 0;
+                }
+                break;
+            case 1045526590:
+                if (s4.equals("debug_all_block_states")) {
+                    b0 = 1;
+                }
+                break;
+            case 1271599715:
+                if (s4.equals("amplified")) {
+                    b0 = 2;
+                }
+        }
+
+        switch (b0) {
+            case 0:
+                JsonObject jsonobject = !s.isEmpty() ? GsonHelper.parse(s) : new JsonObject();
+                Dynamic<JsonElement> dynamic = new Dynamic(RegistryReadOps.createAndLoad(JsonOps.INSTANCE, ResourceManager.Empty.INSTANCE, (RegistryAccess.RegistryHolder) registryManager), jsonobject); // CraftBukkit - SPIGOT-6237
+                DataResult dataresult = FlatLevelGeneratorSettings.CODEC.parse(dynamic);
+                Logger logger = WorldGenSettings.LOGGER;
+
+                Objects.requireNonNull(logger);
+                return new WorldGenSettings(i, flag, false, WorldGenSettings.withOverworld(iregistry, registrymaterials, (ChunkGenerator) (new FlatLevelSource((FlatLevelGeneratorSettings) dataresult.resultOrPartial(logger::error).orElseGet(() -> {
+                    return FlatLevelGeneratorSettings.getDefault(iregistry1);
+                })))));
+            case 1:
+                return new WorldGenSettings(i, flag, false, WorldGenSettings.withOverworld(iregistry, registrymaterials, (ChunkGenerator) (new DebugLevelSource(iregistry1))));
+            case 2:
+                return new WorldGenSettings(i, flag, false, WorldGenSettings.withOverworld(iregistry, registrymaterials, (ChunkGenerator) (new NoiseBasedChunkGenerator(new OverworldBiomeSource(i, false, false, iregistry1), i, () -> {
+                    return (NoiseGeneratorSettings) iregistry2.getOrThrow(NoiseGeneratorSettings.AMPLIFIED);
+                }))));
+            case 3:
+                return new WorldGenSettings(i, flag, false, WorldGenSettings.withOverworld(iregistry, registrymaterials, (ChunkGenerator) (new NoiseBasedChunkGenerator(new OverworldBiomeSource(i, false, true, iregistry1), i, () -> {
+                    return (NoiseGeneratorSettings) iregistry2.getOrThrow(NoiseGeneratorSettings.OVERWORLD);
+                }))));
+            default:
+                return new WorldGenSettings(i, flag, false, WorldGenSettings.withOverworld(iregistry, registrymaterials, (ChunkGenerator) WorldGenSettings.makeDefaultOverworld(iregistry1, iregistry2, i)));
         }
     }
 
     public WorldGenSettings withSeed(boolean hardcore, OptionalLong seed) {
-        long l = seed.orElse(this.seed);
-        MappedRegistry<LevelStem> mappedRegistry;
+        long i = seed.orElse(this.seed);
+        MappedRegistry registrymaterials;
+
         if (seed.isPresent()) {
-            mappedRegistry = new MappedRegistry<>(Registry.LEVEL_STEM_REGISTRY, Lifecycle.experimental());
-            long m = seed.getAsLong();
+            registrymaterials = new MappedRegistry<>(Registry.LEVEL_STEM_REGISTRY, Lifecycle.experimental());
+            long j = seed.getAsLong();
+            Iterator iterator = this.dimensions.entrySet().iterator();
 
-            for(Entry<ResourceKey<LevelStem>, LevelStem> entry : this.dimensions.entrySet()) {
-                ResourceKey<LevelStem> resourceKey = entry.getKey();
-                mappedRegistry.register(resourceKey, new LevelStem(entry.getValue().typeSupplier(), entry.getValue().generator().withSeed(m)), this.dimensions.lifecycle(entry.getValue()));
+            while (iterator.hasNext()) {
+                Entry<ResourceKey<LevelStem>, LevelStem> entry = (Entry) iterator.next();
+                ResourceKey<LevelStem> resourcekey = (ResourceKey) entry.getKey();
+
+                registrymaterials.register(resourcekey, (Object) (new LevelStem(((LevelStem) entry.getValue()).typeSupplier(), ((LevelStem) entry.getValue()).generator().withSeed(j))), this.dimensions.lifecycle(((LevelStem) entry.getValue()))); // CraftBukkit - decompile error
             }
         } else {
-            mappedRegistry = this.dimensions;
+            registrymaterials = this.dimensions;
         }
 
-        WorldGenSettings worldGenSettings;
+        WorldGenSettings generatorsettings;
+
         if (this.isDebug()) {
-            worldGenSettings = new WorldGenSettings(l, false, false, mappedRegistry);
+            generatorsettings = new WorldGenSettings(i, false, false, registrymaterials);
         } else {
-            worldGenSettings = new WorldGenSettings(l, this.generateFeatures(), this.generateBonusChest() && !hardcore, mappedRegistry);
+            generatorsettings = new WorldGenSettings(i, this.generateFeatures(), this.generateBonusChest() && !hardcore, registrymaterials);
         }
 
-        return worldGenSettings;
+        return generatorsettings;
     }
 }
