--- a/net/minecraft/world/level/biome/Biome.java
+++ b/net/minecraft/world/level/biome/Biome.java
@@ -44,6 +44,7 @@
 import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
 import net.minecraft.world.level.levelgen.feature.StructureFeature;
 import net.minecraft.world.level.levelgen.structure.BoundingBox;
+import net.minecraft.world.level.levelgen.structure.StructureStart;
 import net.minecraft.world.level.levelgen.surfacebuilders.ConfiguredSurfaceBuilder;
 import net.minecraft.world.level.levelgen.synth.PerlinSimplexNoise;
 import net.minecraft.world.level.material.FluidState;
@@ -53,8 +54,40 @@
 
 public final class Biome {
     public static final Logger LOGGER = LogManager.getLogger();
-    public static final Codec<Biome> DIRECT_CODEC;
-    public static final Codec<Biome> NETWORK_CODEC;
+    // Paper start - decompile fix: move up verbatim from static block
+    public static final Codec<Biome> DIRECT_CODEC = RecordCodecBuilder.create((instance) -> {
+        return instance.group(Biome.ClimateSettings.CODEC.forGetter((biome) -> {
+            return biome.climateSettings;
+        }), Biome.BiomeCategory.CODEC.fieldOf("category").forGetter((biome) -> {
+            return biome.biomeCategory;
+        }), Codec.FLOAT.fieldOf("depth").forGetter((biome) -> {
+            return biome.depth;
+        }), Codec.FLOAT.fieldOf("scale").forGetter((biome) -> {
+            return biome.scale;
+        }), BiomeSpecialEffects.CODEC.fieldOf("effects").forGetter((biome) -> {
+            return biome.specialEffects;
+        }), BiomeGenerationSettings.CODEC.forGetter((biome) -> {
+            return biome.generationSettings;
+        }), MobSpawnSettings.CODEC.forGetter((biome) -> {
+            return biome.mobSettings;
+        })).apply(instance, Biome::new);
+    });
+    public static final Codec<Biome> NETWORK_CODEC = RecordCodecBuilder.create((instance) -> {
+        return instance.group(Biome.ClimateSettings.CODEC.forGetter((biome) -> {
+            return biome.climateSettings;
+        }), Biome.BiomeCategory.CODEC.fieldOf("category").forGetter((biome) -> {
+            return biome.biomeCategory;
+        }), Codec.FLOAT.fieldOf("depth").forGetter((biome) -> {
+            return biome.depth;
+        }), Codec.FLOAT.fieldOf("scale").forGetter((biome) -> {
+            return biome.scale;
+        }), BiomeSpecialEffects.CODEC.fieldOf("effects").forGetter((biome) -> {
+            return biome.specialEffects;
+        })).apply(instance, (climateSettings, biomeCategory, float_, float2, biomeSpecialEffects) -> {
+            return new Biome(climateSettings, biomeCategory, float_, float2, biomeSpecialEffects, BiomeGenerationSettings.EMPTY, MobSpawnSettings.EMPTY);
+        });
+    });
+    // Paper end
     public static final Codec<Supplier<Biome>> CODEC = RegistryFileCodec.create(Registry.BIOME_REGISTRY, DIRECT_CODEC);
     public static final Codec<List<Supplier<Biome>>> LIST_CODEC = RegistryFileCodec.homogeneousList(Registry.BIOME_REGISTRY, DIRECT_CODEC);
     private final Map<Integer, List<StructureFeature<?>>> structuresByStep = Registry.STRUCTURE_FEATURE.stream().collect(Collectors.groupingBy((structureFeature) -> {
@@ -74,6 +107,7 @@
     private final ThreadLocal<Long2FloatLinkedOpenHashMap> temperatureCache = ThreadLocal.withInitial(() -> {
         return Util.make(() -> {
             Long2FloatLinkedOpenHashMap long2FloatLinkedOpenHashMap = new Long2FloatLinkedOpenHashMap(1024, 0.25F) {
+                @Override
                 protected void rehash(int i) {
                 }
             };
@@ -208,9 +242,11 @@
                         int p = region.getMinBuildHeight() + 1;
                         int q = region.getMaxBuildHeight() - 1;
                         region.setCurrentlyGenerating(supplier);
-                        structureAccessor.startsForFeature(SectionPos.of(origin), structureFeature).forEach((structureStart) -> {
+                        // Paper start - remove structure streams
+                        for (StructureStart<?> structureStart : structureAccessor.streamlessStartsForFeature(SectionPos.of(origin), structureFeature)) {
                             structureStart.placeInChunk(region, structureAccessor, chunkGenerator, random, new BoundingBox(n, p, o, n + 15, q, o + 15), new ChunkPos(l, m));
-                        });
+                        }
+                        // Paper end
                     } catch (Exception var24) {
                         CrashReport crashReport = CrashReport.forThrowable(var24, "Feature placement");
                         crashReport.addCategory("Feature").setDetail("Description", supplier::get);
@@ -329,46 +365,12 @@
         return this.biomeCategory;
     }
 
+    @Override
     public String toString() {
         ResourceLocation resourceLocation = BuiltinRegistries.BIOME.getKey(this);
         return resourceLocation == null ? super.toString() : resourceLocation.toString();
     }
 
-    static {
-        DIRECT_CODEC = RecordCodecBuilder.create((instance) -> {
-            return instance.group(Biome.ClimateSettings.CODEC.forGetter((biome) -> {
-                return biome.climateSettings;
-            }), Biome.BiomeCategory.CODEC.fieldOf("category").forGetter((biome) -> {
-                return biome.biomeCategory;
-            }), Codec.FLOAT.fieldOf("depth").forGetter((biome) -> {
-                return biome.depth;
-            }), Codec.FLOAT.fieldOf("scale").forGetter((biome) -> {
-                return biome.scale;
-            }), BiomeSpecialEffects.CODEC.fieldOf("effects").forGetter((biome) -> {
-                return biome.specialEffects;
-            }), BiomeGenerationSettings.CODEC.forGetter((biome) -> {
-                return biome.generationSettings;
-            }), MobSpawnSettings.CODEC.forGetter((biome) -> {
-                return biome.mobSettings;
-            })).apply(instance, Biome::new);
-        });
-        NETWORK_CODEC = RecordCodecBuilder.create((instance) -> {
-            return instance.group(Biome.ClimateSettings.CODEC.forGetter((biome) -> {
-                return biome.climateSettings;
-            }), Biome.BiomeCategory.CODEC.fieldOf("category").forGetter((biome) -> {
-                return biome.biomeCategory;
-            }), Codec.FLOAT.fieldOf("depth").forGetter((biome) -> {
-                return biome.depth;
-            }), Codec.FLOAT.fieldOf("scale").forGetter((biome) -> {
-                return biome.scale;
-            }), BiomeSpecialEffects.CODEC.fieldOf("effects").forGetter((biome) -> {
-                return biome.specialEffects;
-            })).apply(instance, (climateSettings, biomeCategory, float_, float2, biomeSpecialEffects) -> {
-                return new Biome(climateSettings, biomeCategory, float_, float2, biomeSpecialEffects, BiomeGenerationSettings.EMPTY, MobSpawnSettings.EMPTY);
-            });
-        });
-    }
-
     public static class BiomeBuilder {
         @Nullable
         private Biome.Precipitation precipitation;
@@ -448,6 +450,7 @@
             }
         }
 
+        @Override
         public String toString() {
             return "BiomeBuilder{\nprecipitation=" + this.precipitation + ",\nbiomeCategory=" + this.biomeCategory + ",\ndepth=" + this.depth + ",\nscale=" + this.scale + ",\ntemperature=" + this.temperature + ",\ntemperatureModifier=" + this.temperatureModifier + ",\ndownfall=" + this.downfall + ",\nspecialEffects=" + this.specialEffects + ",\nmobSpawnSettings=" + this.mobSpawnSettings + ",\ngenerationSettings=" + this.generationSettings + ",\n}";
         }
@@ -491,6 +494,7 @@
             return BY_NAME.get(name);
         }
 
+        @Override
         public String getSerializedName() {
             return this.name;
         }
@@ -524,10 +528,12 @@
             this.offset = weight;
         }
 
+        @Override
         public String toString() {
             return "temp: " + this.temperature + ", hum: " + this.humidity + ", alt: " + this.altitude + ", weird: " + this.weirdness + ", offset: " + this.offset;
         }
 
+        @Override
         public boolean equals(Object object) {
             if (this == object) {
                 return true;
@@ -547,6 +553,7 @@
             }
         }
 
+        @Override
         public int hashCode() {
             int i = this.temperature != 0.0F ? Float.floatToIntBits(this.temperature) : 0;
             i = 31 * i + (this.humidity != 0.0F ? Float.floatToIntBits(this.humidity) : 0);
@@ -607,6 +614,7 @@
             return BY_NAME.get(name);
         }
 
+        @Override
         public String getSerializedName() {
             return this.name;
         }
@@ -614,11 +622,13 @@
 
     public static enum TemperatureModifier implements StringRepresentable {
         NONE("none") {
+            @Override
             public float modifyTemperature(BlockPos pos, float temperature) {
                 return temperature;
             }
         },
         FROZEN("frozen") {
+            @Override
             public float modifyTemperature(BlockPos pos, float temperature) {
                 double d = Biome.FROZEN_TEMPERATURE_NOISE.getValue((double)pos.getX() * 0.05D, (double)pos.getZ() * 0.05D, false) * 7.0D;
                 double e = Biome.BIOME_INFO_NOISE.getValue((double)pos.getX() * 0.2D, (double)pos.getZ() * 0.2D, false);
@@ -650,6 +660,7 @@
             return this.name;
         }
 
+        @Override
         public String getSerializedName() {
             return this.name;
         }
