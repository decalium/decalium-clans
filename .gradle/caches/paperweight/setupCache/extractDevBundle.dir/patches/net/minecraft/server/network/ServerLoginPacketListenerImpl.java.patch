--- a/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -1,5 +1,7 @@
 package net.minecraft.server.network;
 
+import com.destroystokyo.paper.profile.CraftPlayerProfile;
+import com.destroystokyo.paper.profile.PlayerProfile;
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.exceptions.AuthenticationUnavailableException;
 import java.math.BigInteger;
@@ -16,7 +18,9 @@
 import javax.crypto.SecretKey;
 import net.minecraft.DefaultUncaughtExceptionHandler;
 import net.minecraft.network.Connection;
+import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.TextComponent;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.network.protocol.game.ClientboundDisconnectPacket;
 import net.minecraft.network.protocol.login.ClientboundGameProfilePacket;
@@ -32,11 +36,19 @@
 import net.minecraft.util.Crypt;
 import net.minecraft.util.CryptException;
 import net.minecraft.world.entity.player.Player;
-import org.apache.commons.lang3.Validate;
+import org.bukkit.craftbukkit.libs.org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import io.papermc.paper.adventure.PaperAdventure; // Paper
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.v1_17_R1.util.Waitable;
+import org.bukkit.event.player.AsyncPlayerPreLoginEvent;
+import org.bukkit.event.player.PlayerPreLoginEvent;
+// CraftBukkit end
+import io.netty.buffer.Unpooled; // Paper
 
 public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener {
+
     private static final AtomicInteger UNIQUE_THREAD_ID = new AtomicInteger(0);
     static final Logger LOGGER = LogManager.getLogger();
     private static final int MAX_TICKS_BEFORE_LOGIN = 600;
@@ -44,26 +56,41 @@
     private final byte[] nonce = new byte[4];
     final MinecraftServer server;
     public final Connection connection;
-    ServerLoginPacketListenerImpl.State state = ServerLoginPacketListenerImpl.State.HELLO;
+    public ServerLoginPacketListenerImpl.State state;
     private int tick;
     @Nullable
-    GameProfile gameProfile;
-    private final String serverId = "";
+    GameProfile gameProfile; @Deprecated private void setGameProfile(final GameProfile profile) { this.gameProfile = profile; } @Deprecated public GameProfile getGameProfile() { return this.gameProfile; } // Paper - OBFHELPER
+    private final String serverId;
     @Nullable
     private ServerPlayer delayedAcceptPlayer;
+    public String hostname = ""; // CraftBukkit - add field
+    private int velocityLoginMessageId = -1; // Paper - Velocity support
 
     public ServerLoginPacketListenerImpl(MinecraftServer server, Connection connection) {
+        this.state = ServerLoginPacketListenerImpl.State.HELLO;
+        this.serverId = "";
         this.server = server;
         this.connection = connection;
-        RANDOM.nextBytes(this.nonce);
+        ServerLoginPacketListenerImpl.RANDOM.nextBytes(this.nonce);
     }
 
     public void tick() {
+        // Paper start - Do not allow logins while the server is shutting down
+        if (!MinecraftServer.getServer().isRunning()) {
+            this.disconnect(org.bukkit.craftbukkit.v1_17_R1.util.CraftChatMessage.fromString(org.spigotmc.SpigotConfig.restartMessage)[0]);
+            return;
+        }
+        // Paper end
         if (this.state == ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT) {
-            this.handleAcceptedLogin();
+            // Paper start - prevent logins to be processed even though disconnect was called
+            if (connection.isConnected()) {
+                this.handleAcceptedLogin();
+            }
+            // Paper end
         } else if (this.state == ServerLoginPacketListenerImpl.State.DELAY_ACCEPT) {
-            ServerPlayer serverPlayer = this.server.getPlayerList().getPlayer(this.gameProfile.getId());
-            if (serverPlayer == null) {
+            ServerPlayer entityplayer = this.server.getPlayerList().getActivePlayer(this.gameProfile.getId()); // Paper
+
+            if (entityplayer == null) {
                 this.state = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
                 this.placeNewPlayer(this.delayedAcceptPlayer);
                 this.delayedAcceptPlayer = null;
@@ -76,52 +103,111 @@
 
     }
 
+    // CraftBukkit start
+    @Deprecated
+    public void disconnect(String s) {
+        disconnect(org.bukkit.craftbukkit.v1_17_R1.util.CraftChatMessage.fromString(s, true)[0]); // Paper - Fix hex colors not working in some kick messages
+    }
+    // CraftBukkit end
+
+    @Override
     public Connection getConnection() {
         return this.connection;
     }
 
     public void disconnect(Component reason) {
         try {
-            LOGGER.info("Disconnecting {}: {}", this.getUserName(), reason.getString());
+            ServerLoginPacketListenerImpl.LOGGER.info("Disconnecting {}: {}", this.getUserName(), reason.getString());
             this.connection.send(new ClientboundLoginDisconnectPacket(reason));
             this.connection.disconnect(reason);
-        } catch (Exception var3) {
-            LOGGER.error("Error whilst disconnecting player", (Throwable)var3);
+        } catch (Exception exception) {
+            ServerLoginPacketListenerImpl.LOGGER.error("Error whilst disconnecting player", exception);
         }
 
     }
 
+    // Paper start - Cache authenticator threads
+    private static final AtomicInteger threadId = new AtomicInteger(0);
+    private static final java.util.concurrent.ExecutorService authenticatorPool = java.util.concurrent.Executors.newCachedThreadPool(
+            r -> {
+                Thread ret = new Thread(r, "User Authenticator #" + threadId.incrementAndGet());
+
+                ret.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
+
+                return ret;
+            }
+    );
+    // Paper end
+    // Spigot start
+    public void initUUID()
+    {
+        UUID uuid;
+        if ( connection.spoofedUUID != null )
+        {
+            uuid = connection.spoofedUUID;
+        } else
+        {
+            uuid = Player.createPlayerUUID( this.gameProfile.getName() );
+        }
+
+        this.gameProfile = new GameProfile( uuid, this.gameProfile.getName() );
+
+        if (connection.spoofedProfile != null)
+        {
+            for ( com.mojang.authlib.properties.Property property : connection.spoofedProfile )
+            {
+                if ( !ServerHandshakePacketListenerImpl.PROP_PATTERN.matcher( property.getName() ).matches() ) continue;
+                this.gameProfile.getProperties().put( property.getName(), property );
+            }
+        }
+    }
+    // Spigot end
+
     public void handleAcceptedLogin() {
+        // Spigot start - Moved to initUUID
+        /*
         if (!this.gameProfile.isComplete()) {
-            this.gameProfile = this.createFakeProfile(this.gameProfile);
+            this.gameProfile = this.a(this.gameProfile);
         }
+        */
+        // Spigot end
 
-        Component component = this.server.getPlayerList().canPlayerLogin(this.connection.getRemoteAddress(), this.gameProfile);
-        if (component != null) {
-            this.disconnect(component);
+        // CraftBukkit start - fire PlayerLoginEvent
+        ServerPlayer s = this.server.getPlayerList().attemptLogin(this, this.gameProfile, hostname);
+
+        if (s == null) {
+            // this.disconnect(ichatbasecomponent);
+            // CraftBukkit end
         } else {
             this.state = ServerLoginPacketListenerImpl.State.ACCEPTED;
             if (this.server.getCompressionThreshold() >= 0 && !this.connection.isMemoryConnection()) {
-                this.connection.send(new ClientboundLoginCompressionPacket(this.server.getCompressionThreshold()), (channelFuture) -> {
+                this.connection.send(new ClientboundLoginCompressionPacket(this.server.getCompressionThreshold()), (channelfuture) -> {
                     this.connection.setupCompression(this.server.getCompressionThreshold(), true);
                 });
             }
 
             this.connection.send(new ClientboundGameProfilePacket(this.gameProfile));
-            ServerPlayer serverPlayer = this.server.getPlayerList().getPlayer(this.gameProfile.getId());
+            ServerPlayer entityplayer = this.server.getPlayerList().getActivePlayer(this.gameProfile.getId()); // Paper
 
             try {
-                ServerPlayer serverPlayer2 = this.server.getPlayerList().getPlayerForLogin(this.gameProfile);
-                if (serverPlayer != null) {
+                ServerPlayer entityplayer1 = this.server.getPlayerList().processLogin(this.gameProfile, s); // CraftBukkit - add player reference
+
+                if (entityplayer != null) {
                     this.state = ServerLoginPacketListenerImpl.State.DELAY_ACCEPT;
-                    this.delayedAcceptPlayer = serverPlayer2;
+                    this.delayedAcceptPlayer = entityplayer1;
                 } else {
-                    this.placeNewPlayer(serverPlayer2);
+                    this.placeNewPlayer(entityplayer1);
                 }
-            } catch (Exception var5) {
-                Component component2 = new TranslatableComponent("multiplayer.disconnect.invalid_player_data");
-                this.connection.send(new ClientboundDisconnectPacket(component2));
-                this.connection.disconnect(component2);
+            } catch (Exception exception) {
+                TranslatableComponent chatmessage = new TranslatableComponent("multiplayer.disconnect.invalid_player_data");
+                // Paper start
+                if (MinecraftServer.getServer().isDebugging()) {
+                    exception.printStackTrace();
+                }
+                // Paper end
+
+                this.connection.send(new ClientboundDisconnectPacket(chatmessage));
+                this.connection.disconnect(chatmessage);
             }
         }
 
@@ -131,102 +217,233 @@
         this.server.getPlayerList().placeNewPlayer(this.connection, player);
     }
 
+    @Override
     public void onDisconnect(Component reason) {
-        LOGGER.info("{} lost connection: {}", this.getUserName(), reason.getString());
+        ServerLoginPacketListenerImpl.LOGGER.info("{} lost connection: {}", this.getUserName(), reason.getString());
     }
 
     public String getUserName() {
-        return this.gameProfile != null ? this.gameProfile + " (" + this.connection.getRemoteAddress() + ")" : String.valueOf((Object)this.connection.getRemoteAddress());
+        return this.gameProfile != null ? this.gameProfile + " (" + this.connection.getRemoteAddress() + ")" : String.valueOf(this.connection.getRemoteAddress());
     }
 
+    @Override
     public void handleHello(ServerboundHelloPacket packet) {
-        Validate.validState(this.state == ServerLoginPacketListenerImpl.State.HELLO, "Unexpected hello packet");
+        Validate.validState(this.state == ServerLoginPacketListenerImpl.State.HELLO, "Unexpected hello packet", new Object[0]);
         this.gameProfile = packet.getGameProfile();
         if (this.server.usesAuthentication() && !this.connection.isMemoryConnection()) {
             this.state = ServerLoginPacketListenerImpl.State.KEY;
             this.connection.send(new ClientboundHelloPacket("", this.server.getKeyPair().getPublic().getEncoded(), this.nonce));
         } else {
-            this.state = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
+            // Paper start - Velocity support
+            if (com.destroystokyo.paper.PaperConfig.velocitySupport) {
+                this.velocityLoginMessageId = java.util.concurrent.ThreadLocalRandom.current().nextInt();
+                net.minecraft.network.protocol.login.ClientboundCustomQueryPacket packet1 = new net.minecraft.network.protocol.login.ClientboundCustomQueryPacket(this.velocityLoginMessageId, com.destroystokyo.paper.proxy.VelocityProxy.PLAYER_INFO_CHANNEL, new FriendlyByteBuf(Unpooled.EMPTY_BUFFER));
+                this.connection.send(packet1);
+                return;
+            }
+            // Paper end
+            // Spigot start
+            // Paper start - Cache authenticator threads
+            authenticatorPool.execute(new Runnable() {
+                @Override
+                public void run() {
+                    try {
+                        ServerLoginPacketListenerImpl.this.initUUID();
+                        new LoginHandler().fireEvents();
+                    } catch (Exception ex) {
+                        ServerLoginPacketListenerImpl.this.disconnect("Failed to verify username!");
+                        server.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + ServerLoginPacketListenerImpl.this.gameProfile.getName(), ex);
+                    }
+                }
+            });
+            // Paper end
+            // Spigot end
         }
 
     }
 
+    @Override
     public void handleKey(ServerboundKeyPacket packet) {
-        Validate.validState(this.state == ServerLoginPacketListenerImpl.State.KEY, "Unexpected key packet");
-        PrivateKey privateKey = this.server.getKeyPair().getPrivate();
+        Validate.validState(this.state == ServerLoginPacketListenerImpl.State.KEY, "Unexpected key packet", new Object[0]);
+        PrivateKey privatekey = this.server.getKeyPair().getPrivate();
+
+        final String s;
 
-        final String string;
         try {
-            if (!Arrays.equals(this.nonce, packet.getNonce(privateKey))) {
+            if (!Arrays.equals(this.nonce, packet.getNonce(privatekey))) {
                 throw new IllegalStateException("Protocol error");
             }
 
-            SecretKey secretKey = packet.getSecretKey(privateKey);
-            Cipher cipher = Crypt.getCipher(2, secretKey);
-            Cipher cipher2 = Crypt.getCipher(1, secretKey);
-            string = (new BigInteger(Crypt.digestData("", this.server.getKeyPair().getPublic(), secretKey))).toString(16);
+            SecretKey secretkey = packet.getSecretKey(privatekey);
+            Cipher cipher = Crypt.getCipher(2, secretkey);
+            Cipher cipher1 = Crypt.getCipher(1, secretkey);
+
+            s = (new BigInteger(Crypt.digestData("", this.server.getKeyPair().getPublic(), secretkey))).toString(16);
             this.state = ServerLoginPacketListenerImpl.State.AUTHENTICATING;
-            this.connection.setEncryptionKey(cipher, cipher2);
-        } catch (CryptException var7) {
-            throw new IllegalStateException("Protocol error", var7);
+            this.connection.setEncryptionKey(cipher, cipher1);
+        } catch (CryptException cryptographyexception) {
+            throw new IllegalStateException("Protocol error", cryptographyexception);
         }
 
-        Thread thread = new Thread("User Authenticator #" + UNIQUE_THREAD_ID.incrementAndGet()) {
+        // Paper start - Cache authenticator threads
+        authenticatorPool.execute(new Runnable() {
             public void run() {
-                GameProfile gameProfile = ServerLoginPacketListenerImpl.this.gameProfile;
+                GameProfile gameprofile = ServerLoginPacketListenerImpl.this.gameProfile;
 
                 try {
-                    ServerLoginPacketListenerImpl.this.gameProfile = ServerLoginPacketListenerImpl.this.server.getSessionService().hasJoinedServer(new GameProfile((UUID)null, gameProfile.getName()), string, this.getAddress());
+                    ServerLoginPacketListenerImpl.this.gameProfile = ServerLoginPacketListenerImpl.this.server.getSessionService().hasJoinedServer(new GameProfile((UUID) null, gameprofile.getName()), s, this.a());
                     if (ServerLoginPacketListenerImpl.this.gameProfile != null) {
-                        ServerLoginPacketListenerImpl.LOGGER.info("UUID of player {} is {}", ServerLoginPacketListenerImpl.this.gameProfile.getName(), ServerLoginPacketListenerImpl.this.gameProfile.getId());
-                        ServerLoginPacketListenerImpl.this.state = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
+                        // CraftBukkit start - fire PlayerPreLoginEvent
+                        if (!ServerLoginPacketListenerImpl.this.connection.isConnected()) {
+                            return;
+                        }
+
+                        new LoginHandler().fireEvents();
                     } else if (ServerLoginPacketListenerImpl.this.server.isSingleplayer()) {
                         ServerLoginPacketListenerImpl.LOGGER.warn("Failed to verify username but will let them in anyway!");
-                        ServerLoginPacketListenerImpl.this.gameProfile = ServerLoginPacketListenerImpl.this.createFakeProfile(gameProfile);
+                        ServerLoginPacketListenerImpl.this.gameProfile = ServerLoginPacketListenerImpl.this.createFakeProfile(gameprofile);
                         ServerLoginPacketListenerImpl.this.state = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
                     } else {
                         ServerLoginPacketListenerImpl.this.disconnect(new TranslatableComponent("multiplayer.disconnect.unverified_username"));
-                        ServerLoginPacketListenerImpl.LOGGER.error("Username '{}' tried to join with an invalid session", (Object)gameProfile.getName());
+                        ServerLoginPacketListenerImpl.LOGGER.error("Username '{}' tried to join with an invalid session", gameprofile.getName());
                     }
-                } catch (AuthenticationUnavailableException var3) {
+                } catch (AuthenticationUnavailableException authenticationunavailableexception) {
                     if (ServerLoginPacketListenerImpl.this.server.isSingleplayer()) {
                         ServerLoginPacketListenerImpl.LOGGER.warn("Authentication servers are down but will let them in anyway!");
-                        ServerLoginPacketListenerImpl.this.gameProfile = ServerLoginPacketListenerImpl.this.createFakeProfile(gameProfile);
+                        ServerLoginPacketListenerImpl.this.gameProfile = ServerLoginPacketListenerImpl.this.createFakeProfile(gameprofile);
                         ServerLoginPacketListenerImpl.this.state = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
                     } else {
+                            // Paper start
+                            if (com.destroystokyo.paper.PaperConfig.authenticationServersDownKickMessage != null) {
+                                ServerLoginPacketListenerImpl.this.disconnect(new TextComponent(com.destroystokyo.paper.PaperConfig.authenticationServersDownKickMessage));
+                            } else // Paper end
                         ServerLoginPacketListenerImpl.this.disconnect(new TranslatableComponent("multiplayer.disconnect.authservers_down"));
                         ServerLoginPacketListenerImpl.LOGGER.error("Couldn't verify username because servers are unavailable");
                     }
+                    // CraftBukkit start - catch all exceptions
+                } catch (Exception exception) {
+                    ServerLoginPacketListenerImpl.this.disconnect("Failed to verify username!");
+                    server.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + gameprofile.getName(), exception);
+                    // CraftBukkit end
                 }
 
             }
 
             @Nullable
-            private InetAddress getAddress() {
-                SocketAddress socketAddress = ServerLoginPacketListenerImpl.this.connection.getRemoteAddress();
-                return ServerLoginPacketListenerImpl.this.server.getPreventProxyConnections() && socketAddress instanceof InetSocketAddress ? ((InetSocketAddress)socketAddress).getAddress() : null;
+            private InetAddress a() {
+                SocketAddress socketaddress = ServerLoginPacketListenerImpl.this.connection.getRemoteAddress();
+
+                return ServerLoginPacketListenerImpl.this.server.getPreventProxyConnections() && socketaddress instanceof InetSocketAddress ? ((InetSocketAddress) socketaddress).getAddress() : null;
             }
-        };
-        thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
-        thread.start();
+        });
+        // Paper end
     }
 
+    // Spigot start
+    public class LoginHandler {
+
+        public void fireEvents() throws Exception {
+                            // Paper start - Velocity support
+                            if (ServerLoginPacketListenerImpl.this.velocityLoginMessageId == -1 && com.destroystokyo.paper.PaperConfig.velocitySupport) {
+                                disconnect("This server requires you to connect with Velocity.");
+                                return;
+                            }
+                            // Paper end
+                        String playerName = ServerLoginPacketListenerImpl.this.gameProfile.getName();
+                        java.net.InetAddress address = ((java.net.InetSocketAddress) ServerLoginPacketListenerImpl.this.connection.getRemoteAddress()).getAddress();
+                        java.net.InetAddress rawAddress = ((java.net.InetSocketAddress) connection.getRawAddress()).getAddress(); // Paper
+                        java.util.UUID uniqueId = ServerLoginPacketListenerImpl.this.gameProfile.getId();
+                        final org.bukkit.craftbukkit.v1_17_R1.CraftServer server = ServerLoginPacketListenerImpl.this.server.server;
+
+                            // Paper start
+                            PlayerProfile profile = CraftPlayerProfile.asBukkitMirror(ServerLoginPacketListenerImpl.this.gameProfile);
+                            AsyncPlayerPreLoginEvent asyncEvent = new AsyncPlayerPreLoginEvent(playerName, address, rawAddress, uniqueId, profile);
+                        server.getPluginManager().callEvent(asyncEvent);
+                            profile = asyncEvent.getPlayerProfile();
+                            profile.complete(true);
+                            ServerLoginPacketListenerImpl.this.gameProfile = CraftPlayerProfile.asAuthlib(profile);
+                            playerName = gameProfile.getName();
+                            uniqueId = gameProfile.getId();
+                            // Paper end
+
+                        if (PlayerPreLoginEvent.getHandlerList().getRegisteredListeners().length != 0) {
+                            final PlayerPreLoginEvent event = new PlayerPreLoginEvent(playerName, address, uniqueId);
+                            if (asyncEvent.getResult() != PlayerPreLoginEvent.Result.ALLOWED) {
+                                event.disallow(asyncEvent.getResult(), asyncEvent.kickMessage()); // Paper - Adventure
+                            }
+                            Waitable<PlayerPreLoginEvent.Result> waitable = new Waitable<PlayerPreLoginEvent.Result>() {
+                                @Override
+                                protected PlayerPreLoginEvent.Result evaluate() {
+                                    server.getPluginManager().callEvent(event);
+                                    return event.getResult();
+                                }};
+
+                            ServerLoginPacketListenerImpl.this.server.processQueue.add(waitable);
+                            if (waitable.get() != PlayerPreLoginEvent.Result.ALLOWED) {
+                                ServerLoginPacketListenerImpl.this.disconnect(PaperAdventure.asVanilla(event.kickMessage())); // Paper - Adventure
+                                return;
+                            }
+                        } else {
+                            if (asyncEvent.getLoginResult() != AsyncPlayerPreLoginEvent.Result.ALLOWED) {
+                                ServerLoginPacketListenerImpl.this.disconnect(PaperAdventure.asVanilla(asyncEvent.kickMessage())); // Paper - Adventure
+                                return;
+                            }
+                        }
+                        // CraftBukkit end
+                        ServerLoginPacketListenerImpl.LOGGER.info("UUID of player {} is {}", ServerLoginPacketListenerImpl.this.gameProfile.getName(), ServerLoginPacketListenerImpl.this.gameProfile.getId());
+                        ServerLoginPacketListenerImpl.this.state = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
+        }
+    }
+    // Spigot end
+
     public void handleCustomQueryPacket(ServerboundCustomQueryPacket packet) {
+        // Paper start - Velocity support
+        if (com.destroystokyo.paper.PaperConfig.velocitySupport && packet.getTransactionId() == this.velocityLoginMessageId) {
+            FriendlyByteBuf buf = packet.getData();
+            if (buf == null) {
+                this.disconnect("This server requires you to connect with Velocity.");
+                return;
+            }
+
+            if (!com.destroystokyo.paper.proxy.VelocityProxy.checkIntegrity(buf)) {
+                this.disconnect("Unable to verify player details");
+                return;
+            }
+
+            java.net.SocketAddress listening = this.connection.getRemoteAddress();
+            int port = 0;
+            if (listening instanceof java.net.InetSocketAddress) {
+                port = ((java.net.InetSocketAddress) listening).getPort();
+            }
+            this.connection.address = new java.net.InetSocketAddress(com.destroystokyo.paper.proxy.VelocityProxy.readAddress(buf), port);
+
+            this.gameProfile = com.destroystokyo.paper.proxy.VelocityProxy.createProfile(buf);
+
+            // Proceed with login
+            authenticatorPool.execute(() -> {
+                try {
+                    new LoginHandler().fireEvents();
+                } catch (Exception ex) {
+                    disconnect("Failed to verify username!");
+                    server.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + gameProfile.getName(), ex);
+                }
+            });
+            return;
+        }
+        // Paper end
         this.disconnect(new TranslatableComponent("multiplayer.disconnect.unexpected_query_response"));
     }
 
     protected GameProfile createFakeProfile(GameProfile profile) {
-        UUID uUID = Player.createPlayerUUID(profile.getName());
-        return new GameProfile(uUID, profile.getName());
+        UUID uuid = Player.createPlayerUUID(profile.getName());
+
+        return new GameProfile(uuid, profile.getName());
     }
 
-    static enum State {
-        HELLO,
-        KEY,
-        AUTHENTICATING,
-        NEGOTIATING,
-        READY_TO_ACCEPT,
-        DELAY_ACCEPT,
-        ACCEPTED;
+    public static enum State {
+
+        HELLO, KEY, AUTHENTICATING, NEGOTIATING, READY_TO_ACCEPT, DELAY_ACCEPT, ACCEPTED;
+
+        private State() {}
     }
 }
