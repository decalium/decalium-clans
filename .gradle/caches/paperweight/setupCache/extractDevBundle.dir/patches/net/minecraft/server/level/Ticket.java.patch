--- a/net/minecraft/server/level/Ticket.java
+++ b/net/minecraft/server/level/Ticket.java
@@ -5,25 +5,30 @@
 public final class Ticket<T> implements Comparable<Ticket<?>> {
     private final TicketType<T> type;
     private final int ticketLevel;
-    private final T key;
-    private long createdTick;
+    public final T key;
+    public long createdTick;
+    public long delayUnloadBy; // Paper
+    public int priority; // Paper - Chunk priority
 
     protected Ticket(TicketType<T> type, int level, T argument) {
         this.type = type;
         this.ticketLevel = level;
         this.key = argument;
+        this.delayUnloadBy = type.timeout; // Paper
     }
 
+    @Override
     public int compareTo(Ticket<?> ticket) {
         int i = Integer.compare(this.ticketLevel, ticket.ticketLevel);
         if (i != 0) {
             return i;
         } else {
             int j = Integer.compare(System.identityHashCode(this.type), System.identityHashCode(ticket.type));
-            return j != 0 ? j : this.type.getComparator().compare(this.key, ticket.key);
+            return j != 0 ? j : this.type.getComparator().compare(this.key, (T)ticket.key); // Paper - decompile fix
         }
     }
 
+    @Override
     public boolean equals(Object object) {
         if (this == object) {
             return true;
@@ -35,10 +40,12 @@
         }
     }
 
+    @Override
     public int hashCode() {
         return Objects.hash(this.type, this.ticketLevel, this.key);
     }
 
+    @Override
     public String toString() {
         return "Ticket[" + this.type + " " + this.ticketLevel + " (" + this.key + ")] at " + this.createdTick;
     }
@@ -56,7 +63,7 @@
     }
 
     protected boolean timedOut(long currentTick) {
-        long l = this.type.timeout();
+        long l = delayUnloadBy; // Paper
         return l != 0L && currentTick - this.createdTick > l;
     }
 }
