--- a/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
@@ -11,7 +11,6 @@
 import net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket;
 import net.minecraft.util.Mth;
 import net.minecraft.world.Clearable;
-import net.minecraft.world.Container;
 import net.minecraft.world.ContainerHelper;
 import net.minecraft.world.Containers;
 import net.minecraft.world.SimpleContainer;
@@ -21,55 +20,88 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.CampfireBlock;
 import net.minecraft.world.level.block.state.BlockState;
+// CraftBukkit start
+import org.bukkit.craftbukkit.v1_17_R1.block.CraftBlock;
+import org.bukkit.craftbukkit.v1_17_R1.inventory.CraftItemStack;
+import org.bukkit.event.block.BlockCookEvent;
+// CraftBukkit end
 
 public class CampfireBlockEntity extends BlockEntity implements Clearable {
+
     private static final int BURN_COOL_SPEED = 2;
     private static final int NUM_SLOTS = 4;
-    private final NonNullList<ItemStack> items = NonNullList.withSize(4, ItemStack.EMPTY);
-    private final int[] cookingProgress = new int[4];
-    private final int[] cookingTime = new int[4];
+    private final NonNullList<ItemStack> items;
+    public final int[] cookingProgress;
+    public final int[] cookingTime;
 
     public CampfireBlockEntity(BlockPos pos, BlockState state) {
         super(BlockEntityType.CAMPFIRE, pos, state);
+        this.items = NonNullList.withSize(4, ItemStack.EMPTY);
+        this.cookingProgress = new int[4];
+        this.cookingTime = new int[4];
     }
 
     public static void cookTick(Level world, BlockPos pos, BlockState state, CampfireBlockEntity campfire) {
-        boolean bl = false;
+        boolean flag = false;
+
+        for (int i = 0; i < campfire.items.size(); ++i) {
+            ItemStack itemstack = (ItemStack) campfire.items.get(i);
+
+            if (!itemstack.isEmpty()) {
+                flag = true;
+                int j = campfire.cookingProgress[i]++;
 
-        for(int i = 0; i < campfire.items.size(); ++i) {
-            ItemStack itemStack = campfire.items.get(i);
-            if (!itemStack.isEmpty()) {
-                bl = true;
-                int var10002 = campfire.cookingProgress[i]++;
                 if (campfire.cookingProgress[i] >= campfire.cookingTime[i]) {
-                    Container container = new SimpleContainer(itemStack);
-                    ItemStack itemStack2 = world.getRecipeManager().getRecipeFor(RecipeType.CAMPFIRE_COOKING, container, world).map((campfireCookingRecipe) -> {
-                        return campfireCookingRecipe.assemble(container);
-                    }).orElse(itemStack);
-                    Containers.dropItemStack(world, (double)pos.getX(), (double)pos.getY(), (double)pos.getZ(), itemStack2);
+                    SimpleContainer inventorysubcontainer = new SimpleContainer(new ItemStack[]{itemstack});
+                    // Paper start
+                    Optional<CampfireCookingRecipe> recipe = world.getRecipeManager().getRecipeFor(RecipeType.CAMPFIRE_COOKING, inventorysubcontainer, world);
+                    ItemStack itemstack1 = (ItemStack) recipe.map((recipecampfire) -> {
+                        // Paper end
+                        return recipecampfire.assemble(inventorysubcontainer);
+                    }).orElse(itemstack);
+
+                    // CraftBukkit start - fire BlockCookEvent
+                    CraftItemStack source = CraftItemStack.asCraftMirror(itemstack);
+                    org.bukkit.inventory.ItemStack result = CraftItemStack.asBukkitCopy(itemstack1);
+
+                    BlockCookEvent blockCookEvent = new BlockCookEvent(CraftBlock.at(world, pos), source, result, (org.bukkit.inventory.CookingRecipe<?>) recipe.map(CampfireCookingRecipe::toBukkitRecipe).orElse(null)); // Paper
+                    world.getCraftServer().getPluginManager().callEvent(blockCookEvent);
+
+                    if (blockCookEvent.isCancelled()) {
+                        return;
+                    }
+
+                    result = blockCookEvent.getResult();
+                    itemstack1 = CraftItemStack.asNMSCopy(result);
+                    // CraftBukkit end
+                    // Paper start
+                    net.minecraft.world.entity.item.ItemEntity droppedItem = new net.minecraft.world.entity.item.ItemEntity(world, pos.getX() + 0.5D, pos.getY() + 0.5D, pos.getZ() + 0.5D, itemstack1.split(world.random.nextInt(21) + 10));
+                    droppedItem.setDeltaMovement(world.random.nextGaussian() * 0.05D, world.random.nextGaussian() * 0.05D + 0.2D, world.random.nextGaussian() * 0.05D);
+                    world.addFreshEntity(droppedItem);
+                    // Paper end
                     campfire.items.set(i, ItemStack.EMPTY);
                     world.sendBlockUpdated(pos, state, state, 3);
                 }
             }
         }
 
-        if (bl) {
+        if (flag) {
             setChanged(world, pos, state);
         }
 
     }
 
     public static void cooldownTick(Level world, BlockPos pos, BlockState state, CampfireBlockEntity campfire) {
-        boolean bl = false;
+        boolean flag = false;
 
-        for(int i = 0; i < campfire.items.size(); ++i) {
+        for (int i = 0; i < campfire.items.size(); ++i) {
             if (campfire.cookingProgress[i] > 0) {
-                bl = true;
+                flag = true;
                 campfire.cookingProgress[i] = Mth.clamp(campfire.cookingProgress[i] - 2, 0, campfire.cookingTime[i]);
             }
         }
 
-        if (bl) {
+        if (flag) {
             setChanged(world, pos, state);
         }
 
@@ -77,24 +109,26 @@
 
     public static void particleTick(Level world, BlockPos pos, BlockState state, CampfireBlockEntity campfire) {
         Random random = world.random;
+        int i;
+
         if (random.nextFloat() < 0.11F) {
-            for(int i = 0; i < random.nextInt(2) + 2; ++i) {
-                CampfireBlock.makeParticles(world, pos, state.getValue(CampfireBlock.SIGNAL_FIRE), false);
+            for (i = 0; i < random.nextInt(2) + 2; ++i) {
+                CampfireBlock.makeParticles(world, pos, (Boolean) state.getValue(CampfireBlock.SIGNAL_FIRE), false);
             }
         }
 
-        int j = state.getValue(CampfireBlock.FACING).get2DDataValue();
+        i = ((Direction) state.getValue(CampfireBlock.FACING)).get2DDataValue();
 
-        for(int k = 0; k < campfire.items.size(); ++k) {
-            if (!campfire.items.get(k).isEmpty() && random.nextFloat() < 0.2F) {
-                Direction direction = Direction.from2DDataValue(Math.floorMod(k + j, 4));
+        for (int j = 0; j < campfire.items.size(); ++j) {
+            if (!((ItemStack) campfire.items.get(j)).isEmpty() && random.nextFloat() < 0.2F) {
+                Direction enumdirection = Direction.from2DDataValue(Math.floorMod(j + i, 4));
                 float f = 0.3125F;
-                double d = (double)pos.getX() + 0.5D - (double)((float)direction.getStepX() * 0.3125F) + (double)((float)direction.getClockWise().getStepX() * 0.3125F);
-                double e = (double)pos.getY() + 0.5D;
-                double g = (double)pos.getZ() + 0.5D - (double)((float)direction.getStepZ() * 0.3125F) + (double)((float)direction.getClockWise().getStepZ() * 0.3125F);
+                double d0 = (double) pos.getX() + 0.5D - (double) ((float) enumdirection.getStepX() * 0.3125F) + (double) ((float) enumdirection.getClockWise().getStepX() * 0.3125F);
+                double d1 = (double) pos.getY() + 0.5D;
+                double d2 = (double) pos.getZ() + 0.5D - (double) ((float) enumdirection.getStepZ() * 0.3125F) + (double) ((float) enumdirection.getClockWise().getStepZ() * 0.3125F);
 
-                for(int l = 0; l < 4; ++l) {
-                    world.addParticle(ParticleTypes.SMOKE, d, e, g, 0.0D, 5.0E-4D, 0.0D);
+                for (int k = 0; k < 4; ++k) {
+                    world.addParticle(ParticleTypes.SMOKE, d0, d1, d2, 0.0D, 5.0E-4D, 0.0D);
                 }
             }
         }
@@ -105,22 +139,26 @@
         return this.items;
     }
 
+    @Override
     public void load(CompoundTag nbt) {
         super.load(nbt);
         this.items.clear();
         ContainerHelper.loadAllItems(nbt, this.items);
+        int[] aint;
+
         if (nbt.contains("CookingTimes", 11)) {
-            int[] is = nbt.getIntArray("CookingTimes");
-            System.arraycopy(is, 0, this.cookingProgress, 0, Math.min(this.cookingTime.length, is.length));
+            aint = nbt.getIntArray("CookingTimes");
+            System.arraycopy(aint, 0, this.cookingProgress, 0, Math.min(this.cookingTime.length, aint.length));
         }
 
         if (nbt.contains("CookingTotalTimes", 11)) {
-            int[] js = nbt.getIntArray("CookingTotalTimes");
-            System.arraycopy(js, 0, this.cookingTime, 0, Math.min(this.cookingTime.length, js.length));
+            aint = nbt.getIntArray("CookingTotalTimes");
+            System.arraycopy(aint, 0, this.cookingTime, 0, Math.min(this.cookingTime.length, aint.length));
         }
 
     }
 
+    @Override
     public CompoundTag save(CompoundTag nbt) {
         this.saveMetadataAndItems(nbt);
         nbt.putIntArray("CookingTimes", this.cookingProgress);
@@ -135,25 +173,28 @@
     }
 
     @Nullable
+    @Override
     public ClientboundBlockEntityDataPacket getUpdatePacket() {
         return new ClientboundBlockEntityDataPacket(this.worldPosition, 13, this.getUpdateTag());
     }
 
+    @Override
     public CompoundTag getUpdateTag() {
         return this.saveMetadataAndItems(new CompoundTag());
     }
 
     public Optional<CampfireCookingRecipe> getCookableRecipe(ItemStack item) {
-        return this.items.stream().noneMatch(ItemStack::isEmpty) ? Optional.empty() : this.level.getRecipeManager().getRecipeFor(RecipeType.CAMPFIRE_COOKING, new SimpleContainer(item), this.level);
+        return this.items.stream().noneMatch(ItemStack::isEmpty) ? Optional.empty() : this.level.getRecipeManager().getRecipeFor(RecipeType.CAMPFIRE_COOKING, new SimpleContainer(new ItemStack[]{item}), this.level);
     }
 
     public boolean placeFood(ItemStack item, int integer) {
-        for(int i = 0; i < this.items.size(); ++i) {
-            ItemStack itemStack = this.items.get(i);
-            if (itemStack.isEmpty()) {
-                this.cookingTime[i] = integer;
-                this.cookingProgress[i] = 0;
-                this.items.set(i, item.split(1));
+        for (int j = 0; j < this.items.size(); ++j) {
+            ItemStack itemstack1 = (ItemStack) this.items.get(j);
+
+            if (itemstack1.isEmpty()) {
+                this.cookingTime[j] = integer;
+                this.cookingProgress[j] = 0;
+                this.items.set(j, item.split(1));
                 this.markUpdated();
                 return true;
             }
@@ -167,6 +208,7 @@
         this.getLevel().sendBlockUpdated(this.getBlockPos(), this.getBlockState(), this.getBlockState(), 3);
     }
 
+    @Override
     public void clearContent() {
         this.items.clear();
     }
