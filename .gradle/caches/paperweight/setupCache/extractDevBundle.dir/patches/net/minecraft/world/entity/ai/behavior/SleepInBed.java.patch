--- a/net/minecraft/world/entity/ai/behavior/SleepInBed.java
+++ b/net/minecraft/world/entity/ai/behavior/SleepInBed.java
@@ -23,6 +23,7 @@
         super(ImmutableMap.of(MemoryModuleType.HOME, MemoryStatus.VALUE_PRESENT, MemoryModuleType.LAST_WOKEN, MemoryStatus.REGISTERED));
     }
 
+    @Override
     protected boolean checkExtraStartConditions(ServerLevel world, LivingEntity entity) {
         if (entity.isPassenger()) {
             return false;
@@ -40,12 +41,14 @@
                     }
                 }
 
-                BlockState blockState = world.getBlockState(globalPos.pos());
+                BlockState blockState = world.getTypeIfLoaded(globalPos.pos()); // Paper
+                if (blockState == null) { return false; } // Paper
                 return globalPos.pos().closerThan(entity.position(), 2.0D) && blockState.is(BlockTags.BEDS) && !blockState.getValue(BedBlock.OCCUPIED);
             }
         }
     }
 
+    @Override
     protected boolean canStillUse(ServerLevel world, LivingEntity entity, long time) {
         Optional<GlobalPos> optional = entity.getBrain().getMemory(MemoryModuleType.HOME);
         if (!optional.isPresent()) {
@@ -56,6 +59,7 @@
         }
     }
 
+    @Override
     protected void start(ServerLevel world, LivingEntity entity, long time) {
         if (time > this.nextOkStartTime) {
             InteractWithDoor.closeDoorsThatIHaveOpenedOrPassedThrough(world, entity, (Node)null, (Node)null);
@@ -64,10 +68,12 @@
 
     }
 
+    @Override
     protected boolean timedOut(long time) {
         return false;
     }
 
+    @Override
     protected void stop(ServerLevel world, LivingEntity entity, long time) {
         if (entity.isSleeping()) {
             entity.stopSleeping();
