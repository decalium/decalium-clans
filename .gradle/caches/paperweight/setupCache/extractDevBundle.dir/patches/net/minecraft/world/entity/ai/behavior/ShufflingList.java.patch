--- a/net/minecraft/world/entity/ai/behavior/ShufflingList.java
+++ b/net/minecraft/world/entity/ai/behavior/ShufflingList.java
@@ -14,12 +14,25 @@
 public class ShufflingList<U> {
     protected final List<ShufflingList.WeightedEntry<U>> entries;
     private final Random random = new Random();
+    private final boolean isUnsafe; // Paper
 
     public ShufflingList() {
+        // Paper start
+        this(true);
+    }
+    public ShufflingList(boolean isUnsafe) {
+        this.isUnsafe = isUnsafe;
+        // Paper end
         this.entries = Lists.newArrayList();
     }
 
     private ShufflingList(List<ShufflingList.WeightedEntry<U>> list) {
+        // Paper start
+        this(list, true);
+    }
+    private ShufflingList(List<ShufflingList.WeightedEntry<U>> list, boolean isUnsafe) {
+        this.isUnsafe = isUnsafe;
+        // Paper end
         this.entries = Lists.newArrayList(list);
     }
 
@@ -35,17 +48,19 @@
     }
 
     public ShufflingList<U> shuffle() {
-        this.entries.forEach((entry) -> {
-            entry.setRandom(this.random.nextFloat());
-        });
-        this.entries.sort(Comparator.comparingDouble(ShufflingList.WeightedEntry::getRandWeight));
-        return this;
+        // Paper start - make concurrent safe, work off a clone of the list
+        List<ShufflingList.WeightedEntry<U>> list = this.isUnsafe ? Lists.newArrayList(this.entries) : this.entries;
+        list.forEach(entry -> entry.setRandom(this.random.nextFloat()));
+        list.sort(Comparator.comparingDouble(ShufflingList.WeightedEntry::getRandWeight));
+        return this.isUnsafe ? new ShufflingList<>(list, this.isUnsafe) : this;
+        // Paper end
     }
 
     public Stream<U> stream() {
         return this.entries.stream().map(ShufflingList.WeightedEntry::getData);
     }
 
+    @Override
     public String toString() {
         return "ShufflingList[" + this.entries + "]";
     }
@@ -76,12 +91,14 @@
             return this.weight;
         }
 
+        @Override
         public String toString() {
             return this.weight + ":" + this.data;
         }
 
         public static <E> Codec<ShufflingList.WeightedEntry<E>> codec(Codec<E> codec) {
             return new Codec<ShufflingList.WeightedEntry<E>>() {
+                @Override
                 public <T> DataResult<Pair<ShufflingList.WeightedEntry<E>, T>> decode(DynamicOps<T> dynamicOps, T object) {
                     Dynamic<T> dynamic = new Dynamic<>(dynamicOps, object);
                     return dynamic.get("data").flatMap(codec::parse).map((data) -> {
@@ -91,6 +108,7 @@
                     });
                 }
 
+                @Override
                 public <T> DataResult<T> encode(ShufflingList.WeightedEntry<E> weightedEntry, DynamicOps<T> dynamicOps, T object) {
                     return dynamicOps.mapBuilder().add("weight", dynamicOps.createInt(weightedEntry.weight)).add("data", codec.encodeStart(dynamicOps, weightedEntry.data)).build(object);
                 }
