--- a/net/minecraft/server/gui/MinecraftServerGui.java
+++ b/net/minecraft/server/gui/MinecraftServerGui.java
@@ -11,6 +11,7 @@
 import java.awt.event.WindowAdapter;
 import java.awt.event.WindowEvent;
 import java.util.Collection;
+import java.util.Objects;
 import java.util.concurrent.atomic.AtomicBoolean;
 import javax.swing.JComponent;
 import javax.swing.JFrame;
@@ -31,8 +32,14 @@
 import net.minecraft.server.dedicated.DedicatedServer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+// Paper start
+import java.io.IOException;
+import java.util.Objects;
+import javax.imageio.ImageIO;
+// Paper end
 
 public class MinecraftServerGui extends JComponent {
+
     private static final Font MONOSPACED = new Font("Monospaced", 0, 12);
     private static final Logger LOGGER = LogManager.getLogger();
     private static final String TITLE = "Minecraft server";
@@ -42,32 +49,44 @@
     private final Collection<Runnable> finalizers = Lists.newArrayList();
     final AtomicBoolean isClosing = new AtomicBoolean();
 
-    public static MinecraftServerGui showFrameFor(DedicatedServer server) {
+    public static MinecraftServerGui showFrameFor(final DedicatedServer server) {
         try {
             UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
-        } catch (Exception var3) {
+        } catch (Exception exception) {
+            ;
         }
 
-        final JFrame jFrame = new JFrame("Minecraft server");
-        final MinecraftServerGui minecraftServerGui = new MinecraftServerGui(server);
-        jFrame.setDefaultCloseOperation(2);
-        jFrame.add(minecraftServerGui);
-        jFrame.pack();
-        jFrame.setLocationRelativeTo((Component)null);
-        jFrame.setVisible(true);
-        jFrame.addWindowListener(new WindowAdapter() {
-            public void windowClosing(WindowEvent windowEvent) {
-                if (!minecraftServerGui.isClosing.getAndSet(true)) {
-                    jFrame.setTitle("Minecraft server - shutting down!");
+        final JFrame jframe = new JFrame("Minecraft server");
+        final MinecraftServerGui servergui = new MinecraftServerGui(server);
+
+        jframe.setDefaultCloseOperation(2);
+        jframe.add(servergui);
+        jframe.pack();
+        jframe.setLocationRelativeTo((Component) null);
+        jframe.setVisible(true);
+        jframe.setName("Minecraft server"); // Paper
+
+        // Paper start - Add logo as frame image
+        try {
+            jframe.setIconImage(ImageIO.read(Objects.requireNonNull(MinecraftServerGui.class.getClassLoader().getResourceAsStream("logo.png"))));
+        } catch (IOException ignore) {
+        }
+        // Paper end
+
+        jframe.addWindowListener(new WindowAdapter() {
+            public void windowClosing(WindowEvent windowevent) {
+                if (!servergui.isClosing.getAndSet(true)) {
+                    jframe.setTitle("Minecraft server - shutting down!");
                     server.halt(true);
-                    minecraftServerGui.runFinalizers();
+                    servergui.runFinalizers();
                 }
 
             }
         });
-        minecraftServerGui.addFinalizer(jFrame::dispose);
-        minecraftServerGui.start();
-        return minecraftServerGui;
+        Objects.requireNonNull(jframe);
+        servergui.addFinalizer(jframe::dispose);
+        servergui.start();
+        return servergui;
     }
 
     private MinecraftServerGui(DedicatedServer server) {
@@ -78,8 +97,8 @@
         try {
             this.add(this.buildChatPanel(), "Center");
             this.add(this.buildInfoPanel(), "West");
-        } catch (Exception var3) {
-            LOGGER.error("Couldn't build server GUI", (Throwable)var3);
+        } catch (Exception exception) {
+            MinecraftServerGui.LOGGER.error("Couldn't build server GUI", exception);
         }
 
     }
@@ -89,54 +108,61 @@
     }
 
     private JComponent buildInfoPanel() {
-        JPanel jPanel = new JPanel(new BorderLayout());
-        StatsComponent statsComponent = new StatsComponent(this.server);
-        this.finalizers.add(statsComponent::close);
-        jPanel.add(statsComponent, "North");
-        jPanel.add(this.buildPlayerPanel(), "Center");
-        jPanel.setBorder(new TitledBorder(new EtchedBorder(), "Stats"));
-        return jPanel;
+        JPanel jpanel = new JPanel(new BorderLayout());
+        com.destroystokyo.paper.gui.GuiStatsComponent guistatscomponent = new com.destroystokyo.paper.gui.GuiStatsComponent(this.server); // Paper
+        Collection<Runnable> collection = this.finalizers; // CraftBukkit - decompile error
+
+        Objects.requireNonNull(guistatscomponent);
+        collection.add(guistatscomponent::close);
+        jpanel.add(guistatscomponent, "North");
+        jpanel.add(this.buildPlayerPanel(), "Center");
+        jpanel.setBorder(new TitledBorder(new EtchedBorder(), "Stats"));
+        return jpanel;
     }
 
     private JComponent buildPlayerPanel() {
-        JList<?> jList = new PlayerListComponent(this.server);
-        JScrollPane jScrollPane = new JScrollPane(jList, 22, 30);
-        jScrollPane.setBorder(new TitledBorder(new EtchedBorder(), "Players"));
-        return jScrollPane;
+        JList<?> jlist = new PlayerListComponent(this.server);
+        JScrollPane jscrollpane = new JScrollPane(jlist, 22, 30);
+
+        jscrollpane.setBorder(new TitledBorder(new EtchedBorder(), "Players"));
+        return jscrollpane;
     }
 
     private JComponent buildChatPanel() {
-        JPanel jPanel = new JPanel(new BorderLayout());
-        JTextArea jTextArea = new JTextArea();
-        JScrollPane jScrollPane = new JScrollPane(jTextArea, 22, 30);
-        jTextArea.setEditable(false);
-        jTextArea.setFont(MONOSPACED);
-        JTextField jTextField = new JTextField();
-        jTextField.addActionListener((event) -> {
-            String string = jTextField.getText().trim();
-            if (!string.isEmpty()) {
-                this.server.handleConsoleInput(string, this.server.createCommandSourceStack());
+        JPanel jpanel = new JPanel(new BorderLayout());
+        JTextArea jtextarea = new JTextArea();
+        JScrollPane jscrollpane = new JScrollPane(jtextarea, 22, 30);
+
+        jtextarea.setEditable(false);
+        jtextarea.setFont(MinecraftServerGui.MONOSPACED);
+        JTextField jtextfield = new JTextField();
+
+        jtextfield.addActionListener((actionevent) -> {
+            String s = jtextfield.getText().trim();
+
+            if (!s.isEmpty()) {
+                this.server.handleConsoleInput(s, this.server.createCommandSourceStack());
             }
 
-            jTextField.setText("");
+            jtextfield.setText("");
         });
-        jTextArea.addFocusListener(new FocusAdapter() {
-            public void focusGained(FocusEvent focusEvent) {
-            }
+        jtextarea.addFocusListener(new FocusAdapter() {
+            public void focusGained(FocusEvent focusevent) {}
         });
-        jPanel.add(jScrollPane, "Center");
-        jPanel.add(jTextField, "South");
-        jPanel.setBorder(new TitledBorder(new EtchedBorder(), "Log and chat"));
+        jpanel.add(jscrollpane, "Center");
+        jpanel.add(jtextfield, "South");
+        jpanel.setBorder(new TitledBorder(new EtchedBorder(), "Log and chat"));
         this.logAppenderThread = new Thread(() -> {
-            String string;
-            while((string = QueueLogAppender.getNextLogEvent("ServerGuiConsole")) != null) {
-                this.print(jTextArea, jScrollPane, string);
+            String s;
+
+            while ((s = QueueLogAppender.getNextLogEvent("ServerGuiConsole")) != null) {
+                this.a(jtextarea, jscrollpane, s);
             }
 
         });
-        this.logAppenderThread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
+        this.logAppenderThread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(MinecraftServerGui.LOGGER));
         this.logAppenderThread.setDaemon(true);
-        return jPanel;
+        return jpanel;
     }
 
     public void start() {
@@ -154,26 +180,29 @@
         this.finalizers.forEach(Runnable::run);
     }
 
-    public void print(JTextArea textArea, JScrollPane scrollPane, String message) {
+    private static final java.util.regex.Pattern ANSI = java.util.regex.Pattern.compile("\\x1B\\[([0-9]{1,2}(;[0-9]{1,2})*)?[m|K]"); // CraftBukkit
+    public void a(JTextArea jtextarea, JScrollPane jscrollpane, String s) {
         if (!SwingUtilities.isEventDispatchThread()) {
             SwingUtilities.invokeLater(() -> {
-                this.print(textArea, scrollPane, message);
+                this.a(jtextarea, jscrollpane, s);
             });
         } else {
-            Document document = textArea.getDocument();
-            JScrollBar jScrollBar = scrollPane.getVerticalScrollBar();
-            boolean bl = false;
-            if (scrollPane.getViewport().getView() == textArea) {
-                bl = (double)jScrollBar.getValue() + jScrollBar.getSize().getHeight() + (double)(MONOSPACED.getSize() * 4) > (double)jScrollBar.getMaximum();
+            Document document = jtextarea.getDocument();
+            JScrollBar jscrollbar = jscrollpane.getVerticalScrollBar();
+            boolean flag = false;
+
+            if (jscrollpane.getViewport().getView() == jtextarea) {
+                flag = (double) jscrollbar.getValue() + jscrollbar.getSize().getHeight() + (double) (MinecraftServerGui.MONOSPACED.getSize() * 4) > (double) jscrollbar.getMaximum();
             }
 
             try {
-                document.insertString(document.getLength(), message, (AttributeSet)null);
-            } catch (BadLocationException var8) {
+                document.insertString(document.getLength(), MinecraftServerGui.ANSI.matcher(s).replaceAll(""), (AttributeSet) null); // CraftBukkit
+            } catch (BadLocationException badlocationexception) {
+                ;
             }
 
-            if (bl) {
-                jScrollBar.setValue(Integer.MAX_VALUE);
+            if (flag) {
+                jscrollbar.setValue(Integer.MAX_VALUE);
             }
 
         }
