--- a/net/minecraft/world/entity/monster/Creeper.java
+++ b/net/minecraft/world/entity/monster/Creeper.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.entity.monster;
 
 import java.util.Collection;
+import java.util.Iterator;
 import javax.annotation.Nullable;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.syncher.EntityDataAccessor;
@@ -39,23 +40,32 @@
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.Explosion;
 import net.minecraft.world.level.GameRules;
+import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.gameevent.GameEvent;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.v1_17_R1.event.CraftEventFactory;
+import org.bukkit.event.entity.CreatureSpawnEvent;
+import org.bukkit.event.entity.ExplosionPrimeEvent;
+// CraftBukkit end
+
 public class Creeper extends Monster implements PowerableMob {
+
     private static final EntityDataAccessor<Integer> DATA_SWELL_DIR = SynchedEntityData.defineId(Creeper.class, EntityDataSerializers.INT);
     private static final EntityDataAccessor<Boolean> DATA_IS_POWERED = SynchedEntityData.defineId(Creeper.class, EntityDataSerializers.BOOLEAN);
     private static final EntityDataAccessor<Boolean> DATA_IS_IGNITED = SynchedEntityData.defineId(Creeper.class, EntityDataSerializers.BOOLEAN);
     private int oldSwell;
-    private int swell;
-    private int maxSwell = 30;
-    private int explosionRadius = 3;
+    public int swell;
+    public int maxSwell = 30;
+    public int explosionRadius = 3;
     private int droppedSkulls;
 
     public Creeper(EntityType<? extends Creeper> type, Level world) {
         super(type, world);
     }
 
+    @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(1, new FloatGoal(this));
         this.goalSelector.addGoal(2, new SwellGoal(this));
@@ -66,48 +76,54 @@
         this.goalSelector.addGoal(6, new LookAtPlayerGoal(this, Player.class, 8.0F));
         this.goalSelector.addGoal(6, new RandomLookAroundGoal(this));
         this.targetSelector.addGoal(1, new NearestAttackableTargetGoal<>(this, Player.class, true));
-        this.targetSelector.addGoal(2, new HurtByTargetGoal(this));
+        this.targetSelector.addGoal(2, new HurtByTargetGoal(this, new Class[0]));
     }
 
     public static AttributeSupplier.Builder createAttributes() {
         return Monster.createMonsterAttributes().add(Attributes.MOVEMENT_SPEED, 0.25D);
     }
 
+    @Override
     public int getMaxFallDistance() {
-        return this.getTarget() == null ? 3 : 3 + (int)(this.getHealth() - 1.0F);
+        return this.getTarget() == null ? 3 : 3 + (int) (this.getHealth() - 1.0F);
     }
 
+    @Override
     public boolean causeFallDamage(float fallDistance, float damageMultiplier, DamageSource damageSource) {
-        boolean bl = super.causeFallDamage(fallDistance, damageMultiplier, damageSource);
-        this.swell = (int)((float)this.swell + fallDistance * 1.5F);
+        boolean flag = super.causeFallDamage(fallDistance, damageMultiplier, damageSource);
+
+        this.swell = (int) ((float) this.swell + fallDistance * 1.5F);
         if (this.swell > this.maxSwell - 5) {
             this.swell = this.maxSwell - 5;
         }
 
-        return bl;
+        return flag;
     }
 
+    @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(DATA_SWELL_DIR, -1);
-        this.entityData.define(DATA_IS_POWERED, false);
-        this.entityData.define(DATA_IS_IGNITED, false);
+        this.entityData.define(Creeper.DATA_SWELL_DIR, -1);
+        this.entityData.define(Creeper.DATA_IS_POWERED, false);
+        this.entityData.define(Creeper.DATA_IS_IGNITED, false);
     }
 
+    @Override
     public void addAdditionalSaveData(CompoundTag nbt) {
         super.addAdditionalSaveData(nbt);
-        if (this.entityData.get(DATA_IS_POWERED)) {
+        if ((Boolean) this.entityData.get(Creeper.DATA_IS_POWERED)) {
             nbt.putBoolean("powered", true);
         }
 
-        nbt.putShort("Fuse", (short)this.maxSwell);
-        nbt.putByte("ExplosionRadius", (byte)this.explosionRadius);
+        nbt.putShort("Fuse", (short) this.maxSwell);
+        nbt.putByte("ExplosionRadius", (byte) this.explosionRadius);
         nbt.putBoolean("ignited", this.isIgnited());
     }
 
+    @Override
     public void readAdditionalSaveData(CompoundTag nbt) {
         super.readAdditionalSaveData(nbt);
-        this.entityData.set(DATA_IS_POWERED, nbt.getBoolean("powered"));
+        this.entityData.set(Creeper.DATA_IS_POWERED, nbt.getBoolean("powered"));
         if (nbt.contains("Fuse", 99)) {
             this.maxSwell = nbt.getShort("Fuse");
         }
@@ -122,14 +138,16 @@
 
     }
 
+    @Override
     public void tick() {
         if (this.isAlive()) {
             this.oldSwell = this.swell;
             if (this.isIgnited()) {
-                this.setSwellDir(1);
+                this.setSwellDir((int) 1);
             }
 
             int i = this.getSwellDir();
+
             if (i > 0 && this.swell == 0) {
                 this.playSound(SoundEvents.CREEPER_PRIMED, 1.0F, 0.5F);
                 this.gameEvent(GameEvent.PRIME_FUSE);
@@ -149,66 +167,87 @@
         super.tick();
     }
 
+    @Override
     public void setTarget(@Nullable LivingEntity target) {
         if (!(target instanceof Goat)) {
             super.setTarget(target);
         }
     }
 
+    @Override
     protected SoundEvent getHurtSound(DamageSource source) {
         return SoundEvents.CREEPER_HURT;
     }
 
+    @Override
     protected SoundEvent getDeathSound() {
         return SoundEvents.CREEPER_DEATH;
     }
 
+    @Override
     protected void dropCustomDeathLoot(DamageSource source, int lootingMultiplier, boolean allowDrops) {
         super.dropCustomDeathLoot(source, lootingMultiplier, allowDrops);
         Entity entity = source.getEntity();
+
         if (entity != this && entity instanceof Creeper) {
-            Creeper creeper = (Creeper)entity;
-            if (creeper.canDropMobsSkull()) {
-                creeper.increaseDroppedSkulls();
-                this.spawnAtLocation(Items.CREEPER_HEAD);
+            Creeper entitycreeper = (Creeper) entity;
+
+            if (entitycreeper.canDropMobsSkull()) {
+                entitycreeper.increaseDroppedSkulls();
+                this.spawnAtLocation((ItemLike) Items.CREEPER_HEAD);
             }
         }
 
     }
 
+    @Override
     public boolean doHurtTarget(Entity target) {
         return true;
     }
 
+    @Override
     public boolean isPowered() {
-        return this.entityData.get(DATA_IS_POWERED);
+        return (Boolean) this.entityData.get(Creeper.DATA_IS_POWERED);
     }
 
     public float getSwelling(float timeDelta) {
-        return Mth.lerp(timeDelta, (float)this.oldSwell, (float)this.swell) / (float)(this.maxSwell - 2);
+        return Mth.lerp(timeDelta, (float) this.oldSwell, (float) this.swell) / (float) (this.maxSwell - 2);
     }
 
     public int getSwellDir() {
-        return this.entityData.get(DATA_SWELL_DIR);
+        return (Integer) this.entityData.get(Creeper.DATA_SWELL_DIR);
     }
 
     public void setSwellDir(int fuseSpeed) {
-        this.entityData.set(DATA_SWELL_DIR, fuseSpeed);
+        this.entityData.set(Creeper.DATA_SWELL_DIR, fuseSpeed);
     }
 
+    @Override
     public void thunderHit(ServerLevel world, LightningBolt lightning) {
         super.thunderHit(world, lightning);
-        this.entityData.set(DATA_IS_POWERED, true);
+        // CraftBukkit start
+        if (CraftEventFactory.callCreeperPowerEvent(this, lightning, org.bukkit.event.entity.CreeperPowerEvent.PowerCause.LIGHTNING).isCancelled()) {
+            return;
+        }
+
+        this.setPowered(true);
+    }
+
+    public void setPowered(boolean powered) {
+        this.entityData.set(Creeper.DATA_IS_POWERED, powered);
     }
+    // CraftBukkit end
 
+    @Override
     protected InteractionResult mobInteract(Player player, InteractionHand hand) {
-        ItemStack itemStack = player.getItemInHand(hand);
-        if (itemStack.is(Items.FLINT_AND_STEEL)) {
+        ItemStack itemstack = player.getItemInHand(hand);
+
+        if (itemstack.is(Items.FLINT_AND_STEEL)) {
             this.level.playSound(player, this.getX(), this.getY(), this.getZ(), SoundEvents.FLINTANDSTEEL_USE, this.getSoundSource(), 1.0F, this.random.nextFloat() * 0.4F + 0.8F);
             if (!this.level.isClientSide) {
                 this.ignite();
-                itemStack.hurtAndBreak(1, player, (playerx) -> {
-                    playerx.broadcastBreakEvent(hand);
+                itemstack.hurtAndBreak(1, player, (entityhuman1) -> {
+                    entityhuman1.broadcastBreakEvent(hand);
                 });
             }
 
@@ -218,43 +257,70 @@
         }
     }
 
-    private void explodeCreeper() {
+    public void explodeCreeper() {
         if (!this.level.isClientSide) {
-            Explosion.BlockInteraction blockInteraction = this.level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING) ? Explosion.BlockInteraction.DESTROY : Explosion.BlockInteraction.NONE;
+            Explosion.BlockInteraction explosion_effect = this.level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING) ? Explosion.BlockInteraction.DESTROY : Explosion.BlockInteraction.NONE;
             float f = this.isPowered() ? 2.0F : 1.0F;
-            this.dead = true;
-            this.level.explode(this, this.getX(), this.getY(), this.getZ(), (float)this.explosionRadius * f, blockInteraction);
-            this.discard();
-            this.spawnLingeringCloud();
+
+            // CraftBukkit start
+            ExplosionPrimeEvent event = new ExplosionPrimeEvent(this.getBukkitEntity(), this.explosionRadius * f, false);
+            this.level.getCraftServer().getPluginManager().callEvent(event);
+            if (!event.isCancelled()) {
+                this.dead = true;
+                this.level.explode(this, this.getX(), this.getY(), this.getZ(), event.getRadius(), event.getFire(), explosion_effect);
+                this.discard();
+                this.spawnLingeringCloud();
+            } else {
+                this.swell = 0;
+                this.entityData.set(DATA_IS_IGNITED, Boolean.valueOf(false)); // Paper
+            }
+            // CraftBukkit end
         }
 
     }
 
     private void spawnLingeringCloud() {
         Collection<MobEffectInstance> collection = this.getActiveEffects();
-        if (!collection.isEmpty()) {
-            AreaEffectCloud areaEffectCloud = new AreaEffectCloud(this.level, this.getX(), this.getY(), this.getZ());
-            areaEffectCloud.setRadius(2.5F);
-            areaEffectCloud.setRadiusOnUse(-0.5F);
-            areaEffectCloud.setWaitTime(10);
-            areaEffectCloud.setDuration(areaEffectCloud.getDuration() / 2);
-            areaEffectCloud.setRadiusPerTick(-areaEffectCloud.getRadius() / (float)areaEffectCloud.getDuration());
 
-            for(MobEffectInstance mobEffectInstance : collection) {
-                areaEffectCloud.addEffect(new MobEffectInstance(mobEffectInstance));
+        if (!collection.isEmpty() && !level.paperConfig.disableCreeperLingeringEffect) { // Paper
+            AreaEffectCloud entityareaeffectcloud = new AreaEffectCloud(this.level, this.getX(), this.getY(), this.getZ());
+
+            entityareaeffectcloud.setOwner(this); // CraftBukkit
+            entityareaeffectcloud.setRadius(2.5F);
+            entityareaeffectcloud.setRadiusOnUse(-0.5F);
+            entityareaeffectcloud.setWaitTime(10);
+            entityareaeffectcloud.setDuration(entityareaeffectcloud.getDuration() / 2);
+            entityareaeffectcloud.setRadiusPerTick(-entityareaeffectcloud.getRadius() / (float) entityareaeffectcloud.getDuration());
+            Iterator iterator = collection.iterator();
+
+            while (iterator.hasNext()) {
+                MobEffectInstance mobeffect = (MobEffectInstance) iterator.next();
+
+                entityareaeffectcloud.addEffect(new MobEffectInstance(mobeffect));
             }
 
-            this.level.addFreshEntity(areaEffectCloud);
+            this.level.addEntity(entityareaeffectcloud, CreatureSpawnEvent.SpawnReason.EXPLOSION); // CraftBukkit
         }
 
     }
 
     public boolean isIgnited() {
-        return this.entityData.get(DATA_IS_IGNITED);
+        return (Boolean) this.entityData.get(Creeper.DATA_IS_IGNITED);
     }
 
     public void ignite() {
-        this.entityData.set(DATA_IS_IGNITED, true);
+        // Paper start
+        setIgnited(true);
+    }
+
+    public void setIgnited(boolean ignited) {
+        if (isIgnited() != ignited) {
+            com.destroystokyo.paper.event.entity.CreeperIgniteEvent event = new com.destroystokyo.paper.event.entity.CreeperIgniteEvent((org.bukkit.entity.Creeper) getBukkitEntity(), ignited);
+            if (event.callEvent()) {
+                this.entityData.set(Creeper.DATA_IS_IGNITED, event.isIgnited());
+            }
+        }
+        // Paper end
     }
 
     public boolean canDropMobsSkull() {
