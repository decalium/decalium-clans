--- a/net/minecraft/world/entity/ai/behavior/RamTarget.java
+++ b/net/minecraft/world/entity/ai/behavior/RamTarget.java
@@ -44,14 +44,17 @@
         this.ramDirection = Vec3.ZERO;
     }
 
+    @Override
     protected boolean checkExtraStartConditions(ServerLevel world, PathfinderMob entity) {
         return entity.getBrain().hasMemoryValue(MemoryModuleType.RAM_TARGET);
     }
 
+    @Override
     protected boolean canStillUse(ServerLevel serverLevel, PathfinderMob pathfinderMob, long l) {
         return pathfinderMob.getBrain().hasMemoryValue(MemoryModuleType.RAM_TARGET);
     }
 
+    @Override
     protected void start(ServerLevel serverLevel, PathfinderMob pathfinderMob, long l) {
         BlockPos blockPos = pathfinderMob.blockPosition();
         Brain<?> brain = pathfinderMob.getBrain();
@@ -60,6 +63,7 @@
         brain.setMemory(MemoryModuleType.WALK_TARGET, new WalkTarget(vec3, this.speed, 0));
     }
 
+    @Override
     protected void tick(ServerLevel serverLevel, E pathfinderMob, long l) {
         List<LivingEntity> list = serverLevel.getNearbyEntities(LivingEntity.class, this.ramTargeting, pathfinderMob, pathfinderMob.getBoundingBox());
         Brain<?> brain = pathfinderMob.getBrain();
@@ -71,7 +75,7 @@
             float f = 0.25F * (float)(i - j);
             float g = Mth.clamp(pathfinderMob.getSpeed() * 1.65F, 0.2F, 3.0F) + f;
             float h = livingEntity.isDamageSourceBlocked(DamageSource.mobAttack(pathfinderMob)) ? 0.5F : 1.0F;
-            livingEntity.knockback((double)(h * g) * this.getKnockbackForce.applyAsDouble(pathfinderMob), this.ramDirection.x(), this.ramDirection.z());
+            livingEntity.knockback((double)(h * g) * this.getKnockbackForce.applyAsDouble(pathfinderMob), this.ramDirection.x(), this.ramDirection.z(), pathfinderMob); // Paper
             this.finishRam(serverLevel, pathfinderMob);
             serverLevel.playSound((Player)null, pathfinderMob, this.getImpactSound.apply(pathfinderMob), SoundSource.HOSTILE, 1.0F, 1.0F);
         } else {
