--- a/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java
+++ b/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java
@@ -35,11 +35,13 @@
     private final Long2ObjectMap<BlockPathTypes> pathTypesByPosCache = new Long2ObjectOpenHashMap<>();
     private final Object2BooleanMap<AABB> collisionCache = new Object2BooleanOpenHashMap<>();
 
+    @Override
     public void prepare(PathNavigationRegion cachedWorld, Mob entity) {
         super.prepare(cachedWorld, entity);
         this.oldWaterCost = entity.getPathfindingMalus(BlockPathTypes.WATER);
     }
 
+    @Override
     public void done() {
         this.mob.setPathfindingMalus(BlockPathTypes.WATER, this.oldWaterCost);
         this.pathTypesByPosCache.clear();
@@ -47,6 +49,7 @@
         super.done();
     }
 
+    @Override
     public Node getStart() {
         BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos();
         int i = this.mob.getBlockY();
@@ -103,10 +106,12 @@
         return this.mob.getPathfindingMalus(blockPathTypes) >= 0.0F;
     }
 
+    @Override
     public Target getGoal(double x, double y, double z) {
         return new Target(this.getNode(Mth.floor(x), Mth.floor(y), Mth.floor(z)));
     }
 
+    @Override
     public int getNeighbors(Node[] successors, Node node) {
         int i = 0;
         int j = 0;
@@ -323,6 +328,7 @@
         });
     }
 
+    @Override
     public BlockPathTypes getBlockPathType(BlockGetter world, int x, int y, int z, Mob mob, int sizeX, int sizeY, int sizeZ, boolean canOpenDoors, boolean canEnterOpenDoors) {
         EnumSet<BlockPathTypes> enumSet = EnumSet.noneOf(BlockPathTypes.class);
         BlockPathTypes blockPathTypes = BlockPathTypes.BLOCKED;
@@ -400,6 +406,7 @@
         });
     }
 
+    @Override
     public BlockPathTypes getBlockPathType(BlockGetter world, int x, int y, int z) {
         return getBlockPathTypeStatic(world, new BlockPos.MutableBlockPos(x, y, z));
     }
@@ -446,7 +453,12 @@
                 for(int n = -1; n <= 1; ++n) {
                     if (l != 0 || n != 0) {
                         pos.set(i + l, j + m, k + n);
-                        BlockState blockState = world.getBlockState(pos);
+                        // Paper start
+                        BlockState blockState = world.getTypeIfLoaded(pos);
+                        if (blockState == null) {
+                            return BlockPathTypes.BLOCKED;
+                        } else {
+                        // Paper end
                         if (blockState.is(Blocks.CACTUS)) {
                             return BlockPathTypes.DANGER_CACTUS;
                         }
@@ -459,9 +471,10 @@
                             return BlockPathTypes.DANGER_FIRE;
                         }
 
-                        if (world.getFluidState(pos).is(FluidTags.WATER)) {
+                        if (blockState.getFluidState().is(FluidTags.WATER)) {
                             return BlockPathTypes.WATER_BORDER;
                         }
+                        } // Paper
                     }
                 }
             }
@@ -471,7 +484,8 @@
     }
 
     protected static BlockPathTypes getBlockPathTypeRaw(BlockGetter world, BlockPos pos) {
-        BlockState blockState = world.getBlockState(pos);
+        BlockState blockState = world.getTypeIfLoaded(pos); // Paper
+        if (blockState == null) return BlockPathTypes.BLOCKED; // Paper
         Block block = blockState.getBlock();
         Material material = blockState.getMaterial();
         if (blockState.isAir()) {
@@ -488,7 +502,7 @@
             } else if (blockState.is(Blocks.COCOA)) {
                 return BlockPathTypes.COCOA;
             } else {
-                FluidState fluidState = world.getFluidState(pos);
+                FluidState fluidState = blockState.getFluidState(); // Paper - remove another get type call
                 if (fluidState.is(FluidTags.LAVA)) {
                     return BlockPathTypes.LAVA;
                 } else if (isBurningBlock(blockState)) {
