--- a/net/minecraft/world/level/PathNavigationRegion.java
+++ b/net/minecraft/world/level/PathNavigationRegion.java
@@ -6,6 +6,7 @@
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.SectionPos;
 import net.minecraft.util.profiling.ProfilerFiller;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.entity.BlockEntity;
@@ -69,20 +70,47 @@
         }
     }
 
+    @Override
     public WorldBorder getWorldBorder() {
         return this.level.getWorldBorder();
     }
 
+    @Override
     public BlockGetter getChunkForCollisions(int chunkX, int chunkZ) {
         return this.getChunk(chunkX, chunkZ);
     }
 
+    // Paper start - if loaded util
+    private ChunkAccess getChunkIfLoaded(int x, int z) {
+        int k = x - this.centerX;
+        int l = z - this.centerZ;
+
+        if (k >= 0 && k < this.chunks.length && l >= 0 && l < this.chunks[k].length) { // Paper - if this changes, update getChunkIfLoaded below
+            return this.chunks[k][l];
+        }
+        return null;
+    }
+    @Override
+    public FluidState getFluidIfLoaded(BlockPos blockposition) {
+        ChunkAccess chunk = getChunkIfLoaded(blockposition.getX() >> 4, blockposition.getZ() >> 4);
+        return chunk == null ? null : chunk.getFluidState(blockposition);
+    }
+
+    @Override
+    public BlockState getTypeIfLoaded(BlockPos blockposition) {
+        ChunkAccess chunk = getChunkIfLoaded(blockposition.getX() >> 4, blockposition.getZ() >> 4);
+        return chunk == null ? null : chunk.getBlockState(blockposition);
+    }
+    // Paper end
+
     @Nullable
+    @Override
     public BlockEntity getBlockEntity(BlockPos pos) {
         ChunkAccess chunkAccess = this.getChunk(pos);
         return chunkAccess.getBlockEntity(pos);
     }
 
+    @Override
     public BlockState getBlockState(BlockPos pos) {
         if (this.isOutsideBuildHeight(pos)) {
             return Blocks.AIR.defaultBlockState();
@@ -92,14 +120,17 @@
         }
     }
 
+    @Override
     public Stream<VoxelShape> getEntityCollisions(@Nullable Entity entity, AABB box, Predicate<Entity> predicate) {
         return Stream.empty();
     }
 
+    @Override
     public Stream<VoxelShape> getCollisions(@Nullable Entity entity, AABB box, Predicate<Entity> predicate) {
         return this.getBlockCollisions(entity, box);
     }
 
+    @Override
     public FluidState getFluidState(BlockPos pos) {
         if (this.isOutsideBuildHeight(pos)) {
             return Fluids.EMPTY.defaultFluidState();
@@ -109,10 +140,12 @@
         }
     }
 
+    @Override
     public int getMinBuildHeight() {
         return this.level.getMinBuildHeight();
     }
 
+    @Override
     public int getHeight() {
         return this.level.getHeight();
     }
