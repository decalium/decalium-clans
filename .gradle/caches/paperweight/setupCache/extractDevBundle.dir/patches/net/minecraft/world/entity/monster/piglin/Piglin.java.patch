--- a/net/minecraft/world/entity/monster/piglin/Piglin.java
+++ b/net/minecraft/world/entity/monster/piglin/Piglin.java
@@ -2,15 +2,21 @@
 
 import com.google.common.collect.ImmutableList;
 import com.mojang.serialization.Dynamic;
+import java.util.Collection;
 import java.util.List;
 import java.util.Random;
 import java.util.UUID;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.Registry;
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.ListTag;
+import net.minecraft.nbt.StringTag;
+import net.minecraft.nbt.Tag;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
+import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
@@ -54,13 +60,20 @@
 import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
+// CraftBukkit start
+import java.util.stream.Collectors;
+import java.util.HashSet;
+import java.util.Set;
+import net.minecraft.world.item.Item;
+// CraftBukkit end
 
 public class Piglin extends AbstractPiglin implements CrossbowAttackMob, InventoryCarrier {
+
     private static final EntityDataAccessor<Boolean> DATA_BABY_ID = SynchedEntityData.defineId(Piglin.class, EntityDataSerializers.BOOLEAN);
     private static final EntityDataAccessor<Boolean> DATA_IS_CHARGING_CROSSBOW = SynchedEntityData.defineId(Piglin.class, EntityDataSerializers.BOOLEAN);
     private static final EntityDataAccessor<Boolean> DATA_IS_DANCING = SynchedEntityData.defineId(Piglin.class, EntityDataSerializers.BOOLEAN);
     private static final UUID SPEED_MODIFIER_BABY_UUID = UUID.fromString("766bfa64-11f3-11ea-8d71-362b9e155667");
-    private static final AttributeModifier SPEED_MODIFIER_BABY = new AttributeModifier(SPEED_MODIFIER_BABY_UUID, "Baby speed boost", (double)0.2F, AttributeModifier.Operation.MULTIPLY_BASE);
+    private static final AttributeModifier SPEED_MODIFIER_BABY = new AttributeModifier(Piglin.SPEED_MODIFIER_BABY_UUID, "Baby speed boost", 0.20000000298023224D, AttributeModifier.Operation.MULTIPLY_BASE);
     private static final int MAX_HEALTH = 16;
     private static final float MOVEMENT_SPEED_WHEN_FIGHTING = 0.35F;
     private static final int ATTACK_DAMAGE = 5;
@@ -70,16 +83,21 @@
     private static final float PROBABILITY_OF_SPAWNING_AS_BABY = 0.2F;
     private static final float BABY_EYE_HEIGHT_ADJUSTMENT = 0.81F;
     private static final double PROBABILITY_OF_SPAWNING_WITH_CROSSBOW_INSTEAD_OF_SWORD = 0.5D;
-    private final SimpleContainer inventory = new SimpleContainer(8);
-    private boolean cannotHunt;
+    public final SimpleContainer inventory = new SimpleContainer(8);
+    public boolean cannotHunt;
     protected static final ImmutableList<SensorType<? extends Sensor<? super Piglin>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ITEMS, SensorType.HURT_BY, SensorType.PIGLIN_SPECIFIC_SENSOR);
-    protected static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, MemoryModuleType.DOORS_TO_CLOSE, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLINS, MemoryModuleType.NEARBY_ADULT_PIGLINS, MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM, MemoryModuleType.HURT_BY, MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.INTERACTION_TARGET, MemoryModuleType.PATH, MemoryModuleType.ANGRY_AT, MemoryModuleType.UNIVERSAL_ANGER, MemoryModuleType.AVOID_TARGET, MemoryModuleType.ADMIRING_ITEM, MemoryModuleType.TIME_TRYING_TO_REACH_ADMIRE_ITEM, MemoryModuleType.ADMIRING_DISABLED, MemoryModuleType.DISABLE_WALK_TO_ADMIRE_ITEM, MemoryModuleType.CELEBRATE_LOCATION, MemoryModuleType.DANCING, MemoryModuleType.HUNTED_RECENTLY, MemoryModuleType.NEAREST_VISIBLE_BABY_HOGLIN, MemoryModuleType.NEAREST_VISIBLE_NEMESIS, MemoryModuleType.NEAREST_VISIBLE_ZOMBIFIED, MemoryModuleType.RIDE_TARGET, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT, MemoryModuleType.NEAREST_VISIBLE_HUNTABLE_HOGLIN, MemoryModuleType.NEAREST_TARGETABLE_PLAYER_NOT_WEARING_GOLD, MemoryModuleType.NEAREST_PLAYER_HOLDING_WANTED_ITEM, MemoryModuleType.ATE_RECENTLY, MemoryModuleType.NEAREST_REPELLENT);
+    protected static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, MemoryModuleType.DOORS_TO_CLOSE, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLINS, MemoryModuleType.NEARBY_ADULT_PIGLINS, MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM, MemoryModuleType.HURT_BY, MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.WALK_TARGET, new MemoryModuleType[]{MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.INTERACTION_TARGET, MemoryModuleType.PATH, MemoryModuleType.ANGRY_AT, MemoryModuleType.UNIVERSAL_ANGER, MemoryModuleType.AVOID_TARGET, MemoryModuleType.ADMIRING_ITEM, MemoryModuleType.TIME_TRYING_TO_REACH_ADMIRE_ITEM, MemoryModuleType.ADMIRING_DISABLED, MemoryModuleType.DISABLE_WALK_TO_ADMIRE_ITEM, MemoryModuleType.CELEBRATE_LOCATION, MemoryModuleType.DANCING, MemoryModuleType.HUNTED_RECENTLY, MemoryModuleType.NEAREST_VISIBLE_BABY_HOGLIN, MemoryModuleType.NEAREST_VISIBLE_NEMESIS, MemoryModuleType.NEAREST_VISIBLE_ZOMBIFIED, MemoryModuleType.RIDE_TARGET, MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT, MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT, MemoryModuleType.NEAREST_VISIBLE_HUNTABLE_HOGLIN, MemoryModuleType.NEAREST_TARGETABLE_PLAYER_NOT_WEARING_GOLD, MemoryModuleType.NEAREST_PLAYER_HOLDING_WANTED_ITEM, MemoryModuleType.ATE_RECENTLY, MemoryModuleType.NEAREST_REPELLENT});
+    // CraftBukkit start - Custom bartering and interest list
+    public Set<Item> allowedBarterItems = new HashSet<>();
+    public Set<Item> interestItems = new HashSet<>();
+    // CraftBukkit end
 
     public Piglin(EntityType<? extends AbstractPiglin> type, Level world) {
         super(type, world);
         this.xpReward = 5;
     }
 
+    @Override
     public void addAdditionalSaveData(CompoundTag nbt) {
         super.addAdditionalSaveData(nbt);
         if (this.isBaby()) {
@@ -91,20 +109,35 @@
         }
 
         nbt.put("Inventory", this.inventory.createTag());
+        // CraftBukkit start
+        ListTag barterList = new ListTag();
+        this.allowedBarterItems.stream().map(Registry.ITEM::getKey).map(ResourceLocation::toString).map(StringTag::valueOf).forEach(barterList::add);
+        nbt.put("Bukkit.BarterList", barterList);
+        ListTag interestList = new ListTag();
+        this.interestItems.stream().map(Registry.ITEM::getKey).map(ResourceLocation::toString).map(StringTag::valueOf).forEach(interestList::add);
+        nbt.put("Bukkit.InterestList", interestList);
+        // CraftBukkit end
     }
 
+    @Override
     public void readAdditionalSaveData(CompoundTag nbt) {
         super.readAdditionalSaveData(nbt);
         this.setBaby(nbt.getBoolean("IsBaby"));
         this.setCannotHunt(nbt.getBoolean("CannotHunt"));
         this.inventory.fromTag(nbt.getList("Inventory", 10));
+        // CraftBukkit start
+        this.allowedBarterItems = nbt.getList("Bukkit.BarterList", 8).stream().map(Tag::getAsString).map(ResourceLocation::tryParse).map(Registry.ITEM::get).collect(Collectors.toCollection(HashSet::new));
+        this.interestItems = nbt.getList("Bukkit.InterestList", 8).stream().map(Tag::getAsString).map(ResourceLocation::tryParse).map(Registry.ITEM::get).collect(Collectors.toCollection(HashSet::new));
+        // CraftBukkit end
     }
 
     @VisibleForDebug
+    @Override
     public Container getInventory() {
         return this.inventory;
     }
 
+    @Override
     protected void dropCustomDeathLoot(DamageSource source, int lootingMultiplier, boolean allowDrops) {
         super.dropCustomDeathLoot(source, lootingMultiplier, allowDrops);
         this.inventory.removeAllItems().forEach(this::spawnAtLocation);
@@ -118,23 +151,25 @@
         return this.inventory.canAddItem(stack);
     }
 
+    @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(DATA_BABY_ID, false);
-        this.entityData.define(DATA_IS_CHARGING_CROSSBOW, false);
-        this.entityData.define(DATA_IS_DANCING, false);
+        this.entityData.define(Piglin.DATA_BABY_ID, false);
+        this.entityData.define(Piglin.DATA_IS_CHARGING_CROSSBOW, false);
+        this.entityData.define(Piglin.DATA_IS_DANCING, false);
     }
 
+    @Override
     public void onSyncedDataUpdated(EntityDataAccessor<?> data) {
         super.onSyncedDataUpdated(data);
-        if (DATA_BABY_ID.equals(data)) {
+        if (Piglin.DATA_BABY_ID.equals(data)) {
             this.refreshDimensions();
         }
 
     }
 
     public static AttributeSupplier.Builder createAttributes() {
-        return Monster.createMonsterAttributes().add(Attributes.MAX_HEALTH, 16.0D).add(Attributes.MOVEMENT_SPEED, (double)0.35F).add(Attributes.ATTACK_DAMAGE, 5.0D);
+        return Monster.createMonsterAttributes().add(Attributes.MAX_HEALTH, 16.0D).add(Attributes.MOVEMENT_SPEED, 0.3499999940395355D).add(Attributes.ATTACK_DAMAGE, 5.0D);
     }
 
     public static boolean checkPiglinSpawnRules(EntityType<Piglin> type, LevelAccessor world, MobSpawnType spawnReason, BlockPos pos, Random random) {
@@ -142,6 +177,7 @@
     }
 
     @Nullable
+    @Override
     public SpawnGroupData finalizeSpawn(ServerLevelAccessor world, DifficultyInstance difficulty, MobSpawnType spawnReason, @Nullable SpawnGroupData entityData, @Nullable CompoundTag entityNbt) {
         if (spawnReason != MobSpawnType.STRUCTURE) {
             if (world.getRandom().nextFloat() < 0.2F) {
@@ -157,14 +193,17 @@
         return super.finalizeSpawn(world, difficulty, spawnReason, entityData, entityNbt);
     }
 
+    @Override
     protected boolean shouldDespawnInPeaceful() {
         return false;
     }
 
+    @Override
     public boolean removeWhenFarAway(double distanceSquared) {
         return !this.isPersistenceRequired();
     }
 
+    @Override
     protected void populateDefaultEquipmentSlots(DifficultyInstance difficulty) {
         if (this.isAdult()) {
             this.maybeWearArmor(EquipmentSlot.HEAD, new ItemStack(Items.GOLDEN_HELMET));
@@ -182,139 +221,154 @@
 
     }
 
+    @Override
     protected Brain.Provider<Piglin> brainProvider() {
-        return Brain.provider(MEMORY_TYPES, SENSOR_TYPES);
+        return Brain.provider((Collection) Piglin.MEMORY_TYPES, (Collection) Piglin.SENSOR_TYPES);
     }
 
+    @Override
     protected Brain<?> makeBrain(Dynamic<?> dynamic) {
         return PiglinAi.makeBrain(this, this.brainProvider().makeBrain(dynamic));
     }
 
+    @Override
     public Brain<Piglin> getBrain() {
-        return super.getBrain();
+        return (Brain<Piglin>) super.getBrain(); // CraftBukkit - Decompile error
     }
 
+    @Override
     public InteractionResult mobInteract(Player player, InteractionHand hand) {
-        InteractionResult interactionResult = super.mobInteract(player, hand);
-        if (interactionResult.consumesAction()) {
-            return interactionResult;
+        InteractionResult enuminteractionresult = super.mobInteract(player, hand);
+
+        if (enuminteractionresult.consumesAction()) {
+            return enuminteractionresult;
         } else if (!this.level.isClientSide) {
             return PiglinAi.mobInteract(this, player, hand);
         } else {
-            boolean bl = PiglinAi.canAdmire(this, player.getItemInHand(hand)) && this.getArmPose() != PiglinArmPose.ADMIRING_ITEM;
-            return bl ? InteractionResult.SUCCESS : InteractionResult.PASS;
+            boolean flag = PiglinAi.canAdmire(this, player.getItemInHand(hand)) && this.getArmPose() != PiglinArmPose.ADMIRING_ITEM;
+
+            return flag ? InteractionResult.SUCCESS : InteractionResult.PASS;
         }
     }
 
+    @Override
     protected float getStandingEyeHeight(Pose pose, EntityDimensions dimensions) {
         return this.isBaby() ? 0.93F : 1.74F;
     }
 
+    @Override
     public double getPassengersRidingOffset() {
-        return (double)this.getBbHeight() * 0.92D;
+        return (double) this.getBbHeight() * 0.92D;
     }
 
+    @Override
     public void setBaby(boolean baby) {
-        this.getEntityData().set(DATA_BABY_ID, baby);
+        this.getEntityData().set(Piglin.DATA_BABY_ID, baby);
         if (!this.level.isClientSide) {
-            AttributeInstance attributeInstance = this.getAttribute(Attributes.MOVEMENT_SPEED);
-            attributeInstance.removeModifier(SPEED_MODIFIER_BABY);
+            AttributeInstance attributemodifiable = this.getAttribute(Attributes.MOVEMENT_SPEED);
+
+            attributemodifiable.removeModifier(Piglin.SPEED_MODIFIER_BABY);
             if (baby) {
-                attributeInstance.addTransientModifier(SPEED_MODIFIER_BABY);
+                attributemodifiable.addTransientModifier(Piglin.SPEED_MODIFIER_BABY);
             }
         }
 
     }
 
+    @Override
     public boolean isBaby() {
-        return this.getEntityData().get(DATA_BABY_ID);
+        return (Boolean) this.getEntityData().get(Piglin.DATA_BABY_ID);
     }
 
     private void setCannotHunt(boolean cannotHunt) {
         this.cannotHunt = cannotHunt;
     }
 
+    @Override
     protected boolean canHunt() {
         return !this.cannotHunt;
     }
 
+    @Override
     protected void customServerAiStep() {
         this.level.getProfiler().push("piglinBrain");
-        this.getBrain().tick((ServerLevel)this.level, this);
+        this.getBrain().tick((ServerLevel) this.level, (Piglin) this); // CraftBukkit - decompile error
         this.level.getProfiler().pop();
         PiglinAi.updateActivity(this);
         super.customServerAiStep();
     }
 
+    @Override
     protected int getExperienceReward(Player player) {
         return this.xpReward;
     }
 
+    @Override
     protected void finishConversion(ServerLevel world) {
         PiglinAi.cancelAdmiring(this);
+        this.forceDrops = true; // Paper
         this.inventory.removeAllItems().forEach(this::spawnAtLocation);
+        this.forceDrops = false; // Paper
         super.finishConversion(world);
     }
 
     private ItemStack createSpawnWeapon() {
-        return (double)this.random.nextFloat() < 0.5D ? new ItemStack(Items.CROSSBOW) : new ItemStack(Items.GOLDEN_SWORD);
+        return (double) this.random.nextFloat() < 0.5D ? new ItemStack(Items.CROSSBOW) : new ItemStack(Items.GOLDEN_SWORD);
     }
 
     private boolean isChargingCrossbow() {
-        return this.entityData.get(DATA_IS_CHARGING_CROSSBOW);
+        return (Boolean) this.entityData.get(Piglin.DATA_IS_CHARGING_CROSSBOW);
     }
 
+    @Override
     public void setChargingCrossbow(boolean charging) {
-        this.entityData.set(DATA_IS_CHARGING_CROSSBOW, charging);
+        this.entityData.set(Piglin.DATA_IS_CHARGING_CROSSBOW, charging);
     }
 
+    @Override
     public void onCrossbowAttackPerformed() {
         this.noActionTime = 0;
     }
 
+    @Override
     public PiglinArmPose getArmPose() {
-        if (this.isDancing()) {
-            return PiglinArmPose.DANCING;
-        } else if (PiglinAi.isLovedItem(this.getOffhandItem())) {
-            return PiglinArmPose.ADMIRING_ITEM;
-        } else if (this.isAggressive() && this.isHoldingMeleeWeapon()) {
-            return PiglinArmPose.ATTACKING_WITH_MELEE_WEAPON;
-        } else if (this.isChargingCrossbow()) {
-            return PiglinArmPose.CROSSBOW_CHARGE;
-        } else {
-            return this.isAggressive() && this.isHolding(Items.CROSSBOW) ? PiglinArmPose.CROSSBOW_HOLD : PiglinArmPose.DEFAULT;
-        }
+        return this.isDancing() ? PiglinArmPose.DANCING : (PiglinAi.isLovedItem(this.getOffhandItem()) ? PiglinArmPose.ADMIRING_ITEM : (this.isAggressive() && this.isHoldingMeleeWeapon() ? PiglinArmPose.ATTACKING_WITH_MELEE_WEAPON : (this.isChargingCrossbow() ? PiglinArmPose.CROSSBOW_CHARGE : (this.isAggressive() && this.isHolding(Items.CROSSBOW) ? PiglinArmPose.CROSSBOW_HOLD : PiglinArmPose.DEFAULT))));
     }
 
     public boolean isDancing() {
-        return this.entityData.get(DATA_IS_DANCING);
+        return (Boolean) this.entityData.get(Piglin.DATA_IS_DANCING);
     }
 
     public void setDancing(boolean dancing) {
-        this.entityData.set(DATA_IS_DANCING, dancing);
+        this.entityData.set(Piglin.DATA_IS_DANCING, dancing);
     }
 
+    @Override
     public boolean hurt(DamageSource source, float amount) {
-        boolean bl = super.hurt(source, amount);
+        boolean flag = super.hurt(source, amount);
+
         if (this.level.isClientSide) {
             return false;
         } else {
-            if (bl && source.getEntity() instanceof LivingEntity) {
-                PiglinAi.wasHurtBy(this, (LivingEntity)source.getEntity());
+            if (flag && source.getEntity() instanceof LivingEntity) {
+                PiglinAi.wasHurtBy(this, (LivingEntity) source.getEntity());
             }
 
-            return bl;
+            return flag;
         }
     }
 
+    @Override
     public void performRangedAttack(LivingEntity target, float pullProgress) {
         this.performCrossbowAttack(this, 1.6F);
     }
 
+    @Override
     public void shootCrossbowProjectile(LivingEntity target, ItemStack crossbow, Projectile projectile, float multiShotSpray) {
         this.shootCrossbowProjectile(this, target, projectile, multiShotSpray, 1.6F);
     }
 
+    @Override
     public boolean canFireProjectileWeapon(ProjectileWeaponItem weapon) {
         return weapon == Items.CROSSBOW;
     }
@@ -324,7 +378,7 @@
     }
 
     protected void holdInOffHand(ItemStack stack) {
-        if (stack.is(PiglinAi.BARTERING_ITEM)) {
+        if (stack.is(PiglinAi.BARTERING_ITEM) || this.allowedBarterItems.contains(stack.getItem())) { // CraftBukkit - Changes to accept custom payment items
             this.setItemSlot(EquipmentSlot.OFFHAND, stack);
             this.setGuaranteedDrop(EquipmentSlot.OFFHAND);
         } else {
@@ -333,37 +387,37 @@
 
     }
 
+    @Override
     public boolean wantsToPickUp(ItemStack stack) {
         return this.level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING) && this.canPickUpLoot() && PiglinAi.wantsToPickup(this, stack);
     }
 
     protected boolean canReplaceCurrentItem(ItemStack stack) {
-        EquipmentSlot equipmentSlot = Mob.getEquipmentSlotForItem(stack);
-        ItemStack itemStack = this.getItemBySlot(equipmentSlot);
-        return this.canReplaceCurrentItem(stack, itemStack);
+        EquipmentSlot enumitemslot = Mob.getEquipmentSlotForItem(stack);
+        ItemStack itemstack1 = this.getItemBySlot(enumitemslot);
+
+        return this.canReplaceCurrentItem(stack, itemstack1);
     }
 
+    @Override
     protected boolean canReplaceCurrentItem(ItemStack newStack, ItemStack oldStack) {
         if (EnchantmentHelper.hasBindingCurse(oldStack)) {
             return false;
         } else {
-            boolean bl = PiglinAi.isLovedItem(newStack) || newStack.is(Items.CROSSBOW);
-            boolean bl2 = PiglinAi.isLovedItem(oldStack) || oldStack.is(Items.CROSSBOW);
-            if (bl && !bl2) {
-                return true;
-            } else if (!bl && bl2) {
-                return false;
-            } else {
-                return this.isAdult() && !newStack.is(Items.CROSSBOW) && oldStack.is(Items.CROSSBOW) ? false : super.canReplaceCurrentItem(newStack, oldStack);
-            }
+            boolean flag = PiglinAi.isLovedByPiglin(newStack, this) || newStack.is(Items.CROSSBOW); // CraftBukkit
+            boolean flag1 = PiglinAi.isLovedByPiglin(oldStack, this) || oldStack.is(Items.CROSSBOW); // CraftBukkit
+
+            return flag && !flag1 ? true : (!flag && flag1 ? false : (this.isAdult() && !newStack.is(Items.CROSSBOW) && oldStack.is(Items.CROSSBOW) ? false : super.canReplaceCurrentItem(newStack, oldStack)));
         }
     }
 
+    @Override
     protected void pickUpItem(ItemEntity item) {
         this.onItemPickup(item);
         PiglinAi.pickUpItem(this, item);
     }
 
+    @Override
     public boolean startRiding(Entity entity, boolean force) {
         if (this.isBaby() && entity.getType() == EntityType.HOGLIN) {
             entity = this.getTopPassenger(entity, 3);
@@ -374,21 +428,26 @@
 
     private Entity getTopPassenger(Entity entity, int maxLevel) {
         List<Entity> list = entity.getPassengers();
-        return maxLevel != 1 && !list.isEmpty() ? this.getTopPassenger(list.get(0), maxLevel - 1) : entity;
+
+        return maxLevel != 1 && !list.isEmpty() ? this.getTopPassenger((Entity) list.get(0), maxLevel - 1) : entity;
     }
 
+    @Override
     protected SoundEvent getAmbientSound() {
-        return this.level.isClientSide ? null : PiglinAi.getSoundForCurrentActivity(this).orElse((SoundEvent)null);
+        return this.level.isClientSide ? null : (SoundEvent) PiglinAi.getSoundForCurrentActivity(this).orElse(null); // CraftBukkit - Decompile error
     }
 
+    @Override
     protected SoundEvent getHurtSound(DamageSource source) {
         return SoundEvents.PIGLIN_HURT;
     }
 
+    @Override
     protected SoundEvent getDeathSound() {
         return SoundEvents.PIGLIN_DEATH;
     }
 
+    @Override
     protected void playStepSound(BlockPos pos, BlockState state) {
         this.playSound(SoundEvents.PIGLIN_STEP, 0.15F, 1.0F);
     }
@@ -397,6 +456,7 @@
         this.playSound(sound, this.getSoundVolume(), this.getVoicePitch());
     }
 
+    @Override
     protected void playConvertedSound() {
         this.playSound(SoundEvents.PIGLIN_CONVERTED_TO_ZOMBIFIED);
     }
