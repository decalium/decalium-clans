--- a/net/minecraft/world/inventory/InventoryMenu.java
+++ b/net/minecraft/world/inventory/InventoryMenu.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.inventory;
 
 import com.mojang.datafixers.util.Pair;
+import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.Container;
 import net.minecraft.world.entity.EquipmentSlot;
@@ -11,8 +12,12 @@
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.crafting.Recipe;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
+import org.bukkit.craftbukkit.v1_17_R1.inventory.CraftInventoryCrafting;
+import org.bukkit.craftbukkit.v1_17_R1.inventory.CraftInventoryView;
+// CraftBukkit end
 
 public class InventoryMenu extends RecipeBookMenu<CraftingContainer> {
+
     public static final int CONTAINER_ID = 0;
     public static final int RESULT_SLOT = 0;
     public static final int CRAFT_SLOT_START = 1;
@@ -30,58 +35,81 @@
     public static final ResourceLocation EMPTY_ARMOR_SLOT_LEGGINGS = new ResourceLocation("item/empty_armor_slot_leggings");
     public static final ResourceLocation EMPTY_ARMOR_SLOT_BOOTS = new ResourceLocation("item/empty_armor_slot_boots");
     public static final ResourceLocation EMPTY_ARMOR_SLOT_SHIELD = new ResourceLocation("item/empty_armor_slot_shield");
-    static final ResourceLocation[] TEXTURE_EMPTY_SLOTS = new ResourceLocation[]{EMPTY_ARMOR_SLOT_BOOTS, EMPTY_ARMOR_SLOT_LEGGINGS, EMPTY_ARMOR_SLOT_CHESTPLATE, EMPTY_ARMOR_SLOT_HELMET};
+    static final ResourceLocation[] TEXTURE_EMPTY_SLOTS = new ResourceLocation[]{InventoryMenu.EMPTY_ARMOR_SLOT_BOOTS, InventoryMenu.EMPTY_ARMOR_SLOT_LEGGINGS, InventoryMenu.EMPTY_ARMOR_SLOT_CHESTPLATE, InventoryMenu.EMPTY_ARMOR_SLOT_HELMET};
     private static final EquipmentSlot[] SLOT_IDS = new EquipmentSlot[]{EquipmentSlot.HEAD, EquipmentSlot.CHEST, EquipmentSlot.LEGS, EquipmentSlot.FEET};
-    private final CraftingContainer craftSlots = new CraftingContainer(this, 2, 2);
-    private final ResultContainer resultSlots = new ResultContainer();
+    // CraftBukkit start
+    private final CraftingContainer craftSlots;
+    private final ResultContainer resultSlots;
+    // CraftBukkit end
     public final boolean active;
     private final Player owner;
+    // CraftBukkit start
+    private CraftInventoryView bukkitEntity = null;
+    private Inventory player;
+    // CraftBukkit end
 
     public InventoryMenu(Inventory inventory, boolean onServer, Player owner) {
-        super((MenuType<?>)null, 0);
+        super((MenuType) null, 0);
         this.active = onServer;
         this.owner = owner;
-        this.addSlot(new ResultSlot(inventory.player, this.craftSlots, this.resultSlots, 0, 154, 28));
+        // CraftBukkit start
+        this.resultSlots = new ResultContainer(); // CraftBukkit - moved to before InventoryCrafting construction
+        this.craftSlots = new CraftingContainer(this, 2, 2, inventory.player); // CraftBukkit - pass player
+        this.craftSlots.resultInventory = this.resultSlots; // CraftBukkit - let InventoryCrafting know about its result slot
+        this.player = inventory; // CraftBukkit - save player
+        setTitle(new TranslatableComponent("container.crafting")); // SPIGOT-4722: Allocate title for player inventory
+        // CraftBukkit end
+        this.addSlot((Slot) (new ResultSlot(inventory.player, this.craftSlots, this.resultSlots, 0, 154, 28)));
 
-        for(int i = 0; i < 2; ++i) {
-            for(int j = 0; j < 2; ++j) {
+        int i;
+        int j;
+
+        for (i = 0; i < 2; ++i) {
+            for (j = 0; j < 2; ++j) {
                 this.addSlot(new Slot(this.craftSlots, j + i * 2, 98 + j * 18, 18 + i * 18));
             }
         }
 
-        for(int k = 0; k < 4; ++k) {
-            final EquipmentSlot equipmentSlot = SLOT_IDS[k];
-            this.addSlot(new Slot(inventory, 39 - k, 8, 8 + k * 18) {
+        for (i = 0; i < 4; ++i) {
+            final EquipmentSlot enumitemslot = InventoryMenu.SLOT_IDS[i];
+
+            this.addSlot(new Slot(inventory, 39 - i, 8, 8 + i * 18) {
+                @Override
                 public int getMaxStackSize() {
                     return 1;
                 }
 
+                @Override
                 public boolean mayPlace(ItemStack stack) {
-                    return equipmentSlot == Mob.getEquipmentSlotForItem(stack);
+                    return enumitemslot == Mob.getEquipmentSlotForItem(stack);
                 }
 
+                @Override
                 public boolean mayPickup(Player playerEntity) {
-                    ItemStack itemStack = this.getItem();
-                    return !itemStack.isEmpty() && !playerEntity.isCreative() && EnchantmentHelper.hasBindingCurse(itemStack) ? false : super.mayPickup(playerEntity);
+                    ItemStack itemstack = this.getItem();
+
+                    return !itemstack.isEmpty() && !playerEntity.isCreative() && EnchantmentHelper.hasBindingCurse(itemstack) ? false : super.mayPickup(playerEntity);
                 }
 
+                @Override
                 public Pair<ResourceLocation, ResourceLocation> getNoItemIcon() {
-                    return Pair.of(InventoryMenu.BLOCK_ATLAS, InventoryMenu.TEXTURE_EMPTY_SLOTS[equipmentSlot.getIndex()]);
+                    return Pair.of(InventoryMenu.BLOCK_ATLAS, InventoryMenu.TEXTURE_EMPTY_SLOTS[enumitemslot.getIndex()]);
                 }
             });
         }
 
-        for(int l = 0; l < 3; ++l) {
-            for(int m = 0; m < 9; ++m) {
-                this.addSlot(new Slot(inventory, m + (l + 1) * 9, 8 + m * 18, 84 + l * 18));
+        for (i = 0; i < 3; ++i) {
+            for (j = 0; j < 9; ++j) {
+                this.addSlot(new Slot(inventory, j + (i + 1) * 9, 8 + j * 18, 84 + i * 18));
             }
         }
 
-        for(int n = 0; n < 9; ++n) {
-            this.addSlot(new Slot(inventory, n, 8 + n * 18, 142));
+        for (i = 0; i < 9; ++i) {
+            this.addSlot(new Slot(inventory, i, 8 + i * 18, 142));
         }
 
         this.addSlot(new Slot(inventory, 40, 77, 62) {
+            @Override
             public Pair<ResourceLocation, ResourceLocation> getNoItemIcon() {
                 return Pair.of(InventoryMenu.BLOCK_ATLAS, InventoryMenu.EMPTY_ARMOR_SLOT_SHIELD);
             }
@@ -92,112 +120,128 @@
         return i >= 36 && i < 45 || i == 45;
     }
 
+    @Override
     public void fillCraftSlotsStackedContents(StackedContents finder) {
         this.craftSlots.fillStackedContents(finder);
     }
 
+    @Override
     public void clearCraftingContent() {
         this.resultSlots.clearContent();
         this.craftSlots.clearContent();
     }
 
+    @Override
     public boolean recipeMatches(Recipe<? super CraftingContainer> recipe) {
         return recipe.matches(this.craftSlots, this.owner.level);
     }
 
+    @Override
     public void slotsChanged(Container inventory) {
         CraftingMenu.slotChangedCraftingGrid(this, this.owner.level, this.owner, this.craftSlots, this.resultSlots);
     }
 
+    @Override
     public void removed(Player player) {
         super.removed(player);
         this.resultSlots.clearContent();
         if (!player.level.isClientSide) {
-            this.clearContainer(player, this.craftSlots);
+            this.clearContainer(player, (Container) this.craftSlots);
         }
     }
 
+    @Override
     public boolean stillValid(Player player) {
         return true;
     }
 
+    @Override
     public ItemStack quickMoveStack(Player player, int index) {
-        ItemStack itemStack = ItemStack.EMPTY;
-        Slot slot = this.slots.get(index);
+        ItemStack itemstack = ItemStack.EMPTY;
+        Slot slot = (Slot) this.slots.get(index);
+
         if (slot != null && slot.hasItem()) {
-            ItemStack itemStack2 = slot.getItem();
-            itemStack = itemStack2.copy();
-            EquipmentSlot equipmentSlot = Mob.getEquipmentSlotForItem(itemStack);
+            ItemStack itemstack1 = slot.getItem();
+
+            itemstack = itemstack1.copy();
+            EquipmentSlot enumitemslot = Mob.getEquipmentSlotForItem(itemstack);
+
             if (index == 0) {
-                if (!this.moveItemStackTo(itemStack2, 9, 45, true)) {
+                if (!this.moveItemStackTo(itemstack1, 9, 45, true)) {
                     return ItemStack.EMPTY;
                 }
 
-                slot.onQuickCraft(itemStack2, itemStack);
+                slot.onQuickCraft(itemstack1, itemstack);
             } else if (index >= 1 && index < 5) {
-                if (!this.moveItemStackTo(itemStack2, 9, 45, false)) {
+                if (!this.moveItemStackTo(itemstack1, 9, 45, false)) {
                     return ItemStack.EMPTY;
                 }
             } else if (index >= 5 && index < 9) {
-                if (!this.moveItemStackTo(itemStack2, 9, 45, false)) {
+                if (!this.moveItemStackTo(itemstack1, 9, 45, false)) {
                     return ItemStack.EMPTY;
                 }
-            } else if (equipmentSlot.getType() == EquipmentSlot.Type.ARMOR && !this.slots.get(8 - equipmentSlot.getIndex()).hasItem()) {
-                int i = 8 - equipmentSlot.getIndex();
-                if (!this.moveItemStackTo(itemStack2, i, i + 1, false)) {
+            } else if (enumitemslot.getType() == EquipmentSlot.Type.ARMOR && !((Slot) this.slots.get(8 - enumitemslot.getIndex())).hasItem()) {
+                int j = 8 - enumitemslot.getIndex();
+
+                if (!this.moveItemStackTo(itemstack1, j, j + 1, false)) {
                     return ItemStack.EMPTY;
                 }
-            } else if (equipmentSlot == EquipmentSlot.OFFHAND && !this.slots.get(45).hasItem()) {
-                if (!this.moveItemStackTo(itemStack2, 45, 46, false)) {
+            } else if (enumitemslot == EquipmentSlot.OFFHAND && !((Slot) this.slots.get(45)).hasItem()) {
+                if (!this.moveItemStackTo(itemstack1, 45, 46, false)) {
                     return ItemStack.EMPTY;
                 }
             } else if (index >= 9 && index < 36) {
-                if (!this.moveItemStackTo(itemStack2, 36, 45, false)) {
+                if (!this.moveItemStackTo(itemstack1, 36, 45, false)) {
                     return ItemStack.EMPTY;
                 }
             } else if (index >= 36 && index < 45) {
-                if (!this.moveItemStackTo(itemStack2, 9, 36, false)) {
+                if (!this.moveItemStackTo(itemstack1, 9, 36, false)) {
                     return ItemStack.EMPTY;
                 }
-            } else if (!this.moveItemStackTo(itemStack2, 9, 45, false)) {
+            } else if (!this.moveItemStackTo(itemstack1, 9, 45, false)) {
                 return ItemStack.EMPTY;
             }
 
-            if (itemStack2.isEmpty()) {
+            if (itemstack1.isEmpty()) {
                 slot.set(ItemStack.EMPTY);
             } else {
                 slot.setChanged();
             }
 
-            if (itemStack2.getCount() == itemStack.getCount()) {
+            if (itemstack1.getCount() == itemstack.getCount()) {
                 return ItemStack.EMPTY;
             }
 
-            slot.onTake(player, itemStack2);
+            slot.onTake(player, itemstack1);
             if (index == 0) {
-                player.drop(itemStack2, false);
+                player.drop(itemstack1, false);
             }
         }
 
-        return itemStack;
+        return itemstack;
     }
 
+    @Override
     public boolean canTakeItemForPickAll(ItemStack stack, Slot slot) {
         return slot.container != this.resultSlots && super.canTakeItemForPickAll(stack, slot);
     }
 
+    @Override
     public int getResultSlotIndex() {
         return 0;
     }
 
+    @Override
     public int getGridWidth() {
         return this.craftSlots.getWidth();
     }
 
+    @Override
     public int getGridHeight() {
         return this.craftSlots.getHeight();
     }
 
+    @Override
     public int getSize() {
         return 5;
     }
@@ -206,11 +250,26 @@
         return this.craftSlots;
     }
 
+    @Override
     public RecipeBookType getRecipeBookType() {
         return RecipeBookType.CRAFTING;
     }
 
+    @Override
     public boolean shouldMoveToInventory(int index) {
         return index != this.getResultSlotIndex();
     }
+
+    // CraftBukkit start
+    @Override
+    public CraftInventoryView getBukkitView() {
+        if (this.bukkitEntity != null) {
+            return this.bukkitEntity;
+        }
+
+        CraftInventoryCrafting inventory = new CraftInventoryCrafting(this.craftSlots, this.resultSlots);
+        this.bukkitEntity = new CraftInventoryView(this.player.player.getBukkitEntity(), inventory, this);
+        return this.bukkitEntity;
+    }
+    // CraftBukkit end
 }
