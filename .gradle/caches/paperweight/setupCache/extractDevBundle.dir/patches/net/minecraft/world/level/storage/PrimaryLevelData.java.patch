--- a/net/minecraft/world/level/storage/PrimaryLevelData.java
+++ b/net/minecraft/world/level/storage/PrimaryLevelData.java
@@ -3,11 +3,14 @@
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Sets;
 import com.mojang.datafixers.DataFixer;
+import com.mojang.serialization.DataResult;
 import com.mojang.serialization.Dynamic;
 import com.mojang.serialization.Lifecycle;
+import java.util.Objects;
 import java.util.Set;
 import java.util.UUID;
 import java.util.stream.Collectors;
+import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.SharedConstants;
@@ -21,8 +24,11 @@
 import net.minecraft.nbt.NbtUtils;
 import net.minecraft.nbt.StringTag;
 import net.minecraft.nbt.Tag;
+import net.minecraft.network.protocol.game.ClientboundChangeDifficultyPacket;
 import net.minecraft.resources.RegistryWriteOps;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.util.datafix.DataFixTypes;
 import net.minecraft.world.Difficulty;
 import net.minecraft.world.level.DataPackConfig;
@@ -36,11 +42,16 @@
 import net.minecraft.world.level.timers.TimerQueue;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.event.weather.ThunderChangeEvent;
+import org.bukkit.event.weather.WeatherChangeEvent;
+// CraftBukkit end
 
 public class PrimaryLevelData implements ServerLevelData, WorldData {
+
     private static final Logger LOGGER = LogManager.getLogger();
     protected static final String WORLD_GEN_SETTINGS = "WorldGenSettings";
-    private LevelSettings settings;
+    public LevelSettings settings;
     private final WorldGenSettings worldGenSettings;
     private final Lifecycle worldGenSettingsLifecycle;
     private int xSpawn;
@@ -74,6 +85,7 @@
     private final Set<String> knownServerBrands;
     private boolean wasModded;
     private final TimerQueue<MinecraftServer> scheduledEvents;
+    public ServerLevel world; // CraftBukkit
 
     private PrimaryLevelData(@Nullable DataFixer dataFixer, int dataVersion, @Nullable CompoundTag playerData, boolean modded, int spawnX, int spawnY, int spawnZ, float spawnAngle, long time, long timeOfDay, int version, int clearWeatherTime, int rainTime, boolean raining, int thunderTime, boolean thundering, boolean initialized, boolean difficultyLocked, WorldBorder.Settings worldBorder, int wanderingTraderSpawnDelay, int wanderingTraderSpawnChance, @Nullable UUID wanderingTraderId, Set<String> serverBrands, TimerQueue<MinecraftServer> scheduledEvents, @Nullable CompoundTag customBossEvents, CompoundTag dragonFight, LevelSettings levelInfo, WorldGenSettings generatorOptions, Lifecycle lifecycle) {
         this.fixerUpper = dataFixer;
@@ -108,44 +120,56 @@
     }
 
     public PrimaryLevelData(LevelSettings levelInfo, WorldGenSettings generatorOptions, Lifecycle lifecycle) {
-        this((DataFixer)null, SharedConstants.getCurrentVersion().getWorldVersion(), (CompoundTag)null, false, 0, 0, 0, 0.0F, 0L, 0L, 19133, 0, 0, false, 0, false, false, false, WorldBorder.DEFAULT_SETTINGS, 0, 0, (UUID)null, Sets.newLinkedHashSet(), new TimerQueue<>(TimerCallbacks.SERVER_CALLBACKS), (CompoundTag)null, new CompoundTag(), levelInfo.copy(), generatorOptions, lifecycle);
+        this((DataFixer) null, SharedConstants.getCurrentVersion().getWorldVersion(), (CompoundTag) null, false, 0, 0, 0, 0.0F, 0L, 0L, 19133, 0, 0, false, 0, false, false, false, WorldBorder.DEFAULT_SETTINGS, 0, 0, (UUID) null, Sets.newLinkedHashSet(), new TimerQueue<>(TimerCallbacks.SERVER_CALLBACKS), (CompoundTag) null, new CompoundTag(), levelInfo.copy(), generatorOptions, lifecycle);
     }
 
     public static PrimaryLevelData parse(Dynamic<Tag> dynamic, DataFixer dataFixer, int dataVersion, @Nullable CompoundTag playerData, LevelSettings levelInfo, LevelVersion saveVersionInfo, WorldGenSettings generatorOptions, Lifecycle lifecycle) {
-        long l = dynamic.get("Time").asLong(0L);
-        CompoundTag compoundTag = dynamic.get("DragonFight").result().map(Dynamic::getValue).orElseGet(() -> {
-            return dynamic.get("DimensionData").get("1").get("DragonFight").orElseEmptyMap().getValue();
+        long j = dynamic.get("Time").asLong(0L);
+        CompoundTag nbttagcompound1 = (CompoundTag) dynamic.get("DragonFight").result().map(Dynamic::getValue).orElseGet(() -> {
+            return (Tag) dynamic.get("DimensionData").get("1").get("DragonFight").orElseEmptyMap().getValue();
         });
-        return new PrimaryLevelData(dataFixer, dataVersion, playerData, dynamic.get("WasModded").asBoolean(false), dynamic.get("SpawnX").asInt(0), dynamic.get("SpawnY").asInt(0), dynamic.get("SpawnZ").asInt(0), dynamic.get("SpawnAngle").asFloat(0.0F), l, dynamic.get("DayTime").asLong(l), saveVersionInfo.levelDataVersion(), dynamic.get("clearWeatherTime").asInt(0), dynamic.get("rainTime").asInt(0), dynamic.get("raining").asBoolean(false), dynamic.get("thunderTime").asInt(0), dynamic.get("thundering").asBoolean(false), dynamic.get("initialized").asBoolean(true), dynamic.get("DifficultyLocked").asBoolean(false), WorldBorder.Settings.read(dynamic, WorldBorder.DEFAULT_SETTINGS), dynamic.get("WanderingTraderSpawnDelay").asInt(0), dynamic.get("WanderingTraderSpawnChance").asInt(0), dynamic.get("WanderingTraderId").read(SerializableUUID.CODEC).result().orElse((UUID)null), dynamic.get("ServerBrands").asStream().flatMap((dynamicx) -> {
-            return Util.toStream(dynamicx.asString().result());
-        }).collect(Collectors.toCollection(Sets::newLinkedHashSet)), new TimerQueue<>(TimerCallbacks.SERVER_CALLBACKS, dynamic.get("ScheduledEvents").asStream()), (CompoundTag)dynamic.get("CustomBossEvents").orElseEmptyMap().getValue(), compoundTag, levelInfo, generatorOptions, lifecycle);
+
+        // CraftBukkit - decompile error
+        return new PrimaryLevelData(dataFixer, dataVersion, playerData, dynamic.get("WasModded").asBoolean(false), dynamic.get("SpawnX").asInt(0), dynamic.get("SpawnY").asInt(0), dynamic.get("SpawnZ").asInt(0), dynamic.get("SpawnAngle").asFloat(0.0F), j, dynamic.get("DayTime").asLong(j), saveVersionInfo.levelDataVersion(), dynamic.get("clearWeatherTime").asInt(0), dynamic.get("rainTime").asInt(0), dynamic.get("raining").asBoolean(false), dynamic.get("thunderTime").asInt(0), dynamic.get("thundering").asBoolean(false), dynamic.get("initialized").asBoolean(true), dynamic.get("DifficultyLocked").asBoolean(false), WorldBorder.Settings.read(dynamic, WorldBorder.DEFAULT_SETTINGS), dynamic.get("WanderingTraderSpawnDelay").asInt(0), dynamic.get("WanderingTraderSpawnChance").asInt(0), (UUID) dynamic.get("WanderingTraderId").read(SerializableUUID.CODEC).result().orElse(null), (Set) dynamic.get("ServerBrands").asStream().flatMap((dynamic1) -> {
+            return Util.toStream(dynamic1.asString().result());
+        }).collect(Collectors.toCollection(Sets::newLinkedHashSet)), new TimerQueue<>(TimerCallbacks.SERVER_CALLBACKS, dynamic.get("ScheduledEvents").asStream()), (CompoundTag) dynamic.get("CustomBossEvents").orElseEmptyMap().getValue(), nbttagcompound1, levelInfo, generatorOptions, lifecycle);
     }
 
+    @Override
     public CompoundTag createTag(RegistryAccess registryManager, @Nullable CompoundTag playerNbt) {
         this.updatePlayerTag();
         if (playerNbt == null) {
             playerNbt = this.loadedPlayerTag;
         }
 
-        CompoundTag compoundTag = new CompoundTag();
-        this.setTagData(registryManager, compoundTag, playerNbt);
-        return compoundTag;
+        CompoundTag nbttagcompound1 = new CompoundTag();
+
+        this.setTagData(registryManager, nbttagcompound1, playerNbt);
+        return nbttagcompound1;
     }
 
     private void setTagData(RegistryAccess registryManager, CompoundTag levelTag, @Nullable CompoundTag playerTag) {
-        ListTag listTag = new ListTag();
-        this.knownServerBrands.stream().map(StringTag::valueOf).forEach(listTag::add);
-        levelTag.put("ServerBrands", listTag);
+        ListTag nbttaglist = new ListTag();
+        Stream<StringTag> stream = this.knownServerBrands.stream().map(StringTag::valueOf); // CraftBukkit - decompile error
+
+        Objects.requireNonNull(nbttaglist);
+        stream.forEach(nbttaglist::add);
+        levelTag.put("ServerBrands", nbttaglist);
         levelTag.putBoolean("WasModded", this.wasModded);
-        CompoundTag compoundTag = new CompoundTag();
-        compoundTag.putString("Name", SharedConstants.getCurrentVersion().getName());
-        compoundTag.putInt("Id", SharedConstants.getCurrentVersion().getWorldVersion());
-        compoundTag.putBoolean("Snapshot", !SharedConstants.getCurrentVersion().isStable());
-        levelTag.put("Version", compoundTag);
+        CompoundTag nbttagcompound2 = new CompoundTag();
+
+        nbttagcompound2.putString("Name", SharedConstants.getCurrentVersion().getName());
+        nbttagcompound2.putInt("Id", SharedConstants.getCurrentVersion().getWorldVersion());
+        nbttagcompound2.putBoolean("Snapshot", !SharedConstants.getCurrentVersion().isStable());
+        levelTag.put("Version", nbttagcompound2);
         levelTag.putInt("DataVersion", SharedConstants.getCurrentVersion().getWorldVersion());
-        RegistryWriteOps<Tag> registryWriteOps = RegistryWriteOps.create(NbtOps.INSTANCE, registryManager);
-        WorldGenSettings.CODEC.encodeStart(registryWriteOps, this.worldGenSettings).resultOrPartial(Util.prefix("WorldGenSettings: ", LOGGER::error)).ifPresent((tag) -> {
-            levelTag.put("WorldGenSettings", tag);
+        RegistryWriteOps<Tag> registrywriteops = RegistryWriteOps.create(NbtOps.INSTANCE, registryManager);
+        DataResult<Tag> dataresult = WorldGenSettings.CODEC.encodeStart(registrywriteops, this.worldGenSettings); // CraftBukkit - decompile error
+        Logger logger = PrimaryLevelData.LOGGER;
+
+        Objects.requireNonNull(logger);
+        dataresult.resultOrPartial(Util.prefix("WorldGenSettings: ", (java.util.function.Consumer<String>) logger::error)).ifPresent((nbtbase) -> { // CraftBukkit - decompile error
+            levelTag.put("WorldGenSettings", nbtbase);
         });
         levelTag.putInt("GameType", this.settings.gameType().getId());
         levelTag.putInt("SpawnX", this.xSpawn);
@@ -166,7 +190,7 @@
         levelTag.putBoolean("allowCommands", this.settings.allowCommands());
         levelTag.putBoolean("initialized", this.initialized);
         this.worldBorder.write(levelTag);
-        levelTag.putByte("Difficulty", (byte)this.settings.difficulty().getId());
+        levelTag.putByte("Difficulty", (byte) this.settings.difficulty().getId());
         levelTag.putBoolean("DifficultyLocked", this.difficultyLocked);
         levelTag.put("GameRules", this.settings.gameRules().createTag());
         levelTag.put("DragonFight", this.endDragonFightData);
@@ -174,8 +198,8 @@
             levelTag.put("Player", playerTag);
         }
 
-        DataPackConfig.CODEC.encodeStart(NbtOps.INSTANCE, this.settings.getDataPackConfig()).result().ifPresent((tag) -> {
-            levelTag.put("DataPacks", tag);
+        DataPackConfig.CODEC.encodeStart(NbtOps.INSTANCE, this.settings.getDataPackConfig()).result().ifPresent((nbtbase) -> {
+            levelTag.put("DataPacks", nbtbase);
         });
         if (this.customBossEvents != null) {
             levelTag.put("CustomBossEvents", this.customBossEvents);
@@ -188,28 +212,35 @@
             levelTag.putUUID("WanderingTraderId", this.wanderingTraderId);
         }
 
+        levelTag.putString("Bukkit.Version", Bukkit.getName() + "/" + Bukkit.getVersion() + "/" + Bukkit.getBukkitVersion()); // CraftBukkit
     }
 
+    @Override
     public int getXSpawn() {
         return this.xSpawn;
     }
 
+    @Override
     public int getYSpawn() {
         return this.ySpawn;
     }
 
+    @Override
     public int getZSpawn() {
         return this.zSpawn;
     }
 
+    @Override
     public float getSpawnAngle() {
         return this.spawnAngle;
     }
 
+    @Override
     public long getGameTime() {
         return this.gameTime;
     }
 
+    @Override
     public long getDayTime() {
         return this.dayTime;
     }
@@ -218,7 +249,7 @@
         if (!this.upgradedPlayerTag && this.loadedPlayerTag != null) {
             if (this.playerDataVersion < SharedConstants.getCurrentVersion().getWorldVersion()) {
                 if (this.fixerUpper == null) {
-                    throw (NullPointerException)Util.pauseInIde(new NullPointerException("Fixer Upper not set inside LevelData, and the player tag is not upgraded."));
+                    throw (NullPointerException) Util.pauseInIde((Throwable) (new NullPointerException("Fixer Upper not set inside LevelData, and the player tag is not upgraded.")));
                 }
 
                 this.loadedPlayerTag = NbtUtils.update(this.fixerUpper, DataFixTypes.PLAYER, this.loadedPlayerTag, this.playerDataVersion);
@@ -228,35 +259,43 @@
         }
     }
 
+    @Override
     public CompoundTag getLoadedPlayerTag() {
         this.updatePlayerTag();
         return this.loadedPlayerTag;
     }
 
+    @Override
     public void setXSpawn(int spawnX) {
         this.xSpawn = spawnX;
     }
 
+    @Override
     public void setYSpawn(int spawnY) {
         this.ySpawn = spawnY;
     }
 
+    @Override
     public void setZSpawn(int spawnZ) {
         this.zSpawn = spawnZ;
     }
 
+    @Override
     public void setSpawnAngle(float angle) {
         this.spawnAngle = angle;
     }
 
+    @Override
     public void setGameTime(long time) {
         this.gameTime = time;
     }
 
+    @Override
     public void setDayTime(long timeOfDay) {
         this.dayTime = timeOfDay;
     }
 
+    @Override
     public void setSpawn(BlockPos pos, float angle) {
         this.xSpawn = pos.getX();
         this.ySpawn = pos.getY();
@@ -264,191 +303,290 @@
         this.spawnAngle = angle;
     }
 
+    @Override
     public String getLevelName() {
         return this.settings.levelName();
     }
 
+    @Override
     public int getVersion() {
         return this.version;
     }
 
+    @Override
     public int getClearWeatherTime() {
         return this.clearWeatherTime;
     }
 
+    @Override
     public void setClearWeatherTime(int clearWeatherTime) {
         this.clearWeatherTime = clearWeatherTime;
     }
 
+    @Override
     public boolean isThundering() {
         return this.thundering;
     }
 
+    @Override
     public void setThundering(boolean thundering) {
-        this.thundering = thundering;
+        // Paper start
+        this.setThundering(thundering, org.bukkit.event.weather.ThunderChangeEvent.Cause.UNKNOWN);
+    }
+    public void setThundering(boolean flag, org.bukkit.event.weather.ThunderChangeEvent.Cause cause) {
+        // Paper end
+        // CraftBukkit start
+        if (this.thundering == flag) {
+            return;
+        }
+
+        org.bukkit.World world = Bukkit.getWorld(this.getLevelName());
+        if (world != null) {
+            ThunderChangeEvent thunder = new ThunderChangeEvent(world, flag, cause); // Paper
+            Bukkit.getServer().getPluginManager().callEvent(thunder);
+            if (thunder.isCancelled()) {
+                return;
+            }
+        }
+        // CraftBukkit end
+        this.thundering = flag;
     }
 
+    @Override
     public int getThunderTime() {
         return this.thunderTime;
     }
 
+    @Override
     public void setThunderTime(int thunderTime) {
         this.thunderTime = thunderTime;
     }
 
+    @Override
     public boolean isRaining() {
         return this.raining;
     }
 
+    @Override
     public void setRaining(boolean raining) {
+        // Paper start
+        this.setRaining(raining, org.bukkit.event.weather.WeatherChangeEvent.Cause.UNKNOWN);
+    }
+
+    public void setRaining(boolean raining, org.bukkit.event.weather.WeatherChangeEvent.Cause cause) {
+        // Paper end
+        // CraftBukkit start
+        if (this.raining == raining) {
+            return;
+        }
+
+        org.bukkit.World world = Bukkit.getWorld(this.getLevelName());
+        if (world != null) {
+            WeatherChangeEvent weather = new WeatherChangeEvent(world, raining, cause); // Paper
+            Bukkit.getServer().getPluginManager().callEvent(weather);
+            if (weather.isCancelled()) {
+                return;
+            }
+        }
+        // CraftBukkit end
         this.raining = raining;
     }
 
+    @Override
     public int getRainTime() {
         return this.rainTime;
     }
 
+    @Override
     public void setRainTime(int rainTime) {
         this.rainTime = rainTime;
     }
 
+    @Override
     public GameType getGameType() {
         return this.settings.gameType();
     }
 
+    @Override
     public void setGameType(GameType gameMode) {
         this.settings = this.settings.withGameType(gameMode);
     }
 
+    @Override
     public boolean isHardcore() {
         return this.settings.hardcore();
     }
 
+    @Override
     public boolean getAllowCommands() {
         return this.settings.allowCommands();
     }
 
+    @Override
     public boolean isInitialized() {
         return this.initialized;
     }
 
+    @Override
     public void setInitialized(boolean initialized) {
         this.initialized = initialized;
     }
 
+    @Override
     public GameRules getGameRules() {
         return this.settings.gameRules();
     }
 
+    @Override
     public WorldBorder.Settings getWorldBorder() {
         return this.worldBorder;
     }
 
+    @Override
     public void setWorldBorder(WorldBorder.Settings properties) {
         this.worldBorder = properties;
     }
 
+    @Override
     public Difficulty getDifficulty() {
         return this.settings.difficulty();
     }
 
+    @Override
     public void setDifficulty(Difficulty difficulty) {
         this.settings = this.settings.withDifficulty(difficulty);
+        // CraftBukkit start
+        ClientboundChangeDifficultyPacket packet = new ClientboundChangeDifficultyPacket(this.getDifficulty(), this.isDifficultyLocked());
+        for (ServerPlayer player : (java.util.List<ServerPlayer>) (java.util.List) this.world.players()) {
+            player.connection.send(packet);
+        }
+        // CraftBukkit end
     }
 
+    @Override
     public boolean isDifficultyLocked() {
         return this.difficultyLocked;
     }
 
+    @Override
     public void setDifficultyLocked(boolean locked) {
         this.difficultyLocked = locked;
     }
 
+    @Override
     public TimerQueue<MinecraftServer> getScheduledEvents() {
         return this.scheduledEvents;
     }
 
+    @Override
     public void fillCrashReportCategory(CrashReportCategory reportSection, LevelHeightAccessor world) {
         ServerLevelData.super.fillCrashReportCategory(reportSection, world);
         WorldData.super.fillCrashReportCategory(reportSection);
     }
 
+    @Override
     public WorldGenSettings worldGenSettings() {
         return this.worldGenSettings;
     }
 
+    @Override
     public Lifecycle worldGenSettingsLifecycle() {
         return this.worldGenSettingsLifecycle;
     }
 
+    @Override
     public CompoundTag endDragonFightData() {
         return this.endDragonFightData;
     }
 
+    @Override
     public void setEndDragonFightData(CompoundTag nbt) {
         this.endDragonFightData = nbt;
     }
 
+    @Override
     public DataPackConfig getDataPackConfig() {
         return this.settings.getDataPackConfig();
     }
 
+    @Override
     public void setDataPackConfig(DataPackConfig dataPackSettings) {
         this.settings = this.settings.withDataPackConfig(dataPackSettings);
     }
 
     @Nullable
+    @Override
     public CompoundTag getCustomBossEvents() {
         return this.customBossEvents;
     }
 
+    @Override
     public void setCustomBossEvents(@Nullable CompoundTag nbt) {
         this.customBossEvents = nbt;
     }
 
+    @Override
     public int getWanderingTraderSpawnDelay() {
         return this.wanderingTraderSpawnDelay;
     }
 
+    @Override
     public void setWanderingTraderSpawnDelay(int wanderingTraderSpawnDelay) {
         this.wanderingTraderSpawnDelay = wanderingTraderSpawnDelay;
     }
 
+    @Override
     public int getWanderingTraderSpawnChance() {
         return this.wanderingTraderSpawnChance;
     }
 
+    @Override
     public void setWanderingTraderSpawnChance(int wanderingTraderSpawnChance) {
         this.wanderingTraderSpawnChance = wanderingTraderSpawnChance;
     }
 
     @Nullable
+    @Override
     public UUID getWanderingTraderId() {
         return this.wanderingTraderId;
     }
 
+    @Override
     public void setWanderingTraderId(UUID uuid) {
         this.wanderingTraderId = uuid;
     }
 
+    @Override
     public void setModdedInfo(String brand, boolean modded) {
         this.knownServerBrands.add(brand);
         this.wasModded |= modded;
     }
 
+    @Override
     public boolean wasModded() {
         return this.wasModded;
     }
 
+    @Override
     public Set<String> getKnownServerBrands() {
         return ImmutableSet.copyOf(this.knownServerBrands);
     }
 
+    @Override
     public ServerLevelData overworldData() {
         return this;
     }
 
+    @Override
     public LevelSettings getLevelSettings() {
         return this.settings.copy();
     }
+
+    // CraftBukkit start - Check if the name stored in NBT is the correct one
+    public void checkName(String name) {
+        if (!this.settings.levelName.equals(name)) {
+            this.settings.levelName = name;
+        }
+    }
+    // CraftBukkit end
 }
