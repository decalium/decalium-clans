--- a/net/minecraft/world/entity/ai/behavior/InteractWithDoor.java
+++ b/net/minecraft/world/entity/ai/behavior/InteractWithDoor.java
@@ -3,12 +3,16 @@
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Sets;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Objects;
+import java.util.Set;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.GlobalPos;
+import net.minecraft.core.Position;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.tags.BlockTags;
+import net.minecraft.tags.Tag;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
@@ -19,6 +23,7 @@
 import net.minecraft.world.level.pathfinder.Path;
 
 public class InteractWithDoor extends Behavior<LivingEntity> {
+
     private static final int COOLDOWN_BEFORE_RERUNNING_IN_SAME_NODE = 20;
     private static final double SKIP_CLOSING_DOOR_IF_FURTHER_AWAY_THAN = 2.0D;
     private static final double MAX_DISTANCE_TO_HOLD_DOOR_OPEN_FOR_OTHER_MOBS = 2.0D;
@@ -32,9 +37,10 @@
 
     @Override
     protected boolean checkExtraStartConditions(ServerLevel world, LivingEntity entity) {
-        Path path = entity.getBrain().getMemory(MemoryModuleType.PATH).get();
-        if (!path.notStarted() && !path.isDone()) {
-            if (!Objects.equals(this.lastCheckedNode, path.getNextNode())) {
+        Path pathentity = (Path) entity.getBrain().getMemory(MemoryModuleType.PATH).get();
+
+        if (!pathentity.notStarted() && !pathentity.isDone()) {
+            if (!Objects.equals(this.lastCheckedNode, pathentity.getNextNode())) {
                 this.remainingCooldown = 20;
                 return true;
             } else {
@@ -51,57 +57,80 @@
 
     @Override
     protected void start(ServerLevel world, LivingEntity entity, long time) {
-        Path path = entity.getBrain().getMemory(MemoryModuleType.PATH).get();
-        this.lastCheckedNode = path.getNextNode();
-        Node node = path.getPreviousNode();
-        Node node2 = path.getNextNode();
-        BlockPos blockPos = node.asBlockPos();
-        BlockState blockState = world.getBlockState(blockPos);
-        if (blockState.is(BlockTags.WOODEN_DOORS)) {
-            DoorBlock doorBlock = (DoorBlock)blockState.getBlock();
-            if (!doorBlock.isOpen(blockState)) {
-                doorBlock.setOpen(entity, world, blockState, blockPos, true);
+        Path pathentity = (Path) entity.getBrain().getMemory(MemoryModuleType.PATH).get();
+
+        this.lastCheckedNode = pathentity.getNextNode();
+        Node pathpoint = pathentity.getPreviousNode();
+        Node pathpoint1 = pathentity.getNextNode();
+        BlockPos blockposition = pathpoint.asBlockPos();
+        BlockState iblockdata = world.getBlockState(blockposition);
+
+        if (iblockdata.is((Tag) BlockTags.WOODEN_DOORS)) {
+            DoorBlock blockdoor = (DoorBlock) iblockdata.getBlock();
+
+            if (!blockdoor.isOpen(iblockdata)) {
+                // CraftBukkit start - entities opening doors
+                org.bukkit.event.entity.EntityInteractEvent event = new org.bukkit.event.entity.EntityInteractEvent(entity.getBukkitEntity(), org.bukkit.craftbukkit.v1_18_R1.block.CraftBlock.at(entity.level, blockposition));
+                entity.level.getCraftServer().getPluginManager().callEvent(event);
+                if (event.isCancelled()) {
+                    return;
+                }
+                // CraftBukkit end
+                blockdoor.setOpen(entity, world, iblockdata, blockposition, true);
             }
 
-            this.rememberDoorToClose(world, entity, blockPos);
+            this.rememberDoorToClose(world, entity, blockposition);
         }
 
-        BlockPos blockPos2 = node2.asBlockPos();
-        BlockState blockState2 = world.getBlockState(blockPos2);
-        if (blockState2.is(BlockTags.WOODEN_DOORS)) {
-            DoorBlock doorBlock2 = (DoorBlock)blockState2.getBlock();
-            if (!doorBlock2.isOpen(blockState2)) {
-                doorBlock2.setOpen(entity, world, blockState2, blockPos2, true);
-                this.rememberDoorToClose(world, entity, blockPos2);
+        BlockPos blockposition1 = pathpoint1.asBlockPos();
+        BlockState iblockdata1 = world.getBlockState(blockposition1);
+
+        if (iblockdata1.is((Tag) BlockTags.WOODEN_DOORS)) {
+            DoorBlock blockdoor1 = (DoorBlock) iblockdata1.getBlock();
+
+            if (!blockdoor1.isOpen(iblockdata1)) {
+                // CraftBukkit start - entities opening doors
+                org.bukkit.event.entity.EntityInteractEvent event = new org.bukkit.event.entity.EntityInteractEvent(entity.getBukkitEntity(), org.bukkit.craftbukkit.v1_18_R1.block.CraftBlock.at(entity.level, blockposition1));
+                entity.level.getCraftServer().getPluginManager().callEvent(event);
+                if (event.isCancelled()) {
+                    return;
+                }
+                // CraftBukkit end
+                blockdoor1.setOpen(entity, world, iblockdata1, blockposition1, true);
+                this.rememberDoorToClose(world, entity, blockposition1);
             }
         }
 
-        closeDoorsThatIHaveOpenedOrPassedThrough(world, entity, node, node2);
+        InteractWithDoor.closeDoorsThatIHaveOpenedOrPassedThrough(world, entity, pathpoint, pathpoint1);
     }
 
     public static void closeDoorsThatIHaveOpenedOrPassedThrough(ServerLevel world, LivingEntity entity, @Nullable Node lastNode, @Nullable Node currentNode) {
-        Brain<?> brain = entity.getBrain();
-        if (brain.hasMemoryValue(MemoryModuleType.DOORS_TO_CLOSE)) {
-            Iterator<GlobalPos> iterator = brain.getMemory(MemoryModuleType.DOORS_TO_CLOSE).get().iterator();
+        Brain<?> behaviorcontroller = entity.getBrain();
 
-            while(iterator.hasNext()) {
-                GlobalPos globalPos = iterator.next();
-                BlockPos blockPos = globalPos.pos();
-                if ((lastNode == null || !lastNode.asBlockPos().equals(blockPos)) && (currentNode == null || !currentNode.asBlockPos().equals(blockPos))) {
-                    if (isDoorTooFarAway(world, entity, globalPos)) {
+        if (behaviorcontroller.hasMemoryValue(MemoryModuleType.DOORS_TO_CLOSE)) {
+            Iterator iterator = ((Set) behaviorcontroller.getMemory(MemoryModuleType.DOORS_TO_CLOSE).get()).iterator();
+
+            while (iterator.hasNext()) {
+                GlobalPos globalpos = (GlobalPos) iterator.next();
+                BlockPos blockposition = globalpos.pos();
+
+                if ((lastNode == null || !lastNode.asBlockPos().equals(blockposition)) && (currentNode == null || !currentNode.asBlockPos().equals(blockposition))) {
+                    if (InteractWithDoor.isDoorTooFarAway(world, entity, globalpos)) {
                         iterator.remove();
                     } else {
-                        BlockState blockState = world.getBlockState(blockPos);
-                        if (!blockState.is(BlockTags.WOODEN_DOORS)) {
+                        BlockState iblockdata = world.getBlockState(blockposition);
+
+                        if (!iblockdata.is((Tag) BlockTags.WOODEN_DOORS)) {
                             iterator.remove();
                         } else {
-                            DoorBlock doorBlock = (DoorBlock)blockState.getBlock();
-                            if (!doorBlock.isOpen(blockState)) {
+                            DoorBlock blockdoor = (DoorBlock) iblockdata.getBlock();
+
+                            if (!blockdoor.isOpen(iblockdata)) {
                                 iterator.remove();
-                            } else if (areOtherMobsComingThroughDoor(world, entity, blockPos)) {
+                            } else if (InteractWithDoor.areOtherMobsComingThroughDoor(world, entity, blockposition)) {
                                 iterator.remove();
                             } else {
-                                doorBlock.setOpen(entity, world, blockState, blockPos, false);
+                                blockdoor.setOpen(entity, world, iblockdata, blockposition, false);
                                 iterator.remove();
                             }
                         }
@@ -113,13 +142,14 @@
     }
 
     private static boolean areOtherMobsComingThroughDoor(ServerLevel world, LivingEntity entity, BlockPos pos) {
-        Brain<?> brain = entity.getBrain();
-        return !brain.hasMemoryValue(MemoryModuleType.NEAREST_LIVING_ENTITIES) ? false : brain.getMemory(MemoryModuleType.NEAREST_LIVING_ENTITIES).get().stream().filter((livingEntity2) -> {
-            return livingEntity2.getType() == entity.getType();
-        }).filter((livingEntity) -> {
-            return pos.closerThan(livingEntity.position(), 2.0D);
-        }).anyMatch((livingEntity) -> {
-            return isMobComingThroughDoor(world, livingEntity, pos);
+        Brain<?> behaviorcontroller = entity.getBrain();
+
+        return !behaviorcontroller.hasMemoryValue(MemoryModuleType.NEAREST_LIVING_ENTITIES) ? false : (behaviorcontroller.getMemory(MemoryModuleType.NEAREST_LIVING_ENTITIES).get()).stream().filter((entityliving1) -> { // CraftBukkit - decompile error
+            return entityliving1.getType() == entity.getType();
+        }).filter((entityliving1) -> {
+            return pos.closerThan((Position) entityliving1.position(), 2.0D);
+        }).anyMatch((entityliving1) -> {
+            return InteractWithDoor.isMobComingThroughDoor(world, entityliving1, pos);
         });
     }
 
@@ -127,32 +157,36 @@
         if (!entity.getBrain().hasMemoryValue(MemoryModuleType.PATH)) {
             return false;
         } else {
-            Path path = entity.getBrain().getMemory(MemoryModuleType.PATH).get();
-            if (path.isDone()) {
+            Path pathentity = (Path) entity.getBrain().getMemory(MemoryModuleType.PATH).get();
+
+            if (pathentity.isDone()) {
                 return false;
             } else {
-                Node node = path.getPreviousNode();
-                if (node == null) {
+                Node pathpoint = pathentity.getPreviousNode();
+
+                if (pathpoint == null) {
                     return false;
                 } else {
-                    Node node2 = path.getNextNode();
-                    return pos.equals(node.asBlockPos()) || pos.equals(node2.asBlockPos());
+                    Node pathpoint1 = pathentity.getNextNode();
+
+                    return pos.equals(pathpoint.asBlockPos()) || pos.equals(pathpoint1.asBlockPos());
                 }
             }
         }
     }
 
     private static boolean isDoorTooFarAway(ServerLevel world, LivingEntity entity, GlobalPos doorPos) {
-        return doorPos.dimension() != world.dimension() || !doorPos.pos().closerThan(entity.position(), 2.0D);
+        return doorPos.dimension() != world.dimension() || !doorPos.pos().closerThan((Position) entity.position(), 2.0D);
     }
 
     private void rememberDoorToClose(ServerLevel world, LivingEntity entity, BlockPos pos) {
-        Brain<?> brain = entity.getBrain();
-        GlobalPos globalPos = GlobalPos.of(world.dimension(), pos);
-        if (brain.getMemory(MemoryModuleType.DOORS_TO_CLOSE).isPresent()) {
-            brain.getMemory(MemoryModuleType.DOORS_TO_CLOSE).get().add(globalPos);
+        Brain<?> behaviorcontroller = entity.getBrain();
+        GlobalPos globalpos = GlobalPos.of(world.dimension(), pos);
+
+        if (behaviorcontroller.getMemory(MemoryModuleType.DOORS_TO_CLOSE).isPresent()) {
+            ((Set) behaviorcontroller.getMemory(MemoryModuleType.DOORS_TO_CLOSE).get()).add(globalpos);
         } else {
-            brain.setMemory(MemoryModuleType.DOORS_TO_CLOSE, Sets.newHashSet(globalPos));
+            behaviorcontroller.setMemory(MemoryModuleType.DOORS_TO_CLOSE, Sets.newHashSet(new GlobalPos[]{globalpos})); // CraftBukkit - decompile error
         }
 
     }
