--- a/net/minecraft/world/level/block/PointedDripstoneBlock.java
+++ b/net/minecraft/world/level/block/PointedDripstoneBlock.java
@@ -7,8 +7,8 @@
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
-import net.minecraft.core.particles.ParticleOptions;
 import net.minecraft.core.particles.ParticleTypes;
+import net.minecraft.core.particles.SimpleParticleType;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.tags.FluidTags;
 import net.minecraft.world.damagesource.DamageSource;
@@ -40,8 +40,13 @@
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
+// CraftBukkit start
+import org.bukkit.craftbukkit.v1_18_R1.block.CraftBlock;
+import org.bukkit.craftbukkit.v1_18_R1.event.CraftEventFactory;
+// CraftBukkit end
 
 public class PointedDripstoneBlock extends Block implements Fallable, SimpleWaterloggedBlock {
+
     public static final DirectionProperty TIP_DIRECTION = BlockStateProperties.VERTICAL_DIRECTION;
     public static final EnumProperty<DripstoneThickness> THICKNESS = BlockStateProperties.DRIPSTONE_THICKNESS;
     public static final BooleanProperty WATERLOGGED = BlockStateProperties.WATERLOGGED;
@@ -74,60 +79,70 @@
 
     public PointedDripstoneBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState(this.stateDefinition.any().setValue(TIP_DIRECTION, Direction.UP).setValue(THICKNESS, DripstoneThickness.TIP).setValue(WATERLOGGED, Boolean.valueOf(false)));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(PointedDripstoneBlock.TIP_DIRECTION, Direction.UP)).setValue(PointedDripstoneBlock.THICKNESS, DripstoneThickness.TIP)).setValue(PointedDripstoneBlock.WATERLOGGED, false));
     }
 
     @Override
     protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
-        builder.add(TIP_DIRECTION, THICKNESS, WATERLOGGED);
+        builder.add(PointedDripstoneBlock.TIP_DIRECTION, PointedDripstoneBlock.THICKNESS, PointedDripstoneBlock.WATERLOGGED);
     }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
-        return isValidPointedDripstonePlacement(world, pos, state.getValue(TIP_DIRECTION));
+        return PointedDripstoneBlock.isValidPointedDripstonePlacement(world, pos, (Direction) state.getValue(PointedDripstoneBlock.TIP_DIRECTION));
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
-            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
+        if ((Boolean) state.getValue(PointedDripstoneBlock.WATERLOGGED)) {
+            world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         if (direction != Direction.UP && direction != Direction.DOWN) {
             return state;
         } else {
-            Direction direction2 = state.getValue(TIP_DIRECTION);
-            if (direction2 == Direction.DOWN && world.getBlockTicks().hasScheduledTick(pos, this)) {
+            Direction enumdirection1 = (Direction) state.getValue(PointedDripstoneBlock.TIP_DIRECTION);
+
+            if (enumdirection1 == Direction.DOWN && world.getBlockTicks().hasScheduledTick(pos, this)) {
                 return state;
-            } else if (direction == direction2.getOpposite() && !this.canSurvive(state, world, pos)) {
-                if (direction2 == Direction.DOWN) {
+            } else if (direction == enumdirection1.getOpposite() && !this.canSurvive(state, world, pos)) {
+                if (enumdirection1 == Direction.DOWN) {
                     this.scheduleStalactiteFallTicks(state, world, pos);
                 } else {
-                    world.scheduleTick(pos, this, 1);
+                    world.scheduleTick(pos, (Block) this, 1);
                 }
 
                 return state;
             } else {
-                boolean bl = state.getValue(THICKNESS) == DripstoneThickness.TIP_MERGE;
-                DripstoneThickness dripstoneThickness = calculateDripstoneThickness(world, pos, direction2, bl);
-                return state.setValue(THICKNESS, dripstoneThickness);
+                boolean flag = state.getValue(PointedDripstoneBlock.THICKNESS) == DripstoneThickness.TIP_MERGE;
+                DripstoneThickness dripstonethickness = PointedDripstoneBlock.calculateDripstoneThickness(world, pos, enumdirection1, flag);
+
+                return (BlockState) state.setValue(PointedDripstoneBlock.THICKNESS, dripstonethickness);
             }
         }
     }
 
     @Override
     public void onProjectileHit(Level world, BlockState state, BlockHitResult hit, Projectile projectile) {
-        BlockPos blockPos = hit.getBlockPos();
-        if (!world.isClientSide && projectile.mayInteract(world, blockPos) && projectile instanceof ThrownTrident && projectile.getDeltaMovement().length() > 0.6D) {
-            world.destroyBlock(blockPos, true);
+        BlockPos blockposition = hit.getBlockPos();
+
+        if (!world.isClientSide && projectile.mayInteract(world, blockposition) && projectile instanceof ThrownTrident && projectile.getDeltaMovement().length() > 0.6D) {
+            // CraftBukkit start
+            if (CraftEventFactory.callEntityChangeBlockEvent(projectile, blockposition, Blocks.AIR.defaultBlockState()).isCancelled()) {
+                return;
+            }
+            // CraftBukkit end
+            world.destroyBlock(blockposition, true);
         }
 
     }
 
     @Override
     public void fallOn(Level world, BlockState state, BlockPos pos, Entity entity, float fallDistance) {
-        if (state.getValue(TIP_DIRECTION) == Direction.UP && state.getValue(THICKNESS) == DripstoneThickness.TIP) {
+        if (state.getValue(PointedDripstoneBlock.TIP_DIRECTION) == Direction.UP && state.getValue(PointedDripstoneBlock.THICKNESS) == DripstoneThickness.TIP) {
+            CraftEventFactory.blockDamage = CraftBlock.at(world, pos); // CraftBukkit
             entity.causeFallDamage(fallDistance + 2.0F, 2.0F, DamageSource.STALAGMITE);
+            CraftEventFactory.blockDamage = null; // CraftBukkit
         } else {
             super.fallOn(world, state, pos, entity, fallDistance);
         }
@@ -136,13 +151,14 @@
 
     @Override
     public void animateTick(BlockState state, Level world, BlockPos pos, Random random) {
-        if (canDrip(state)) {
+        if (PointedDripstoneBlock.canDrip(state)) {
             float f = random.nextFloat();
-            if (!(f > 0.12F)) {
-                getFluidAboveStalactite(world, pos, state).filter((fluid) -> {
-                    return f < 0.02F || canFillCauldron(fluid);
-                }).ifPresent((fluid) -> {
-                    spawnDripParticle(world, pos, state, fluid);
+
+            if (f <= 0.12F) {
+                PointedDripstoneBlock.getFluidAboveStalactite(world, pos, state).filter((fluidtype) -> {
+                    return f < 0.02F || PointedDripstoneBlock.canFillCauldron(fluidtype);
+                }).ifPresent((fluidtype) -> {
+                    PointedDripstoneBlock.spawnDripParticle(world, pos, state, fluidtype);
                 });
             }
         }
@@ -150,49 +166,53 @@
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, Random random) {
-        if (isStalagmite(state) && !this.canSurvive(state, world, pos)) {
+        if (PointedDripstoneBlock.isStalagmite(state) && !this.canSurvive(state, world, pos)) {
             world.destroyBlock(pos, true);
         } else {
-            spawnFallingStalactite(state, world, pos);
+            PointedDripstoneBlock.spawnFallingStalactite(state, world, pos);
         }
 
     }
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, Random random) {
-        maybeFillCauldron(state, world, pos, random.nextFloat());
-        if (random.nextFloat() < 0.011377778F && isStalactiteStartPos(state, world, pos)) {
-            growStalactiteOrStalagmiteIfPossible(state, world, pos, random);
+        PointedDripstoneBlock.maybeFillCauldron(state, world, pos, random.nextFloat());
+        if (random.nextFloat() < 0.011377778F && PointedDripstoneBlock.isStalactiteStartPos(state, world, pos)) {
+            PointedDripstoneBlock.growStalactiteOrStalagmiteIfPossible(state, world, pos, random);
         }
 
     }
 
     @VisibleForTesting
     public static void maybeFillCauldron(BlockState state, ServerLevel world, BlockPos pos, float dripChance) {
-        if (!(dripChance > 0.17578125F) || !(dripChance > 0.05859375F)) {
-            if (isStalactiteStartPos(state, world, pos)) {
-                Fluid fluid = getCauldronFillFluidType(world, pos);
-                float f;
-                if (fluid == Fluids.WATER) {
-                    f = 0.17578125F;
+        if (dripChance <= 0.17578125F || dripChance <= 0.05859375F) {
+            if (PointedDripstoneBlock.isStalactiteStartPos(state, world, pos)) {
+                Fluid fluidtype = PointedDripstoneBlock.getCauldronFillFluidType(world, pos);
+                float f1;
+
+                if (fluidtype == Fluids.WATER) {
+                    f1 = 0.17578125F;
                 } else {
-                    if (fluid != Fluids.LAVA) {
+                    if (fluidtype != Fluids.LAVA) {
                         return;
                     }
 
-                    f = 0.05859375F;
+                    f1 = 0.05859375F;
                 }
 
-                if (!(dripChance >= f)) {
-                    BlockPos blockPos = findTip(state, world, pos, 11, false);
-                    if (blockPos != null) {
-                        BlockPos blockPos2 = findFillableCauldronBelowStalactiteTip(world, blockPos, fluid);
-                        if (blockPos2 != null) {
-                            world.levelEvent(1504, blockPos, 0);
-                            int i = blockPos.getY() - blockPos2.getY();
+                if (dripChance < f1) {
+                    BlockPos blockposition1 = PointedDripstoneBlock.findTip(state, world, pos, 11, false);
+
+                    if (blockposition1 != null) {
+                        BlockPos blockposition2 = PointedDripstoneBlock.findFillableCauldronBelowStalactiteTip(world, blockposition1, fluidtype);
+
+                        if (blockposition2 != null) {
+                            world.levelEvent(1504, blockposition1, 0);
+                            int i = blockposition1.getY() - blockposition2.getY();
                             int j = 50 + i;
-                            BlockState blockState = world.getBlockState(blockPos2);
-                            world.scheduleTick(blockPos2, blockState.getBlock(), j);
+                            BlockState iblockdata1 = world.getBlockState(blockposition2);
+
+                            world.scheduleTick(blockposition2, iblockdata1.getBlock(), j);
                         }
                     }
                 }
@@ -208,22 +228,24 @@
     @Nullable
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
-        LevelAccessor levelAccessor = ctx.getLevel();
-        BlockPos blockPos = ctx.getClickedPos();
-        Direction direction = ctx.getNearestLookingVerticalDirection().getOpposite();
-        Direction direction2 = calculateTipDirection(levelAccessor, blockPos, direction);
-        if (direction2 == null) {
+        Level world = ctx.getLevel();
+        BlockPos blockposition = ctx.getClickedPos();
+        Direction enumdirection = ctx.getNearestLookingVerticalDirection().getOpposite();
+        Direction enumdirection1 = PointedDripstoneBlock.calculateTipDirection(world, blockposition, enumdirection);
+
+        if (enumdirection1 == null) {
             return null;
         } else {
-            boolean bl = !ctx.isSecondaryUseActive();
-            DripstoneThickness dripstoneThickness = calculateDripstoneThickness(levelAccessor, blockPos, direction2, bl);
-            return dripstoneThickness == null ? null : this.defaultBlockState().setValue(TIP_DIRECTION, direction2).setValue(THICKNESS, dripstoneThickness).setValue(WATERLOGGED, Boolean.valueOf(levelAccessor.getFluidState(blockPos).getType() == Fluids.WATER));
+            boolean flag = !ctx.isSecondaryUseActive();
+            DripstoneThickness dripstonethickness = PointedDripstoneBlock.calculateDripstoneThickness(world, blockposition, enumdirection1, flag);
+
+            return dripstonethickness == null ? null : (BlockState) ((BlockState) ((BlockState) this.defaultBlockState().setValue(PointedDripstoneBlock.TIP_DIRECTION, enumdirection1)).setValue(PointedDripstoneBlock.THICKNESS, dripstonethickness)).setValue(PointedDripstoneBlock.WATERLOGGED, world.getFluidState(blockposition).getType() == Fluids.WATER);
         }
     }
 
     @Override
     public FluidState getFluidState(BlockState state) {
-        return state.getValue(WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(state);
+        return (Boolean) state.getValue(PointedDripstoneBlock.WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(state);
     }
 
     @Override
@@ -233,26 +255,28 @@
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        DripstoneThickness dripstoneThickness = state.getValue(THICKNESS);
-        VoxelShape voxelShape;
-        if (dripstoneThickness == DripstoneThickness.TIP_MERGE) {
-            voxelShape = TIP_MERGE_SHAPE;
-        } else if (dripstoneThickness == DripstoneThickness.TIP) {
-            if (state.getValue(TIP_DIRECTION) == Direction.DOWN) {
-                voxelShape = TIP_SHAPE_DOWN;
+        DripstoneThickness dripstonethickness = (DripstoneThickness) state.getValue(PointedDripstoneBlock.THICKNESS);
+        VoxelShape voxelshape;
+
+        if (dripstonethickness == DripstoneThickness.TIP_MERGE) {
+            voxelshape = PointedDripstoneBlock.TIP_MERGE_SHAPE;
+        } else if (dripstonethickness == DripstoneThickness.TIP) {
+            if (state.getValue(PointedDripstoneBlock.TIP_DIRECTION) == Direction.DOWN) {
+                voxelshape = PointedDripstoneBlock.TIP_SHAPE_DOWN;
             } else {
-                voxelShape = TIP_SHAPE_UP;
+                voxelshape = PointedDripstoneBlock.TIP_SHAPE_UP;
             }
-        } else if (dripstoneThickness == DripstoneThickness.FRUSTUM) {
-            voxelShape = FRUSTUM_SHAPE;
-        } else if (dripstoneThickness == DripstoneThickness.MIDDLE) {
-            voxelShape = MIDDLE_SHAPE;
+        } else if (dripstonethickness == DripstoneThickness.FRUSTUM) {
+            voxelshape = PointedDripstoneBlock.FRUSTUM_SHAPE;
+        } else if (dripstonethickness == DripstoneThickness.MIDDLE) {
+            voxelshape = PointedDripstoneBlock.MIDDLE_SHAPE;
         } else {
-            voxelShape = BASE_SHAPE;
+            voxelshape = PointedDripstoneBlock.BASE_SHAPE;
         }
 
-        Vec3 vec3 = state.getOffset(world, pos);
-        return voxelShape.move(vec3.x, 0.0D, vec3.z);
+        Vec3 vec3d = state.getOffset(world, pos);
+
+        return voxelshape.move(vec3d.x, 0.0D, vec3d.z);
     }
 
     @Override
@@ -289,63 +313,71 @@
     }
 
     private void scheduleStalactiteFallTicks(BlockState state, LevelAccessor world, BlockPos pos) {
-        BlockPos blockPos = findTip(state, world, pos, Integer.MAX_VALUE, true);
-        if (blockPos != null) {
-            BlockPos.MutableBlockPos mutableBlockPos = blockPos.mutable();
-            mutableBlockPos.move(Direction.DOWN);
-            BlockState blockState = world.getBlockState(mutableBlockPos);
-            if (blockState.getCollisionShape(world, mutableBlockPos, CollisionContext.empty()).max(Direction.Axis.Y) >= 1.0D || blockState.is(Blocks.POWDER_SNOW)) {
-                world.destroyBlock(blockPos, true);
-                mutableBlockPos.move(Direction.UP);
+        BlockPos blockposition1 = PointedDripstoneBlock.findTip(state, world, pos, Integer.MAX_VALUE, true);
+
+        if (blockposition1 != null) {
+            BlockPos.MutableBlockPos blockposition_mutableblockposition = blockposition1.mutable();
+
+            blockposition_mutableblockposition.move(Direction.DOWN);
+            BlockState iblockdata1 = world.getBlockState(blockposition_mutableblockposition);
+
+            if (iblockdata1.getCollisionShape(world, blockposition_mutableblockposition, CollisionContext.empty()).max(Direction.Axis.Y) >= 1.0D || iblockdata1.is(Blocks.POWDER_SNOW)) {
+                world.destroyBlock(blockposition1, true);
+                blockposition_mutableblockposition.move(Direction.UP);
             }
 
-            mutableBlockPos.move(Direction.UP);
+            blockposition_mutableblockposition.move(Direction.UP);
 
-            while(isStalactite(world.getBlockState(mutableBlockPos))) {
-                world.scheduleTick(mutableBlockPos, this, 2);
-                mutableBlockPos.move(Direction.UP);
+            while (PointedDripstoneBlock.isStalactite(world.getBlockState(blockposition_mutableblockposition))) {
+                world.scheduleTick(blockposition_mutableblockposition, (Block) this, 2);
+                blockposition_mutableblockposition.move(Direction.UP);
             }
 
         }
     }
 
     private static int getStalactiteSizeFromTip(ServerLevel world, BlockPos pos, int range) {
-        int i = 1;
-        BlockPos.MutableBlockPos mutableBlockPos = pos.mutable().move(Direction.UP);
+        int j = 1;
+        BlockPos.MutableBlockPos blockposition_mutableblockposition = pos.mutable().move(Direction.UP);
 
-        while(i < range && isStalactite(world.getBlockState(mutableBlockPos))) {
-            ++i;
-            mutableBlockPos.move(Direction.UP);
+        while (j < range && PointedDripstoneBlock.isStalactite(world.getBlockState(blockposition_mutableblockposition))) {
+            ++j;
+            blockposition_mutableblockposition.move(Direction.UP);
         }
 
-        return i;
+        return j;
     }
 
     private static void spawnFallingStalactite(BlockState state, ServerLevel world, BlockPos pos) {
-        Vec3 vec3 = Vec3.atBottomCenterOf(pos);
-        FallingBlockEntity fallingBlockEntity = new FallingBlockEntity(world, vec3.x, vec3.y, vec3.z, state);
-        if (isTip(state, true)) {
-            int i = getStalactiteSizeFromTip(world, pos, 6);
-            float f = 1.0F * (float)i;
-            fallingBlockEntity.setHurtsEntities(f, 40);
+        Vec3 vec3d = Vec3.atBottomCenterOf(pos);
+        FallingBlockEntity entityfallingblock = new FallingBlockEntity(world, vec3d.x, vec3d.y, vec3d.z, state);
+
+        if (PointedDripstoneBlock.isTip(state, true)) {
+            int i = PointedDripstoneBlock.getStalactiteSizeFromTip(world, pos, 6);
+            float f = 1.0F * (float) i;
+
+            entityfallingblock.setHurtsEntities(f, 40);
         }
 
-        world.addFreshEntity(fallingBlockEntity);
+        world.addFreshEntity(entityfallingblock);
     }
 
     @VisibleForTesting
     public static void growStalactiteOrStalagmiteIfPossible(BlockState state, ServerLevel world, BlockPos pos, Random random) {
-        BlockState blockState = world.getBlockState(pos.above(1));
-        BlockState blockState2 = world.getBlockState(pos.above(2));
-        if (canGrow(blockState, blockState2)) {
-            BlockPos blockPos = findTip(state, world, pos, 7, false);
-            if (blockPos != null) {
-                BlockState blockState3 = world.getBlockState(blockPos);
-                if (canDrip(blockState3) && canTipGrow(blockState3, world, blockPos)) {
+        BlockState iblockdata1 = world.getBlockState(pos.above(1));
+        BlockState iblockdata2 = world.getBlockState(pos.above(2));
+
+        if (PointedDripstoneBlock.canGrow(iblockdata1, iblockdata2)) {
+            BlockPos blockposition1 = PointedDripstoneBlock.findTip(state, world, pos, 7, false);
+
+            if (blockposition1 != null) {
+                BlockState iblockdata3 = world.getBlockState(blockposition1);
+
+                if (PointedDripstoneBlock.canDrip(iblockdata3) && PointedDripstoneBlock.canTipGrow(iblockdata3, world, blockposition1)) {
                     if (random.nextBoolean()) {
-                        grow(world, blockPos, Direction.DOWN);
+                        PointedDripstoneBlock.grow(world, blockposition1, Direction.DOWN);
                     } else {
-                        growStalagmiteBelow(world, blockPos);
+                        PointedDripstoneBlock.growStalagmiteBelow(world, blockposition1);
                     }
 
                 }
@@ -354,22 +386,23 @@
     }
 
     private static void growStalagmiteBelow(ServerLevel world, BlockPos pos) {
-        BlockPos.MutableBlockPos mutableBlockPos = pos.mutable();
+        BlockPos.MutableBlockPos blockposition_mutableblockposition = pos.mutable();
 
-        for(int i = 0; i < 10; ++i) {
-            mutableBlockPos.move(Direction.DOWN);
-            BlockState blockState = world.getBlockState(mutableBlockPos);
-            if (!blockState.getFluidState().isEmpty()) {
+        for (int i = 0; i < 10; ++i) {
+            blockposition_mutableblockposition.move(Direction.DOWN);
+            BlockState iblockdata = world.getBlockState(blockposition_mutableblockposition);
+
+            if (!iblockdata.getFluidState().isEmpty()) {
                 return;
             }
 
-            if (isUnmergedTipWithDirection(blockState, Direction.UP) && canTipGrow(blockState, world, mutableBlockPos)) {
-                grow(world, mutableBlockPos, Direction.UP);
+            if (PointedDripstoneBlock.isUnmergedTipWithDirection(iblockdata, Direction.UP) && PointedDripstoneBlock.canTipGrow(iblockdata, world, blockposition_mutableblockposition)) {
+                PointedDripstoneBlock.grow(world, blockposition_mutableblockposition, Direction.UP);
                 return;
             }
 
-            if (isValidPointedDripstonePlacement(world, mutableBlockPos, Direction.UP) && !world.isWaterAt(mutableBlockPos.below())) {
-                grow(world, mutableBlockPos.below(), Direction.UP);
+            if (PointedDripstoneBlock.isValidPointedDripstonePlacement(world, blockposition_mutableblockposition, Direction.UP) && !world.isWaterAt(blockposition_mutableblockposition.below())) {
+                PointedDripstoneBlock.grow(world, blockposition_mutableblockposition.below(), Direction.UP);
                 return;
             }
         }
@@ -377,96 +410,105 @@
     }
 
     private static void grow(ServerLevel world, BlockPos pos, Direction direction) {
-        BlockPos blockPos = pos.relative(direction);
-        BlockState blockState = world.getBlockState(blockPos);
-        if (isUnmergedTipWithDirection(blockState, direction.getOpposite())) {
-            createMergedTips(blockState, world, blockPos);
-        } else if (blockState.isAir() || blockState.is(Blocks.WATER)) {
-            createDripstone(world, blockPos, direction, DripstoneThickness.TIP);
+        BlockPos blockposition1 = pos.relative(direction);
+        BlockState iblockdata = world.getBlockState(blockposition1);
+
+        if (PointedDripstoneBlock.isUnmergedTipWithDirection(iblockdata, direction.getOpposite())) {
+            PointedDripstoneBlock.createMergedTips(iblockdata, world, blockposition1);
+        } else if (iblockdata.isAir() || iblockdata.is(Blocks.WATER)) {
+            PointedDripstoneBlock.createDripstone(world, blockposition1, direction, DripstoneThickness.TIP, pos); // CraftBukkit
         }
 
     }
 
-    private static void createDripstone(LevelAccessor world, BlockPos pos, Direction direction, DripstoneThickness thickness) {
-        BlockState blockState = Blocks.POINTED_DRIPSTONE.defaultBlockState().setValue(TIP_DIRECTION, direction).setValue(THICKNESS, thickness).setValue(WATERLOGGED, Boolean.valueOf(world.getFluidState(pos).getType() == Fluids.WATER));
-        world.setBlock(pos, blockState, 3);
+    private static void createDripstone(LevelAccessor generatoraccess, BlockPos blockposition, Direction enumdirection, DripstoneThickness dripstonethickness, BlockPos source) { // CraftBukkit
+        BlockState iblockdata = (BlockState) ((BlockState) ((BlockState) Blocks.POINTED_DRIPSTONE.defaultBlockState().setValue(PointedDripstoneBlock.TIP_DIRECTION, enumdirection)).setValue(PointedDripstoneBlock.THICKNESS, dripstonethickness)).setValue(PointedDripstoneBlock.WATERLOGGED, generatoraccess.getFluidState(blockposition).getType() == Fluids.WATER);
+
+        org.bukkit.craftbukkit.v1_18_R1.event.CraftEventFactory.handleBlockSpreadEvent(generatoraccess, source, blockposition, iblockdata, 3); // CraftBukkit
     }
 
     private static void createMergedTips(BlockState state, LevelAccessor world, BlockPos pos) {
-        BlockPos blockPos2;
-        BlockPos blockPos;
-        if (state.getValue(TIP_DIRECTION) == Direction.UP) {
-            blockPos = pos;
-            blockPos2 = pos.above();
+        BlockPos blockposition1;
+        BlockPos blockposition2;
+
+        if (state.getValue(PointedDripstoneBlock.TIP_DIRECTION) == Direction.UP) {
+            blockposition1 = pos;
+            blockposition2 = pos.above();
         } else {
-            blockPos2 = pos;
-            blockPos = pos.below();
+            blockposition2 = pos;
+            blockposition1 = pos.below();
         }
 
-        createDripstone(world, blockPos2, Direction.DOWN, DripstoneThickness.TIP_MERGE);
-        createDripstone(world, blockPos, Direction.UP, DripstoneThickness.TIP_MERGE);
+        PointedDripstoneBlock.createDripstone(world, blockposition2, Direction.DOWN, DripstoneThickness.TIP_MERGE, pos); // CraftBukkit
+        PointedDripstoneBlock.createDripstone(world, blockposition1, Direction.UP, DripstoneThickness.TIP_MERGE, pos); // CraftBukkit
     }
 
     public static void spawnDripParticle(Level world, BlockPos pos, BlockState state) {
-        getFluidAboveStalactite(world, pos, state).ifPresent((fluid) -> {
-            spawnDripParticle(world, pos, state, fluid);
+        PointedDripstoneBlock.getFluidAboveStalactite(world, pos, state).ifPresent((fluidtype) -> {
+            PointedDripstoneBlock.spawnDripParticle(world, pos, state, fluidtype);
         });
     }
 
     private static void spawnDripParticle(Level world, BlockPos pos, BlockState state, Fluid fluid) {
-        Vec3 vec3 = state.getOffset(world, pos);
-        double d = 0.0625D;
-        double e = (double)pos.getX() + 0.5D + vec3.x;
-        double f = (double)((float)(pos.getY() + 1) - 0.6875F) - 0.0625D;
-        double g = (double)pos.getZ() + 0.5D + vec3.z;
-        Fluid fluid2 = getDripFluid(world, fluid);
-        ParticleOptions particleOptions = fluid2.is(FluidTags.LAVA) ? ParticleTypes.DRIPPING_DRIPSTONE_LAVA : ParticleTypes.DRIPPING_DRIPSTONE_WATER;
-        world.addParticle(particleOptions, e, f, g, 0.0D, 0.0D, 0.0D);
+        Vec3 vec3d = state.getOffset(world, pos);
+        double d0 = 0.0625D;
+        double d1 = (double) pos.getX() + 0.5D + vec3d.x;
+        double d2 = (double) ((float) (pos.getY() + 1) - 0.6875F) - 0.0625D;
+        double d3 = (double) pos.getZ() + 0.5D + vec3d.z;
+        Fluid fluidtype1 = PointedDripstoneBlock.getDripFluid(world, fluid);
+        SimpleParticleType particletype = fluidtype1.is(FluidTags.LAVA) ? ParticleTypes.DRIPPING_DRIPSTONE_LAVA : ParticleTypes.DRIPPING_DRIPSTONE_WATER;
+
+        world.addParticle(particletype, d1, d2, d3, 0.0D, 0.0D, 0.0D);
     }
 
     @Nullable
     private static BlockPos findTip(BlockState state, LevelAccessor world, BlockPos pos, int range, boolean allowMerged) {
-        if (isTip(state, allowMerged)) {
+        if (PointedDripstoneBlock.isTip(state, allowMerged)) {
             return pos;
         } else {
-            Direction direction = state.getValue(TIP_DIRECTION);
-            Predicate<BlockState> predicate = (statex) -> {
-                return statex.is(Blocks.POINTED_DRIPSTONE) && statex.getValue(TIP_DIRECTION) == direction;
+            Direction enumdirection = (Direction) state.getValue(PointedDripstoneBlock.TIP_DIRECTION);
+            Predicate<BlockState> predicate = (iblockdata1) -> {
+                return iblockdata1.is(Blocks.POINTED_DRIPSTONE) && iblockdata1.getValue(PointedDripstoneBlock.TIP_DIRECTION) == enumdirection;
             };
-            return findBlockVertical(world, pos, direction.getAxisDirection(), predicate, (statex) -> {
-                return isTip(statex, allowMerged);
-            }, range).orElse((BlockPos)null);
+
+            return (BlockPos) PointedDripstoneBlock.findBlockVertical(world, pos, enumdirection.getAxisDirection(), predicate, (iblockdata1) -> {
+                return PointedDripstoneBlock.isTip(iblockdata1, allowMerged);
+            }, range).orElse(null); // CraftBukkit - decompile error
         }
     }
 
     @Nullable
     private static Direction calculateTipDirection(LevelReader world, BlockPos pos, Direction direction) {
-        Direction direction2;
-        if (isValidPointedDripstonePlacement(world, pos, direction)) {
-            direction2 = direction;
+        Direction enumdirection1;
+
+        if (PointedDripstoneBlock.isValidPointedDripstonePlacement(world, pos, direction)) {
+            enumdirection1 = direction;
         } else {
-            if (!isValidPointedDripstonePlacement(world, pos, direction.getOpposite())) {
+            if (!PointedDripstoneBlock.isValidPointedDripstonePlacement(world, pos, direction.getOpposite())) {
                 return null;
             }
 
-            direction2 = direction.getOpposite();
+            enumdirection1 = direction.getOpposite();
         }
 
-        return direction2;
+        return enumdirection1;
     }
 
     private static DripstoneThickness calculateDripstoneThickness(LevelReader world, BlockPos pos, Direction direction, boolean tryMerge) {
-        Direction direction2 = direction.getOpposite();
-        BlockState blockState = world.getBlockState(pos.relative(direction));
-        if (isPointedDripstoneWithDirection(blockState, direction2)) {
-            return !tryMerge && blockState.getValue(THICKNESS) != DripstoneThickness.TIP_MERGE ? DripstoneThickness.TIP : DripstoneThickness.TIP_MERGE;
-        } else if (!isPointedDripstoneWithDirection(blockState, direction)) {
+        Direction enumdirection1 = direction.getOpposite();
+        BlockState iblockdata = world.getBlockState(pos.relative(direction));
+
+        if (PointedDripstoneBlock.isPointedDripstoneWithDirection(iblockdata, enumdirection1)) {
+            return !tryMerge && iblockdata.getValue(PointedDripstoneBlock.THICKNESS) != DripstoneThickness.TIP_MERGE ? DripstoneThickness.TIP : DripstoneThickness.TIP_MERGE;
+        } else if (!PointedDripstoneBlock.isPointedDripstoneWithDirection(iblockdata, direction)) {
             return DripstoneThickness.TIP;
         } else {
-            DripstoneThickness dripstoneThickness = blockState.getValue(THICKNESS);
-            if (dripstoneThickness != DripstoneThickness.TIP && dripstoneThickness != DripstoneThickness.TIP_MERGE) {
-                BlockState blockState2 = world.getBlockState(pos.relative(direction2));
-                return !isPointedDripstoneWithDirection(blockState2, direction) ? DripstoneThickness.BASE : DripstoneThickness.MIDDLE;
+            DripstoneThickness dripstonethickness = (DripstoneThickness) iblockdata.getValue(PointedDripstoneBlock.THICKNESS);
+
+            if (dripstonethickness != DripstoneThickness.TIP && dripstonethickness != DripstoneThickness.TIP_MERGE) {
+                BlockState iblockdata1 = world.getBlockState(pos.relative(enumdirection1));
+
+                return !PointedDripstoneBlock.isPointedDripstoneWithDirection(iblockdata1, direction) ? DripstoneThickness.BASE : DripstoneThickness.MIDDLE;
             } else {
                 return DripstoneThickness.FRUSTUM;
             }
@@ -474,59 +516,59 @@
     }
 
     public static boolean canDrip(BlockState state) {
-        return isStalactite(state) && state.getValue(THICKNESS) == DripstoneThickness.TIP && !state.getValue(WATERLOGGED);
+        return PointedDripstoneBlock.isStalactite(state) && state.getValue(PointedDripstoneBlock.THICKNESS) == DripstoneThickness.TIP && !(Boolean) state.getValue(PointedDripstoneBlock.WATERLOGGED);
     }
 
     private static boolean canTipGrow(BlockState state, ServerLevel world, BlockPos pos) {
-        Direction direction = state.getValue(TIP_DIRECTION);
-        BlockPos blockPos = pos.relative(direction);
-        BlockState blockState = world.getBlockState(blockPos);
-        if (!blockState.getFluidState().isEmpty()) {
-            return false;
-        } else {
-            return blockState.isAir() ? true : isUnmergedTipWithDirection(blockState, direction.getOpposite());
-        }
+        Direction enumdirection = (Direction) state.getValue(PointedDripstoneBlock.TIP_DIRECTION);
+        BlockPos blockposition1 = pos.relative(enumdirection);
+        BlockState iblockdata1 = world.getBlockState(blockposition1);
+
+        return !iblockdata1.getFluidState().isEmpty() ? false : (iblockdata1.isAir() ? true : PointedDripstoneBlock.isUnmergedTipWithDirection(iblockdata1, enumdirection.getOpposite()));
     }
 
     private static Optional<BlockPos> findRootBlock(Level world, BlockPos pos, BlockState state, int range) {
-        Direction direction = state.getValue(TIP_DIRECTION);
-        Predicate<BlockState> predicate = (statex) -> {
-            return statex.is(Blocks.POINTED_DRIPSTONE) && statex.getValue(TIP_DIRECTION) == direction;
+        Direction enumdirection = (Direction) state.getValue(PointedDripstoneBlock.TIP_DIRECTION);
+        Predicate<BlockState> predicate = (iblockdata1) -> {
+            return iblockdata1.is(Blocks.POINTED_DRIPSTONE) && iblockdata1.getValue(PointedDripstoneBlock.TIP_DIRECTION) == enumdirection;
         };
-        return findBlockVertical(world, pos, direction.getOpposite().getAxisDirection(), predicate, (statex) -> {
-            return !statex.is(Blocks.POINTED_DRIPSTONE);
+
+        return PointedDripstoneBlock.findBlockVertical(world, pos, enumdirection.getOpposite().getAxisDirection(), predicate, (iblockdata1) -> {
+            return !iblockdata1.is(Blocks.POINTED_DRIPSTONE);
         }, range);
     }
 
     private static boolean isValidPointedDripstonePlacement(LevelReader world, BlockPos pos, Direction direction) {
-        BlockPos blockPos = pos.relative(direction.getOpposite());
-        BlockState blockState = world.getBlockState(blockPos);
-        return blockState.isFaceSturdy(world, blockPos, direction) || isPointedDripstoneWithDirection(blockState, direction);
+        BlockPos blockposition1 = pos.relative(direction.getOpposite());
+        BlockState iblockdata = world.getBlockState(blockposition1);
+
+        return iblockdata.isFaceSturdy(world, blockposition1, direction) || PointedDripstoneBlock.isPointedDripstoneWithDirection(iblockdata, direction);
     }
 
     private static boolean isTip(BlockState state, boolean allowMerged) {
         if (!state.is(Blocks.POINTED_DRIPSTONE)) {
             return false;
         } else {
-            DripstoneThickness dripstoneThickness = state.getValue(THICKNESS);
-            return dripstoneThickness == DripstoneThickness.TIP || allowMerged && dripstoneThickness == DripstoneThickness.TIP_MERGE;
+            DripstoneThickness dripstonethickness = (DripstoneThickness) state.getValue(PointedDripstoneBlock.THICKNESS);
+
+            return dripstonethickness == DripstoneThickness.TIP || allowMerged && dripstonethickness == DripstoneThickness.TIP_MERGE;
         }
     }
 
     private static boolean isUnmergedTipWithDirection(BlockState state, Direction direction) {
-        return isTip(state, false) && state.getValue(TIP_DIRECTION) == direction;
+        return PointedDripstoneBlock.isTip(state, false) && state.getValue(PointedDripstoneBlock.TIP_DIRECTION) == direction;
     }
 
     private static boolean isStalactite(BlockState state) {
-        return isPointedDripstoneWithDirection(state, Direction.DOWN);
+        return PointedDripstoneBlock.isPointedDripstoneWithDirection(state, Direction.DOWN);
     }
 
     private static boolean isStalagmite(BlockState state) {
-        return isPointedDripstoneWithDirection(state, Direction.UP);
+        return PointedDripstoneBlock.isPointedDripstoneWithDirection(state, Direction.UP);
     }
 
     private static boolean isStalactiteStartPos(BlockState state, LevelReader world, BlockPos pos) {
-        return isStalactite(state) && !world.getBlockState(pos.above()).is(Blocks.POINTED_DRIPSTONE);
+        return PointedDripstoneBlock.isStalactite(state) && !world.getBlockState(pos.above()).is(Blocks.POINTED_DRIPSTONE);
     }
 
     @Override
@@ -535,29 +577,30 @@
     }
 
     private static boolean isPointedDripstoneWithDirection(BlockState state, Direction direction) {
-        return state.is(Blocks.POINTED_DRIPSTONE) && state.getValue(TIP_DIRECTION) == direction;
+        return state.is(Blocks.POINTED_DRIPSTONE) && state.getValue(PointedDripstoneBlock.TIP_DIRECTION) == direction;
     }
 
     @Nullable
     private static BlockPos findFillableCauldronBelowStalactiteTip(Level world, BlockPos pos, Fluid fluid) {
-        Predicate<BlockState> predicate = (state) -> {
-            return state.getBlock() instanceof AbstractCauldronBlock && ((AbstractCauldronBlock)state.getBlock()).canReceiveStalactiteDrip(fluid);
+        Predicate<BlockState> predicate = (iblockdata) -> {
+            return iblockdata.getBlock() instanceof AbstractCauldronBlock && ((AbstractCauldronBlock) iblockdata.getBlock()).canReceiveStalactiteDrip(fluid);
         };
-        return findBlockVertical(world, pos, Direction.DOWN.getAxisDirection(), BlockBehaviour.BlockStateBase::isAir, predicate, 11).orElse((BlockPos)null);
+
+        return (BlockPos) PointedDripstoneBlock.findBlockVertical(world, pos, Direction.DOWN.getAxisDirection(), BlockBehaviour.BlockStateBase::isAir, predicate, 11).orElse(null); // CraftBukkit - decompile error
     }
 
     @Nullable
     public static BlockPos findStalactiteTipAboveCauldron(Level world, BlockPos pos) {
-        return findBlockVertical(world, pos, Direction.UP.getAxisDirection(), BlockBehaviour.BlockStateBase::isAir, PointedDripstoneBlock::canDrip, 11).orElse((BlockPos)null);
+        return (BlockPos) PointedDripstoneBlock.findBlockVertical(world, pos, Direction.UP.getAxisDirection(), BlockBehaviour.BlockStateBase::isAir, PointedDripstoneBlock::canDrip, 11).orElse(null); // CraftBukkit - decompile error
     }
 
     public static Fluid getCauldronFillFluidType(Level world, BlockPos pos) {
-        return getFluidAboveStalactite(world, pos, world.getBlockState(pos)).filter(PointedDripstoneBlock::canFillCauldron).orElse(Fluids.EMPTY);
+        return (Fluid) PointedDripstoneBlock.getFluidAboveStalactite(world, pos, world.getBlockState(pos)).filter(PointedDripstoneBlock::canFillCauldron).orElse(Fluids.EMPTY);
     }
 
     private static Optional<Fluid> getFluidAboveStalactite(Level world, BlockPos pos, BlockState state) {
-        return !isStalactite(state) ? Optional.empty() : findRootBlock(world, pos, state, 11).map((posx) -> {
-            return world.getFluidState(posx.above()).getType();
+        return !PointedDripstoneBlock.isStalactite(state) ? Optional.empty() : PointedDripstoneBlock.findRootBlock(world, pos, state, 11).map((blockposition1) -> {
+            return world.getFluidState(blockposition1.above()).getType();
         });
     }
 
@@ -570,25 +613,22 @@
     }
 
     private static Fluid getDripFluid(Level world, Fluid fluid) {
-        if (fluid.isSame(Fluids.EMPTY)) {
-            return world.dimensionType().ultraWarm() ? Fluids.LAVA : Fluids.WATER;
-        } else {
-            return fluid;
-        }
+        return (Fluid) (fluid.isSame(Fluids.EMPTY) ? (world.dimensionType().ultraWarm() ? Fluids.LAVA : Fluids.WATER) : fluid);
     }
 
     private static Optional<BlockPos> findBlockVertical(LevelAccessor world, BlockPos pos, Direction.AxisDirection direction, Predicate<BlockState> continuePredicate, Predicate<BlockState> stopPredicate, int range) {
-        Direction direction2 = Direction.get(direction, Direction.Axis.Y);
-        BlockPos.MutableBlockPos mutableBlockPos = pos.mutable();
+        Direction enumdirection = Direction.get(direction, Direction.Axis.Y);
+        BlockPos.MutableBlockPos blockposition_mutableblockposition = pos.mutable();
 
-        for(int i = 1; i < range; ++i) {
-            mutableBlockPos.move(direction2);
-            BlockState blockState = world.getBlockState(mutableBlockPos);
-            if (stopPredicate.test(blockState)) {
-                return Optional.of(mutableBlockPos.immutable());
+        for (int j = 1; j < range; ++j) {
+            blockposition_mutableblockposition.move(enumdirection);
+            BlockState iblockdata = world.getBlockState(blockposition_mutableblockposition);
+
+            if (stopPredicate.test(iblockdata)) {
+                return Optional.of(blockposition_mutableblockposition.immutable());
             }
 
-            if (world.isOutsideBuildHeight(mutableBlockPos.getY()) || !continuePredicate.test(blockState)) {
+            if (world.isOutsideBuildHeight(blockposition_mutableblockposition.getY()) || !continuePredicate.test(iblockdata)) {
                 return Optional.empty();
             }
         }
