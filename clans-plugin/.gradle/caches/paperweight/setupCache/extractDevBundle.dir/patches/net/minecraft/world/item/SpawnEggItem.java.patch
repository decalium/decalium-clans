--- a/net/minecraft/world/item/SpawnEggItem.java
+++ b/net/minecraft/world/item/SpawnEggItem.java
@@ -15,6 +15,7 @@
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.InteractionResultHolder;
 import net.minecraft.world.entity.AgeableMob;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MobSpawnType;
@@ -34,6 +35,7 @@
 import net.minecraft.world.phys.Vec3;
 
 public class SpawnEggItem extends Item {
+
     public static final Map<EntityType<? extends Mob>, SpawnEggItem> BY_ID = Maps.newIdentityHashMap();
     private final int backgroundColor;
     private final int highlightColor;
@@ -44,43 +46,49 @@
         this.defaultType = type;
         this.backgroundColor = primaryColor;
         this.highlightColor = secondaryColor;
-        BY_ID.put(type, this);
+        SpawnEggItem.BY_ID.put(type, this);
     }
 
     @Override
     public InteractionResult useOn(UseOnContext context) {
-        Level level = context.getLevel();
-        if (!(level instanceof ServerLevel)) {
+        Level world = context.getLevel();
+
+        if (!(world instanceof ServerLevel)) {
             return InteractionResult.SUCCESS;
         } else {
-            ItemStack itemStack = context.getItemInHand();
-            BlockPos blockPos = context.getClickedPos();
-            Direction direction = context.getClickedFace();
-            BlockState blockState = level.getBlockState(blockPos);
-            if (blockState.is(Blocks.SPAWNER)) {
-                BlockEntity blockEntity = level.getBlockEntity(blockPos);
-                if (blockEntity instanceof SpawnerBlockEntity) {
-                    BaseSpawner baseSpawner = ((SpawnerBlockEntity)blockEntity).getSpawner();
-                    EntityType<?> entityType = this.getType(itemStack.getTag());
-                    baseSpawner.setEntityId(entityType);
-                    blockEntity.setChanged();
-                    level.sendBlockUpdated(blockPos, blockState, blockState, 3);
-                    itemStack.shrink(1);
+            ItemStack itemstack = context.getItemInHand();
+            BlockPos blockposition = context.getClickedPos();
+            Direction enumdirection = context.getClickedFace();
+            BlockState iblockdata = world.getBlockState(blockposition);
+
+            if (!world.paperConfig.disableMobSpawnerSpawnEggTransformation && iblockdata.is(Blocks.SPAWNER)) { // Paper
+                BlockEntity tileentity = world.getBlockEntity(blockposition);
+
+                if (tileentity instanceof SpawnerBlockEntity) {
+                    BaseSpawner mobspawnerabstract = ((SpawnerBlockEntity) tileentity).getSpawner();
+                    EntityType<?> entitytypes = this.getType(itemstack.getTag());
+
+                    mobspawnerabstract.setEntityId(entitytypes);
+                    tileentity.setChanged();
+                    world.sendBlockUpdated(blockposition, iblockdata, iblockdata, 3);
+                    itemstack.shrink(1);
                     return InteractionResult.CONSUME;
                 }
             }
 
-            BlockPos blockPos2;
-            if (blockState.getCollisionShape(level, blockPos).isEmpty()) {
-                blockPos2 = blockPos;
+            BlockPos blockposition1;
+
+            if (iblockdata.getCollisionShape(world, blockposition).isEmpty()) {
+                blockposition1 = blockposition;
             } else {
-                blockPos2 = blockPos.relative(direction);
+                blockposition1 = blockposition.relative(enumdirection);
             }
 
-            EntityType<?> entityType2 = this.getType(itemStack.getTag());
-            if (entityType2.spawn((ServerLevel)level, itemStack, context.getPlayer(), blockPos2, MobSpawnType.SPAWN_EGG, true, !Objects.equals(blockPos, blockPos2) && direction == Direction.UP) != null) {
-                itemStack.shrink(1);
-                level.gameEvent(context.getPlayer(), GameEvent.ENTITY_PLACE, blockPos);
+            EntityType<?> entitytypes1 = this.getType(itemstack.getTag());
+
+            if (entitytypes1.spawn((ServerLevel) world, itemstack, context.getPlayer(), blockposition1, MobSpawnType.SPAWN_EGG, true, !Objects.equals(blockposition, blockposition1) && enumdirection == Direction.UP) != null) {
+                itemstack.shrink(1);
+                world.gameEvent(context.getPlayer(), GameEvent.ENTITY_PLACE, blockposition);
             }
 
             return InteractionResult.CONSUME;
@@ -89,32 +97,35 @@
 
     @Override
     public InteractionResultHolder<ItemStack> use(Level world, Player user, InteractionHand hand) {
-        ItemStack itemStack = user.getItemInHand(hand);
-        HitResult hitResult = getPlayerPOVHitResult(world, user, ClipContext.Fluid.SOURCE_ONLY);
-        if (hitResult.getType() != HitResult.Type.BLOCK) {
-            return InteractionResultHolder.pass(itemStack);
+        ItemStack itemstack = user.getItemInHand(hand);
+        BlockHitResult movingobjectpositionblock = getPlayerPOVHitResult(world, user, ClipContext.Fluid.SOURCE_ONLY);
+
+        if (movingobjectpositionblock.getType() != HitResult.Type.BLOCK) {
+            return InteractionResultHolder.pass(itemstack);
         } else if (!(world instanceof ServerLevel)) {
-            return InteractionResultHolder.success(itemStack);
+            return InteractionResultHolder.success(itemstack);
         } else {
-            BlockHitResult blockHitResult = (BlockHitResult)hitResult;
-            BlockPos blockPos = blockHitResult.getBlockPos();
-            if (!(world.getBlockState(blockPos).getBlock() instanceof LiquidBlock)) {
-                return InteractionResultHolder.pass(itemStack);
-            } else if (world.mayInteract(user, blockPos) && user.mayUseItemAt(blockPos, blockHitResult.getDirection(), itemStack)) {
-                EntityType<?> entityType = this.getType(itemStack.getTag());
-                if (entityType.spawn((ServerLevel)world, itemStack, user, blockPos, MobSpawnType.SPAWN_EGG, false, false) == null) {
-                    return InteractionResultHolder.pass(itemStack);
+            BlockHitResult movingobjectpositionblock1 = (BlockHitResult) movingobjectpositionblock;
+            BlockPos blockposition = movingobjectpositionblock1.getBlockPos();
+
+            if (!(world.getBlockState(blockposition).getBlock() instanceof LiquidBlock)) {
+                return InteractionResultHolder.pass(itemstack);
+            } else if (world.mayInteract(user, blockposition) && user.mayUseItemAt(blockposition, movingobjectpositionblock1.getDirection(), itemstack)) {
+                EntityType<?> entitytypes = this.getType(itemstack.getTag());
+
+                if (entitytypes.spawn((ServerLevel) world, itemstack, user, blockposition, MobSpawnType.SPAWN_EGG, false, false) == null) {
+                    return InteractionResultHolder.pass(itemstack);
                 } else {
                     if (!user.getAbilities().instabuild) {
-                        itemStack.shrink(1);
+                        itemstack.shrink(1);
                     }
 
                     user.awardStat(Stats.ITEM_USED.get(this));
-                    world.gameEvent(GameEvent.ENTITY_PLACE, user);
-                    return InteractionResultHolder.consume(itemStack);
+                    world.gameEvent(GameEvent.ENTITY_PLACE, (Entity) user);
+                    return InteractionResultHolder.consume(itemstack);
                 }
             } else {
-                return InteractionResultHolder.fail(itemStack);
+                return InteractionResultHolder.fail(itemstack);
             }
         }
     }
@@ -129,18 +140,19 @@
 
     @Nullable
     public static SpawnEggItem byId(@Nullable EntityType<?> type) {
-        return BY_ID.get(type);
+        return (SpawnEggItem) SpawnEggItem.BY_ID.get(type);
     }
 
     public static Iterable<SpawnEggItem> eggs() {
-        return Iterables.unmodifiableIterable(BY_ID.values());
+        return Iterables.unmodifiableIterable(SpawnEggItem.BY_ID.values());
     }
 
     public EntityType<?> getType(@Nullable CompoundTag nbt) {
         if (nbt != null && nbt.contains("EntityTag", 10)) {
-            CompoundTag compoundTag = nbt.getCompound("EntityTag");
-            if (compoundTag.contains("id", 8)) {
-                return EntityType.byString(compoundTag.getString("id")).orElse(this.defaultType);
+            CompoundTag nbttagcompound1 = nbt.getCompound("EntityTag");
+
+            if (nbttagcompound1.contains("id", 8)) {
+                return (EntityType) EntityType.byString(nbttagcompound1.getString("id")).orElse(this.defaultType);
             }
         }
 
@@ -151,31 +163,32 @@
         if (!this.spawnsEntity(stack.getTag(), entityType)) {
             return Optional.empty();
         } else {
-            Mob mob;
+            Object object;
+
             if (entity instanceof AgeableMob) {
-                mob = ((AgeableMob)entity).getBreedOffspring(world, (AgeableMob)entity);
+                object = ((AgeableMob) entity).getBreedOffspring(world, (AgeableMob) entity);
             } else {
-                mob = entityType.create(world);
+                object = (Mob) entityType.create(world);
             }
 
-            if (mob == null) {
+            if (object == null) {
                 return Optional.empty();
             } else {
-                mob.setBaby(true);
-                if (!mob.isBaby()) {
+                ((Mob) object).setBaby(true);
+                if (!((Mob) object).isBaby()) {
                     return Optional.empty();
                 } else {
-                    mob.moveTo(pos.x(), pos.y(), pos.z(), 0.0F, 0.0F);
-                    world.addFreshEntityWithPassengers(mob);
+                    ((Mob) object).moveTo(pos.x(), pos.y(), pos.z(), 0.0F, 0.0F);
+                    world.addFreshEntityWithPassengers((Entity) object, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.SPAWNER_EGG); // CraftBukkit
                     if (stack.hasCustomHoverName()) {
-                        mob.setCustomName(stack.getHoverName());
+                        ((Mob) object).setCustomName(stack.getHoverName());
                     }
 
                     if (!user.getAbilities().instabuild) {
                         stack.shrink(1);
                     }
 
-                    return Optional.of(mob);
+                    return Optional.of((Mob) object); // CraftBukkit - decompile error
                 }
             }
         }
