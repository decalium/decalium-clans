--- a/net/minecraft/world/level/StructureFeatureManager.java
+++ b/net/minecraft/world/level/StructureFeatureManager.java
@@ -1,12 +1,16 @@
+// mc-dev import
 package net.minecraft.world.level;
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableList.Builder;
+import it.unimi.dsi.fastutil.longs.LongIterator;
 import it.unimi.dsi.fastutil.longs.LongSet;
+import java.util.Iterator;
 import java.util.List;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.SectionPos;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.WorldGenRegion;
 import net.minecraft.world.level.chunk.ChunkStatus;
 import net.minecraft.world.level.chunk.FeatureAccess;
@@ -18,6 +22,7 @@
 import net.minecraft.world.level.levelgen.structure.StructureStart;
 
 public class StructureFeatureManager {
+
     private final LevelAccessor level;
     private final WorldGenSettings worldGenSettings;
     private final StructureCheck structureCheck;
@@ -30,21 +35,26 @@
 
     public StructureFeatureManager forWorldGenRegion(WorldGenRegion region) {
         if (region.getLevel() != this.level) {
-            throw new IllegalStateException("Using invalid feature manager (source level: " + region.getLevel() + ", region: " + region);
+            ServerLevel worldserver = region.getLevel();
+
+            throw new IllegalStateException("Using invalid feature manager (source level: " + worldserver + ", region: " + region);
         } else {
             return new StructureFeatureManager(region, this.worldGenSettings, this.structureCheck);
         }
     }
 
     public List<? extends StructureStart<?>> startsForFeature(SectionPos sectionPos, StructureFeature<?> feature) {
-        LongSet longSet = this.level.getChunk(sectionPos.x(), sectionPos.z(), ChunkStatus.STRUCTURE_REFERENCES).getReferencesForFeature(feature);
+        LongSet longset = this.level.getChunk(sectionPos.x(), sectionPos.z(), ChunkStatus.STRUCTURE_REFERENCES).getReferencesForFeature(feature);
         Builder<StructureStart<?>> builder = ImmutableList.builder();
+        LongIterator longiterator = longset.iterator();
 
-        for(long l : longSet) {
-            SectionPos sectionPos2 = SectionPos.of(new ChunkPos(l), this.level.getMinSection());
-            StructureStart<?> structureStart = this.getStartForFeature(sectionPos2, feature, this.level.getChunk(sectionPos2.x(), sectionPos2.z(), ChunkStatus.STRUCTURE_STARTS));
-            if (structureStart != null && structureStart.isValid()) {
-                builder.add(structureStart);
+        while (longiterator.hasNext()) {
+            long i = (Long) longiterator.next();
+            SectionPos sectionposition1 = SectionPos.of(new ChunkPos(i), this.level.getMinSection());
+            StructureStart<?> structurestart = this.getStartForFeature(sectionposition1, feature, this.level.getChunk(sectionposition1.x(), sectionposition1.z(), ChunkStatus.STRUCTURE_STARTS));
+
+            if (structurestart != null && structurestart.isValid()) {
+                builder.add(structurestart);
             }
         }
 
@@ -69,20 +79,33 @@
     }
 
     public StructureStart<?> getStructureAt(BlockPos pos, StructureFeature<?> structure) {
-        for(StructureStart<?> structureStart : this.startsForFeature(SectionPos.of(pos), structure)) {
-            if (structureStart.getBoundingBox().isInside(pos)) {
-                return structureStart;
+        Iterator iterator = this.startsForFeature(SectionPos.of(pos), structure).iterator();
+
+        StructureStart structurestart;
+
+        do {
+            if (!iterator.hasNext()) {
+                return StructureStart.INVALID_START;
             }
-        }
 
-        return StructureStart.INVALID_START;
+            structurestart = (StructureStart) iterator.next();
+        } while (!structurestart.getBoundingBox().isInside(pos));
+
+        return structurestart;
     }
 
     public StructureStart<?> getStructureWithPieceAt(BlockPos pos, StructureFeature<?> structure) {
-        for(StructureStart<?> structureStart : this.startsForFeature(SectionPos.of(pos), structure)) {
-            for(StructurePiece structurePiece : structureStart.getPieces()) {
-                if (structurePiece.getBoundingBox().isInside(pos)) {
-                    return structureStart;
+        Iterator iterator = this.startsForFeature(SectionPos.of(pos), structure).iterator();
+
+        while (iterator.hasNext()) {
+            StructureStart<?> structurestart = (StructureStart) iterator.next();
+            Iterator iterator1 = structurestart.getPieces().iterator();
+
+            while (iterator1.hasNext()) {
+                StructurePiece structurepiece = (StructurePiece) iterator1.next();
+
+                if (structurepiece.getBoundingBox().isInside(pos)) {
+                    return structurestart;
                 }
             }
         }
@@ -91,8 +114,9 @@
     }
 
     public boolean hasAnyStructureAt(BlockPos pos) {
-        SectionPos sectionPos = SectionPos.of(pos);
-        return this.level.getChunk(sectionPos.x(), sectionPos.z(), ChunkStatus.STRUCTURE_REFERENCES).hasAnyStructureReferences();
+        SectionPos sectionposition = SectionPos.of(pos);
+
+        return this.level.getChunk(sectionposition.x(), sectionposition.z(), ChunkStatus.STRUCTURE_REFERENCES).hasAnyStructureReferences();
     }
 
     public StructureCheckResult checkStructurePresence(ChunkPos chunkPos, StructureFeature<?> structure, boolean skipExistingChunk) {
@@ -103,4 +127,10 @@
         structureStart.addReference();
         this.structureCheck.incrementReference(structureStart.getChunkPos(), structureStart.getFeature());
     }
+
+    // Spigot start
+    public Level getWorld() {
+        return this.level.getMinecraftWorld();
+    }
+    // Spigot end
 }
