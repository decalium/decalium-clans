--- a/net/minecraft/world/entity/ai/behavior/VillagerMakeLove.java
+++ b/net/minecraft/world/entity/ai/behavior/VillagerMakeLove.java
@@ -7,6 +7,7 @@
 import net.minecraft.network.protocol.game.DebugPackets;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.entity.AgeableMob;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
@@ -16,6 +17,7 @@
 import net.minecraft.world.level.pathfinder.Path;
 
 public class VillagerMakeLove extends Behavior<Villager> {
+
     private static final int INTERACT_DIST_SQR = 5;
     private static final float SPEED_MODIFIER = 0.5F;
     private long birthTimestamp;
@@ -24,38 +26,37 @@
         super(ImmutableMap.of(MemoryModuleType.BREED_TARGET, MemoryStatus.VALUE_PRESENT, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryStatus.VALUE_PRESENT), 350, 350);
     }
 
-    @Override
     protected boolean checkExtraStartConditions(ServerLevel world, Villager entity) {
         return this.isBreedingPossible(entity);
     }
 
-    @Override
-    protected boolean canStillUse(ServerLevel serverLevel, Villager villager, long l) {
-        return l <= this.birthTimestamp && this.isBreedingPossible(villager);
+    protected boolean canStillUse(ServerLevel worldserver, Villager entityvillager, long i) {
+        return i <= this.birthTimestamp && this.isBreedingPossible(entityvillager);
     }
 
-    @Override
-    protected void start(ServerLevel serverLevel, Villager villager, long l) {
-        AgeableMob ageableMob = villager.getBrain().getMemory(MemoryModuleType.BREED_TARGET).get();
-        BehaviorUtils.lockGazeAndWalkToEachOther(villager, ageableMob, 0.5F);
-        serverLevel.broadcastEntityEvent(ageableMob, (byte)18);
-        serverLevel.broadcastEntityEvent(villager, (byte)18);
-        int i = 275 + villager.getRandom().nextInt(50);
-        this.birthTimestamp = l + (long)i;
+    protected void start(ServerLevel worldserver, Villager entityvillager, long i) {
+        AgeableMob entityageable = (AgeableMob) entityvillager.getBrain().getMemory(MemoryModuleType.BREED_TARGET).get();
+
+        BehaviorUtils.lockGazeAndWalkToEachOther(entityvillager, entityageable, 0.5F);
+        worldserver.broadcastEntityEvent(entityageable, (byte) 18);
+        worldserver.broadcastEntityEvent(entityvillager, (byte) 18);
+        int j = 275 + entityvillager.getRandom().nextInt(50);
+
+        this.birthTimestamp = i + (long) j;
     }
 
-    @Override
-    protected void tick(ServerLevel serverLevel, Villager villager, long l) {
-        Villager villager2 = (Villager)villager.getBrain().getMemory(MemoryModuleType.BREED_TARGET).get();
-        if (!(villager.distanceToSqr(villager2) > 5.0D)) {
-            BehaviorUtils.lockGazeAndWalkToEachOther(villager, villager2, 0.5F);
-            if (l >= this.birthTimestamp) {
-                villager.eatAndDigestFood();
-                villager2.eatAndDigestFood();
-                this.tryToGiveBirth(serverLevel, villager, villager2);
-            } else if (villager.getRandom().nextInt(35) == 0) {
-                serverLevel.broadcastEntityEvent(villager2, (byte)12);
-                serverLevel.broadcastEntityEvent(villager, (byte)12);
+    protected void tick(ServerLevel worldserver, Villager entityvillager, long i) {
+        Villager entityvillager1 = (Villager) entityvillager.getBrain().getMemory(MemoryModuleType.BREED_TARGET).get();
+
+        if (entityvillager.distanceToSqr((Entity) entityvillager1) <= 5.0D) {
+            BehaviorUtils.lockGazeAndWalkToEachOther(entityvillager, entityvillager1, 0.5F);
+            if (i >= this.birthTimestamp) {
+                entityvillager.eatAndDigestFood();
+                entityvillager1.eatAndDigestFood();
+                this.tryToGiveBirth(worldserver, entityvillager, entityvillager1);
+            } else if (entityvillager.getRandom().nextInt(35) == 0) {
+                worldserver.broadcastEntityEvent(entityvillager1, (byte) 12);
+                worldserver.broadcastEntityEvent(entityvillager, (byte) 12);
             }
 
         }
@@ -63,66 +64,72 @@
 
     private void tryToGiveBirth(ServerLevel world, Villager first, Villager second) {
         Optional<BlockPos> optional = this.takeVacantBed(world, first);
+
         if (!optional.isPresent()) {
-            world.broadcastEntityEvent(second, (byte)13);
-            world.broadcastEntityEvent(first, (byte)13);
+            world.broadcastEntityEvent(second, (byte) 13);
+            world.broadcastEntityEvent(first, (byte) 13);
         } else {
-            Optional<Villager> optional2 = this.breed(world, first, second);
-            if (optional2.isPresent()) {
-                this.giveBedToChild(world, optional2.get(), optional.get());
+            Optional<Villager> optional1 = this.breed(world, first, second);
+
+            if (optional1.isPresent()) {
+                this.giveBedToChild(world, (Villager) optional1.get(), (BlockPos) optional.get());
             } else {
-                world.getPoiManager().release(optional.get());
-                DebugPackets.sendPoiTicketCountPacket(world, optional.get());
+                world.getPoiManager().release((BlockPos) optional.get());
+                DebugPackets.sendPoiTicketCountPacket(world, (BlockPos) optional.get());
             }
         }
 
     }
 
-    @Override
-    protected void stop(ServerLevel serverLevel, Villager villager, long l) {
-        villager.getBrain().eraseMemory(MemoryModuleType.BREED_TARGET);
+    protected void stop(ServerLevel worldserver, Villager entityvillager, long i) {
+        entityvillager.getBrain().eraseMemory(MemoryModuleType.BREED_TARGET);
     }
 
     private boolean isBreedingPossible(Villager villager) {
-        Brain<Villager> brain = villager.getBrain();
-        Optional<AgeableMob> optional = brain.getMemory(MemoryModuleType.BREED_TARGET).filter((ageableMob) -> {
-            return ageableMob.getType() == EntityType.VILLAGER;
+        Brain<Villager> behaviorcontroller = villager.getBrain();
+        Optional<AgeableMob> optional = behaviorcontroller.getMemory(MemoryModuleType.BREED_TARGET).filter((entityageable) -> {
+            return entityageable.getType() == EntityType.VILLAGER;
         });
-        if (!optional.isPresent()) {
-            return false;
-        } else {
-            return BehaviorUtils.targetIsValid(brain, MemoryModuleType.BREED_TARGET, EntityType.VILLAGER) && villager.canBreed() && optional.get().canBreed();
-        }
+
+        return !optional.isPresent() ? false : BehaviorUtils.targetIsValid(behaviorcontroller, MemoryModuleType.BREED_TARGET, EntityType.VILLAGER) && villager.canBreed() && ((AgeableMob) optional.get()).canBreed();
     }
 
     private Optional<BlockPos> takeVacantBed(ServerLevel world, Villager villager) {
-        return world.getPoiManager().take(PoiType.HOME.getPredicate(), (blockPos) -> {
-            return this.canReach(villager, blockPos);
+        return world.getPoiManager().take(PoiType.HOME.getPredicate(), (blockposition) -> {
+            return this.canReach(villager, blockposition);
         }, villager.blockPosition(), 48);
     }
 
     private boolean canReach(Villager villager, BlockPos pos) {
-        Path path = villager.getNavigation().createPath(pos, PoiType.HOME.getValidRange());
-        return path != null && path.canReach();
+        Path pathentity = villager.getNavigation().createPath(pos, PoiType.HOME.getValidRange());
+
+        return pathentity != null && pathentity.canReach();
     }
 
     private Optional<Villager> breed(ServerLevel world, Villager parent, Villager partner) {
-        Villager villager = parent.getBreedOffspring(world, partner);
-        if (villager == null) {
+        Villager entityvillager2 = parent.getBreedOffspring(world, partner);
+
+        if (entityvillager2 == null) {
             return Optional.empty();
         } else {
+            // CraftBukkit start - call EntityBreedEvent
+            entityvillager2.setAge(-24000);
+            entityvillager2.moveTo(parent.getX(), parent.getY(), parent.getZ(), 0.0F, 0.0F);
+            if (org.bukkit.craftbukkit.v1_18_R1.event.CraftEventFactory.callEntityBreedEvent(entityvillager2, parent, partner, null, null, 0).isCancelled()) {
+                return Optional.empty();
+            }
+            // CraftBukkit end
             parent.setAge(6000);
             partner.setAge(6000);
-            villager.setAge(-24000);
-            villager.moveTo(parent.getX(), parent.getY(), parent.getZ(), 0.0F, 0.0F);
-            world.addFreshEntityWithPassengers(villager);
-            world.broadcastEntityEvent(villager, (byte)12);
-            return Optional.of(villager);
+            world.addFreshEntityWithPassengers(entityvillager2, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.BREEDING); // CraftBukkit - added SpawnReason
+            world.broadcastEntityEvent(entityvillager2, (byte) 12);
+            return Optional.of(entityvillager2);
         }
     }
 
     private void giveBedToChild(ServerLevel world, Villager child, BlockPos pos) {
-        GlobalPos globalPos = GlobalPos.of(world.dimension(), pos);
-        child.getBrain().setMemory(MemoryModuleType.HOME, globalPos);
+        GlobalPos globalpos = GlobalPos.of(world.dimension(), pos);
+
+        child.getBrain().setMemory(MemoryModuleType.HOME, globalpos); // CraftBukkit - decompile error
     }
 }
