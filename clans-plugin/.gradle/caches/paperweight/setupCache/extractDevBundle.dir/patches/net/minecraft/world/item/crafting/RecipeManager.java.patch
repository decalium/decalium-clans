--- a/net/minecraft/world/item/crafting/RecipeManager.java
+++ b/net/minecraft/world/item/crafting/RecipeManager.java
@@ -1,8 +1,8 @@
 package net.minecraft.world.item.crafting;
 
 import com.google.common.collect.ImmutableMap;
-import com.google.common.collect.Maps;
 import com.google.common.collect.ImmutableMap.Builder;
+import com.google.common.collect.Maps;
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
 import com.google.gson.JsonElement;
@@ -12,10 +12,11 @@
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Comparator;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
-import java.util.Optional;
 import java.util.Map.Entry;
+import java.util.Optional;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import net.minecraft.Util;
@@ -32,93 +33,124 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap; // CraftBukkit
+
 public class RecipeManager extends SimpleJsonResourceReloadListener {
+
     private static final Gson GSON = (new GsonBuilder()).setPrettyPrinting().disableHtmlEscaping().create();
     private static final Logger LOGGER = LogManager.getLogger();
-    public Map<RecipeType<?>, Map<ResourceLocation, Recipe<?>>> recipes = ImmutableMap.of();
+    public Map<RecipeType<?>, Object2ObjectLinkedOpenHashMap<ResourceLocation, Recipe<?>>> recipes = ImmutableMap.of(); // CraftBukkit
     public Map<ResourceLocation, Recipe<?>> byName = ImmutableMap.of();
     private boolean hasErrors;
 
     public RecipeManager() {
-        super(GSON, "recipes");
+        super(RecipeManager.GSON, "recipes");
     }
 
-    @Override
     protected void apply(Map<ResourceLocation, JsonElement> prepared, ResourceManager manager, ProfilerFiller profiler) {
         this.hasErrors = false;
-        Map<RecipeType<?>, Builder<ResourceLocation, Recipe<?>>> map = Maps.newHashMap();
+        // CraftBukkit start - SPIGOT-5667 make sure all types are populated and mutable
+        Map<RecipeType<?>, Object2ObjectLinkedOpenHashMap<ResourceLocation, Recipe<?>>> map1 = Maps.newHashMap();
+        for (RecipeType<?> recipeType : Registry.RECIPE_TYPE) {
+            map1.put(recipeType, new Object2ObjectLinkedOpenHashMap<>());
+        }
+        // CraftBukkit end
         Builder<ResourceLocation, Recipe<?>> builder = ImmutableMap.builder();
+        Iterator iterator = prepared.entrySet().iterator();
 
-        for(Entry<ResourceLocation, JsonElement> entry : prepared.entrySet()) {
-            ResourceLocation resourceLocation = entry.getKey();
+        while (iterator.hasNext()) {
+            Entry<ResourceLocation, JsonElement> entry = (Entry) iterator.next();
+            ResourceLocation minecraftkey = (ResourceLocation) entry.getKey();
 
             try {
-                Recipe<?> recipe = fromJson(resourceLocation, GsonHelper.convertToJsonObject(entry.getValue(), "top element"));
-                map.computeIfAbsent(recipe.getType(), (recipeType) -> {
-                    return ImmutableMap.builder();
-                }).put(resourceLocation, recipe);
-                builder.put(resourceLocation, recipe);
-            } catch (IllegalArgumentException | JsonParseException var10) {
-                LOGGER.error("Parsing error loading recipe {}", resourceLocation, var10);
+                Recipe<?> irecipe = RecipeManager.fromJson(minecraftkey, GsonHelper.convertToJsonObject((JsonElement) entry.getValue(), "top element"));
+
+                // CraftBukkit start
+                (map1.computeIfAbsent(irecipe.getType(), (recipes) -> {
+                    return new Object2ObjectLinkedOpenHashMap<>();
+                    // CraftBukkit end
+                })).put(minecraftkey, irecipe);
+                builder.put(minecraftkey, irecipe);
+            } catch (IllegalArgumentException | JsonParseException jsonparseexception) {
+                RecipeManager.LOGGER.error("Parsing error loading recipe {}", minecraftkey, jsonparseexception);
             }
         }
 
-        this.recipes = map.entrySet().stream().collect(ImmutableMap.toImmutableMap(Entry::getKey, (entryx) -> {
-            return entryx.getValue().build();
+        this.recipes = (Map) map1.entrySet().stream().collect(ImmutableMap.toImmutableMap(Entry::getKey, (entry1) -> {
+            return entry1.getValue(); // CraftBukkit // Paper - decompile fix - *shrugs internally* // todo: is this needed anymore?
         }));
-        this.byName = builder.build();
-        LOGGER.info("Loaded {} recipes", (int)map.size());
+        this.byName = Maps.newHashMap(builder.build()); // CraftBukkit
+        RecipeManager.LOGGER.info("Loaded {} recipes", map1.size());
+    }
+
+    // CraftBukkit start
+    public void addRecipe(Recipe<?> irecipe) {
+        org.spigotmc.AsyncCatcher.catchOp("Recipe Add"); // Spigot
+        Object2ObjectLinkedOpenHashMap<ResourceLocation, Recipe<?>> map = this.recipes.get(irecipe.getType()); // CraftBukkit
+
+        if (this.byName.containsKey(irecipe.getId()) || map.containsKey(irecipe.getId())) {
+            throw new IllegalStateException("Duplicate recipe ignored with ID " + irecipe.getId());
+        } else {
+            map.putAndMoveToFirst(irecipe.getId(), irecipe); // CraftBukkit - SPIGOT-4638: last recipe gets priority
+            this.byName.put(irecipe.getId(), irecipe);
+        }
     }
+    // CraftBukkit end
 
     public boolean hadErrorsLoading() {
         return this.hasErrors;
     }
 
     public <C extends Container, T extends Recipe<C>> Optional<T> getRecipeFor(RecipeType<T> type, C inventory, Level world) {
-        return this.byType(type).values().stream().flatMap((recipe) -> {
-            return Util.toStream(type.tryMatch(recipe, world, inventory));
+        // CraftBukkit start
+        Optional<T> recipe = this.byType(type).values().stream().flatMap((irecipe) -> {
+            return Util.toStream(type.tryMatch(irecipe, world, inventory));
         }).findFirst();
+        inventory.setCurrentRecipe(recipe.orElse(null)); // CraftBukkit - Clear recipe when no recipe is found
+        // CraftBukkit end
+        return recipe;
     }
 
     public <C extends Container, T extends Recipe<C>> List<T> getAllRecipesFor(RecipeType<T> type) {
-        return this.byType(type).values().stream().map((recipe) -> {
-            return recipe;
+        return (List) this.byType(type).values().stream().map((irecipe) -> {
+            return irecipe;
         }).collect(Collectors.toList());
     }
 
     public <C extends Container, T extends Recipe<C>> List<T> getRecipesFor(RecipeType<T> type, C inventory, Level world) {
-        return this.byType(type).values().stream().flatMap((recipe) -> {
-            return Util.toStream(type.tryMatch(recipe, world, inventory));
-        }).sorted(Comparator.comparing((recipe) -> {
-            return recipe.getResultItem().getDescriptionId();
+        return (List) this.byType(type).values().stream().flatMap((irecipe) -> {
+            return Util.toStream(type.tryMatch(irecipe, world, inventory));
+        }).sorted(Comparator.comparing((irecipe) -> {
+            return irecipe.getResultItem().getDescriptionId();
         })).collect(Collectors.toList());
     }
 
     private <C extends Container, T extends Recipe<C>> Map<ResourceLocation, Recipe<C>> byType(RecipeType<T> type) {
-        return this.recipes.getOrDefault(type, Collections.emptyMap());
+        return (Map) this.recipes.getOrDefault(type, new Object2ObjectLinkedOpenHashMap<>()); // CraftBukkit
     }
 
     public <C extends Container, T extends Recipe<C>> NonNullList<ItemStack> getRemainingItemsFor(RecipeType<T> type, C inventory, Level world) {
         Optional<T> optional = this.getRecipeFor(type, inventory, world);
+
         if (optional.isPresent()) {
-            return optional.get().getRemainingItems(inventory);
+            return ((Recipe) optional.get()).getRemainingItems(inventory);
         } else {
-            NonNullList<ItemStack> nonNullList = NonNullList.withSize(inventory.getContainerSize(), ItemStack.EMPTY);
+            NonNullList<ItemStack> nonnulllist = NonNullList.withSize(inventory.getContainerSize(), ItemStack.EMPTY);
 
-            for(int i = 0; i < nonNullList.size(); ++i) {
-                nonNullList.set(i, inventory.getItem(i));
+            for (int i = 0; i < nonnulllist.size(); ++i) {
+                nonnulllist.set(i, inventory.getItem(i));
             }
 
-            return nonNullList;
+            return nonnulllist;
         }
     }
 
     public Optional<? extends Recipe<?>> byKey(ResourceLocation id) {
-        return Optional.ofNullable(this.byName.get(id));
+        return Optional.ofNullable(this.byName.get(id)); // CraftBukkit - decompile error
     }
 
     public Collection<Recipe<?>> getRecipes() {
-        return this.recipes.values().stream().flatMap((map) -> {
+        return (Collection) this.recipes.values().stream().flatMap((map) -> {
             return map.values().stream();
         }).collect(Collectors.toSet());
     }
@@ -130,28 +162,43 @@
     }
 
     public static Recipe<?> fromJson(ResourceLocation id, JsonObject json) {
-        String string = GsonHelper.getAsString(json, "type");
-        return Registry.RECIPE_SERIALIZER.getOptional(new ResourceLocation(string)).orElseThrow(() -> {
-            return new JsonSyntaxException("Invalid or unsupported recipe type '" + string + "'");
-        }).fromJson(id, json);
+        String s = GsonHelper.getAsString(json, "type");
+
+        return ((RecipeSerializer) Registry.RECIPE_SERIALIZER.getOptional(new ResourceLocation(s)).orElseThrow(() -> {
+            return new JsonSyntaxException("Invalid or unsupported recipe type '" + s + "'");
+        })).fromJson(id, json);
     }
 
     public void replaceRecipes(Iterable<Recipe<?>> recipes) {
         this.hasErrors = false;
-        Map<RecipeType<?>, Map<ResourceLocation, Recipe<?>>> map = Maps.newHashMap();
+        Map<RecipeType<?>, Object2ObjectLinkedOpenHashMap<ResourceLocation, Recipe<?>>> map = Maps.newHashMap(); // CraftBukkit
         Builder<ResourceLocation, Recipe<?>> builder = ImmutableMap.builder();
-        recipes.forEach((recipe) -> {
-            Map<ResourceLocation, Recipe<?>> map2 = map.computeIfAbsent(recipe.getType(), (t) -> {
-                return Maps.newHashMap();
+
+        recipes.forEach((irecipe) -> {
+            Map<ResourceLocation, Recipe<?>> map1 = (Map) map.computeIfAbsent(irecipe.getType(), (recipes_) -> { // Paper - remap fix
+                return new Object2ObjectLinkedOpenHashMap<>(); // CraftBukkit
             });
-            ResourceLocation resourceLocation = recipe.getId();
-            Recipe<?> recipe2 = map2.put(resourceLocation, recipe);
-            builder.put(resourceLocation, recipe);
-            if (recipe2 != null) {
-                throw new IllegalStateException("Duplicate recipe ignored with ID " + resourceLocation);
+            ResourceLocation minecraftkey = irecipe.getId();
+            Recipe<?> irecipe1 = (Recipe) map1.put(minecraftkey, irecipe);
+
+            builder.put(minecraftkey, irecipe);
+            if (irecipe1 != null) {
+                throw new IllegalStateException("Duplicate recipe ignored with ID " + minecraftkey);
             }
         });
         this.recipes = ImmutableMap.copyOf(map);
-        this.byName = builder.build();
+        this.byName = Maps.newHashMap(builder.build()); // CraftBukkit
+    }
+
+    // CraftBukkit start
+    public void clearRecipes() {
+        this.recipes = Maps.newHashMap();
+
+        for (RecipeType<?> recipeType : Registry.RECIPE_TYPE) {
+            this.recipes.put(recipeType, new Object2ObjectLinkedOpenHashMap<>());
+        }
+
+        this.byName = Maps.newHashMap();
     }
+    // CraftBukkit end
 }
