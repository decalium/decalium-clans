--- a/net/minecraft/world/level/levelgen/PatrolSpawner.java
+++ b/net/minecraft/world/level/levelgen/PatrolSpawner.java
@@ -16,67 +16,105 @@
 import net.minecraft.world.level.block.state.BlockState;
 
 public class PatrolSpawner implements CustomSpawner {
+
     private int nextTick;
 
+    public PatrolSpawner() {}
+
     @Override
     public int tick(ServerLevel world, boolean spawnMonsters, boolean spawnAnimals) {
+        if (world.paperConfig.disablePillagerPatrols || world.paperConfig.patrolSpawnChance == 0) return 0; // Paper
         if (!spawnMonsters) {
             return 0;
         } else if (!world.getGameRules().getBoolean(GameRules.RULE_DO_PATROL_SPAWNING)) {
             return 0;
         } else {
             Random random = world.random;
-            --this.nextTick;
-            if (this.nextTick > 0) {
+
+            // Paper start - Patrol settings
+            // Random player selection moved up for per player spawning and configuration
+            int j = world.players().size();
+            if (j < 1) {
                 return 0;
+            }
+
+            net.minecraft.server.level.ServerPlayer entityhuman = world.players().get(random.nextInt(j));
+            if (entityhuman.isSpectator()) {
+                return 0;
+            }
+
+            int patrolSpawnDelay;
+            if (world.paperConfig.patrolPerPlayerDelay) {
+                --entityhuman.patrolSpawnDelay;
+                patrolSpawnDelay = entityhuman.patrolSpawnDelay;
             } else {
-                this.nextTick += 12000 + random.nextInt(1200);
-                long l = world.getDayTime() / 24000L;
-                if (l >= 5L && world.isDay()) {
-                    if (random.nextInt(5) != 0) {
+                this.nextTick--;
+                patrolSpawnDelay = this.nextTick;
+            }
+
+            if (patrolSpawnDelay > 0) {
+                return 0;
+            } else {
+                long days;
+                if (world.paperConfig.patrolPerPlayerStart) {
+                    days = entityhuman.getStats().getValue(net.minecraft.stats.Stats.CUSTOM.get(net.minecraft.stats.Stats.PLAY_TIME)) / 24000L; // PLAY_ONE_MINUTE is actually counting in ticks, a misnomer by Mojang
+                } else {
+                    days = world.getDayTime() / 24000L;
+                }
+                if (world.paperConfig.patrolPerPlayerDelay) {
+                    entityhuman.patrolSpawnDelay += world.paperConfig.patrolDelay + random.nextInt(1200);
+                } else {
+                    this.nextTick += world.paperConfig.patrolDelay + random.nextInt(1200);
+                }
+
+                if (days >= world.paperConfig.patrolStartDay && world.isDay()) {
+                    if (random.nextDouble() >= world.paperConfig.patrolSpawnChance) {
+                        // Paper end
                         return 0;
                     } else {
-                        int i = world.players().size();
-                        if (i < 1) {
+
+                        if (j < 1) {
                             return 0;
                         } else {
-                            Player player = world.players().get(random.nextInt(i));
-                            if (player.isSpectator()) {
+
+                            if (entityhuman.isSpectator()) {
                                 return 0;
-                            } else if (world.isCloseToVillage(player.blockPosition(), 2)) {
+                            } else if (world.isCloseToVillage(entityhuman.blockPosition(), 2)) {
                                 return 0;
                             } else {
-                                int j = (24 + random.nextInt(24)) * (random.nextBoolean() ? -1 : 1);
                                 int k = (24 + random.nextInt(24)) * (random.nextBoolean() ? -1 : 1);
-                                BlockPos.MutableBlockPos mutableBlockPos = player.blockPosition().mutable().move(j, 0, k);
-                                int m = 10;
-                                if (!world.hasChunksAt(mutableBlockPos.getX() - 10, mutableBlockPos.getZ() - 10, mutableBlockPos.getX() + 10, mutableBlockPos.getZ() + 10)) {
+                                int l = (24 + random.nextInt(24)) * (random.nextBoolean() ? -1 : 1);
+                                BlockPos.MutableBlockPos blockposition_mutableblockposition = entityhuman.blockPosition().mutable().move(k, 0, l);
+                                boolean flag2 = true;
+
+                                if (!world.hasChunksAt(blockposition_mutableblockposition.getX() - 10, blockposition_mutableblockposition.getZ() - 10, blockposition_mutableblockposition.getX() + 10, blockposition_mutableblockposition.getZ() + 10)) {
                                     return 0;
                                 } else {
-                                    Biome biome = world.getBiome(mutableBlockPos);
-                                    Biome.BiomeCategory biomeCategory = biome.getBiomeCategory();
-                                    if (biomeCategory == Biome.BiomeCategory.MUSHROOM) {
+                                    Biome biomebase = world.getBiome(blockposition_mutableblockposition);
+                                    Biome.BiomeCategory biomebase_geography = biomebase.getBiomeCategory();
+
+                                    if (biomebase_geography == Biome.BiomeCategory.MUSHROOM) {
                                         return 0;
                                     } else {
-                                        int n = 0;
-                                        int o = (int)Math.ceil((double)world.getCurrentDifficultyAt(mutableBlockPos).getEffectiveDifficulty()) + 1;
+                                        int i1 = 0;
+                                        int j1 = (int) Math.ceil((double) world.getCurrentDifficultyAt(blockposition_mutableblockposition).getEffectiveDifficulty()) + 1;
 
-                                        for(int p = 0; p < o; ++p) {
-                                            ++n;
-                                            mutableBlockPos.setY(world.getHeightmapPos(Heightmap.Types.MOTION_BLOCKING_NO_LEAVES, mutableBlockPos).getY());
-                                            if (p == 0) {
-                                                if (!this.spawnPatrolMember(world, mutableBlockPos, random, true)) {
+                                        for (int k1 = 0; k1 < j1; ++k1) {
+                                            ++i1;
+                                            blockposition_mutableblockposition.setY(world.getHeightmapPos(Heightmap.Types.MOTION_BLOCKING_NO_LEAVES, blockposition_mutableblockposition).getY());
+                                            if (k1 == 0) {
+                                                if (!this.spawnPatrolMember(world, blockposition_mutableblockposition, random, true)) {
                                                     break;
                                                 }
                                             } else {
-                                                this.spawnPatrolMember(world, mutableBlockPos, random, false);
+                                                this.spawnPatrolMember(world, blockposition_mutableblockposition, random, false);
                                             }
 
-                                            mutableBlockPos.setX(mutableBlockPos.getX() + random.nextInt(5) - random.nextInt(5));
-                                            mutableBlockPos.setZ(mutableBlockPos.getZ() + random.nextInt(5) - random.nextInt(5));
+                                            blockposition_mutableblockposition.setX(blockposition_mutableblockposition.getX() + random.nextInt(5) - random.nextInt(5));
+                                            blockposition_mutableblockposition.setZ(blockposition_mutableblockposition.getZ() + random.nextInt(5) - random.nextInt(5));
                                         }
 
-                                        return n;
+                                        return i1;
                                     }
                                 }
                             }
@@ -90,22 +128,24 @@
     }
 
     private boolean spawnPatrolMember(ServerLevel world, BlockPos pos, Random random, boolean captain) {
-        BlockState blockState = world.getBlockState(pos);
-        if (!NaturalSpawner.isValidEmptySpawnBlock(world, pos, blockState, blockState.getFluidState(), EntityType.PILLAGER)) {
+        BlockState iblockdata = world.getBlockState(pos);
+
+        if (!NaturalSpawner.isValidEmptySpawnBlock(world, pos, iblockdata, iblockdata.getFluidState(), EntityType.PILLAGER)) {
             return false;
         } else if (!PatrollingMonster.checkPatrollingMonsterSpawnRules(EntityType.PILLAGER, world, MobSpawnType.PATROL, pos, random)) {
             return false;
         } else {
-            PatrollingMonster patrollingMonster = EntityType.PILLAGER.create(world);
-            if (patrollingMonster != null) {
+            PatrollingMonster entitymonsterpatrolling = (PatrollingMonster) EntityType.PILLAGER.create(world);
+
+            if (entitymonsterpatrolling != null) {
                 if (captain) {
-                    patrollingMonster.setPatrolLeader(true);
-                    patrollingMonster.findPatrolTarget();
+                    entitymonsterpatrolling.setPatrolLeader(true);
+                    entitymonsterpatrolling.findPatrolTarget();
                 }
 
-                patrollingMonster.setPos((double)pos.getX(), (double)pos.getY(), (double)pos.getZ());
-                patrollingMonster.finalizeSpawn(world, world.getCurrentDifficultyAt(pos), MobSpawnType.PATROL, (SpawnGroupData)null, (CompoundTag)null);
-                world.addFreshEntityWithPassengers(patrollingMonster);
+                entitymonsterpatrolling.setPos((double) pos.getX(), (double) pos.getY(), (double) pos.getZ());
+                entitymonsterpatrolling.finalizeSpawn(world, world.getCurrentDifficultyAt(pos), MobSpawnType.PATROL, (SpawnGroupData) null, (CompoundTag) null);
+                world.addFreshEntityWithPassengers(entitymonsterpatrolling, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.PATROL); // CraftBukkit
                 return true;
             } else {
                 return false;
