--- a/net/minecraft/server/Main.java
+++ b/net/minecraft/server/Main.java
@@ -13,6 +13,8 @@
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
 import java.util.function.BooleanSupplier;
+import io.papermc.paper.world.ThreadedWorldUpgrader;
+import joptsimple.NonOptionArgumentSpec;
 import joptsimple.OptionParser;
 import joptsimple.OptionSet;
 import joptsimple.OptionSpec;
@@ -22,8 +24,6 @@
 import net.minecraft.Util;
 import net.minecraft.commands.Commands;
 import net.minecraft.core.RegistryAccess;
-import net.minecraft.nbt.NbtOps;
-import net.minecraft.nbt.Tag;
 import net.minecraft.network.chat.Component;
 import net.minecraft.obfuscate.DontObfuscate;
 import net.minecraft.resources.RegistryReadOps;
@@ -35,6 +35,7 @@
 import net.minecraft.server.packs.repository.FolderRepositorySource;
 import net.minecraft.server.packs.repository.PackRepository;
 import net.minecraft.server.packs.repository.PackSource;
+import net.minecraft.server.packs.repository.RepositorySource;
 import net.minecraft.server.packs.repository.ServerPacksSource;
 import net.minecraft.server.players.GameProfileCache;
 import net.minecraft.util.Mth;
@@ -44,188 +45,292 @@
 import net.minecraft.util.worldupdate.WorldUpgrader;
 import net.minecraft.world.level.DataPackConfig;
 import net.minecraft.world.level.GameRules;
-import net.minecraft.world.level.LevelSettings;
+import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.levelgen.WorldGenSettings;
 import net.minecraft.world.level.storage.LevelResource;
 import net.minecraft.world.level.storage.LevelStorageSource;
 import net.minecraft.world.level.storage.LevelSummary;
-import net.minecraft.world.level.storage.PrimaryLevelData;
-import net.minecraft.world.level.storage.WorldData;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+// CraftBukkit start
+import net.minecraft.SharedConstants;
+
 public class Main {
+
     private static final Logger LOGGER = LogManager.getLogger();
 
+    public Main() {}
+
     @DontObfuscate
-    public static void main(String[] args) {
+    public static void main(final OptionSet optionset) { // CraftBukkit - replaces main(String[] astring)
         SharedConstants.tryDetectVersion();
-        OptionParser optionParser = new OptionParser();
-        OptionSpec<Void> optionSpec = optionParser.accepts("nogui");
-        OptionSpec<Void> optionSpec2 = optionParser.accepts("initSettings", "Initializes 'server.properties' and 'eula.txt', then quits");
-        OptionSpec<Void> optionSpec3 = optionParser.accepts("demo");
-        OptionSpec<Void> optionSpec4 = optionParser.accepts("bonusChest");
-        OptionSpec<Void> optionSpec5 = optionParser.accepts("forceUpgrade");
-        OptionSpec<Void> optionSpec6 = optionParser.accepts("eraseCache");
-        OptionSpec<Void> optionSpec7 = optionParser.accepts("safeMode", "Loads level with vanilla datapack only");
-        OptionSpec<Void> optionSpec8 = optionParser.accepts("help").forHelp();
-        OptionSpec<String> optionSpec9 = optionParser.accepts("singleplayer").withRequiredArg();
-        OptionSpec<String> optionSpec10 = optionParser.accepts("universe").withRequiredArg().defaultsTo(".");
-        OptionSpec<String> optionSpec11 = optionParser.accepts("world").withRequiredArg();
-        OptionSpec<Integer> optionSpec12 = optionParser.accepts("port").withRequiredArg().ofType(Integer.class).defaultsTo(-1);
-        OptionSpec<String> optionSpec13 = optionParser.accepts("serverId").withRequiredArg();
-        OptionSpec<Void> optionSpec14 = optionParser.accepts("jfrProfile");
-        OptionSpec<String> optionSpec15 = optionParser.nonOptions();
+        /* CraftBukkit start - Replace everything
+        OptionParser optionparser = new OptionParser();
+        OptionSpec<Void> optionspec = optionparser.accepts("nogui");
+        OptionSpec<Void> optionspec1 = optionparser.accepts("initSettings", "Initializes 'server.properties' and 'eula.txt', then quits");
+        OptionSpec<Void> optionspec2 = optionparser.accepts("demo");
+        OptionSpec<Void> optionspec3 = optionparser.accepts("bonusChest");
+        OptionSpec<Void> optionspec4 = optionparser.accepts("forceUpgrade");
+        OptionSpec<Void> optionspec5 = optionparser.accepts("eraseCache");
+        OptionSpec<Void> optionspec6 = optionparser.accepts("safeMode", "Loads level with vanilla datapack only");
+        OptionSpec<Void> optionspec7 = optionparser.accepts("help").forHelp();
+        OptionSpec<String> optionspec8 = optionparser.accepts("singleplayer").withRequiredArg();
+        OptionSpec<String> optionspec9 = optionparser.accepts("universe").withRequiredArg().defaultsTo(".", new String[0]);
+        OptionSpec<String> optionspec10 = optionparser.accepts("world").withRequiredArg();
+        OptionSpec<Integer> optionspec11 = optionparser.accepts("port").withRequiredArg().ofType(Integer.class).defaultsTo(-1, new Integer[0]);
+        OptionSpec<String> optionspec12 = optionparser.accepts("serverId").withRequiredArg();
+        OptionSpec<Void> optionspec13 = optionparser.accepts("jfrProfile");
+        NonOptionArgumentSpec nonoptionargumentspec = optionparser.nonOptions();
 
         try {
-            OptionSet optionSet = optionParser.parse(args);
-            if (optionSet.has(optionSpec8)) {
-                optionParser.printHelpOn(System.err);
+            OptionSet optionset = optionparser.parse(astring);
+
+            if (optionset.has(optionspec7)) {
+                optionparser.printHelpOn(System.err);
                 return;
             }
+            */ // CraftBukkit end
+
+        try {
 
             CrashReport.preload();
-            if (optionSet.has(optionSpec14)) {
+            if (optionset.has("jfrProfile")) { // CraftBukkit
                 JvmProfiler.INSTANCE.start(Environment.SERVER);
             }
 
             Bootstrap.bootStrap();
             Bootstrap.validate();
             Util.startTimerHackThread();
-            RegistryAccess.RegistryHolder registryHolder = RegistryAccess.builtin();
+            RegistryAccess.RegistryHolder iregistrycustom_dimension = RegistryAccess.builtin();
             Path path = Paths.get("server.properties");
-            DedicatedServerSettings dedicatedServerSettings = new DedicatedServerSettings(path);
-            dedicatedServerSettings.forceSave();
-            Path path2 = Paths.get("eula.txt");
-            Eula eula = new Eula(path2);
-            if (optionSet.has(optionSpec2)) {
-                LOGGER.info("Initialized '{}' and '{}'", path.toAbsolutePath(), path2.toAbsolutePath());
+            DedicatedServerSettings dedicatedserversettings = new DedicatedServerSettings(optionset); // CraftBukkit - CLI argument support
+
+            dedicatedserversettings.forceSave();
+            // Paper start - load config files for access below if needed
+            org.bukkit.configuration.file.YamlConfiguration bukkitConfiguration = loadConfigFile((File) optionset.valueOf("bukkit-settings"));
+            org.bukkit.configuration.file.YamlConfiguration spigotConfiguration = loadConfigFile((File) optionset.valueOf("spigot-settings"));
+            org.bukkit.configuration.file.YamlConfiguration paperConfiguration = loadConfigFile((File) optionset.valueOf("paper-settings"));
+            // Paper end
+
+            Path path1 = Paths.get("eula.txt");
+            Eula eula = new Eula(path1);
+
+            if (optionset.has("initSettings")) { // CraftBukkit
+                Main.LOGGER.info("Initialized '{}' and '{}'", path.toAbsolutePath(), path1.toAbsolutePath());
                 return;
             }
 
-            if (!eula.hasAgreedToEULA()) {
-                LOGGER.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
+            // Spigot Start
+            boolean eulaAgreed = Boolean.getBoolean( "com.mojang.eula.agree" );
+            if ( eulaAgreed )
+            {
+                System.err.println( "You have used the Spigot command line EULA agreement flag." );
+                System.err.println( "By using this setting you are indicating your agreement to Mojang's EULA (https://account.mojang.com/documents/minecraft_eula)." );
+                System.err.println( "If you do not agree to the above EULA please stop your server and remove this flag immediately." );
+            }
+            // Spigot End
+            if (!eula.hasAgreedToEULA() && !eulaAgreed) { // Spigot
+                Main.LOGGER.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
                 return;
             }
 
-            File file = new File(optionSet.valueOf(optionSpec10));
-            YggdrasilAuthenticationService yggdrasilAuthenticationService = new YggdrasilAuthenticationService(Proxy.NO_PROXY);
-            MinecraftSessionService minecraftSessionService = yggdrasilAuthenticationService.createMinecraftSessionService();
-            GameProfileRepository gameProfileRepository = yggdrasilAuthenticationService.createProfileRepository();
-            GameProfileCache gameProfileCache = new GameProfileCache(gameProfileRepository, new File(file, MinecraftServer.USERID_CACHE_FILE.getName()));
-            String string = Optional.ofNullable(optionSet.valueOf(optionSpec11)).orElse(dedicatedServerSettings.getProperties().levelName);
-            LevelStorageSource levelStorageSource = LevelStorageSource.createDefault(file.toPath());
-            LevelStorageSource.LevelStorageAccess levelStorageAccess = levelStorageSource.createAccess(string);
-            LevelSummary levelSummary = levelStorageAccess.getSummary();
-            if (levelSummary != null) {
-                if (levelSummary.requiresManualConversion()) {
-                    LOGGER.info("This world must be opened in an older version (like 1.6.4) to be safely converted");
+            org.spigotmc.SpigotConfig.disabledAdvancements = spigotConfiguration.getStringList("advancements.disabled"); // Paper - fix SPIGOT-5885, must be set early in init
+            // Paper start - fix SPIGOT-5824
+            File file;
+            File userCacheFile = new File("usercache.json");
+            if (optionset.has("universe")) {
+                file = (File) optionset.valueOf("universe"); // CraftBukkit
+                userCacheFile = new File(file, "usercache.json");
+            } else {
+                file = new File(bukkitConfiguration.getString("settings.world-container", "."));
+            }
+            // Paper end - fix SPIGOT-5824
+            YggdrasilAuthenticationService yggdrasilauthenticationservice = new com.destroystokyo.paper.profile.PaperAuthenticationService(Proxy.NO_PROXY); // Paper
+            MinecraftSessionService minecraftsessionservice = yggdrasilauthenticationservice.createMinecraftSessionService();
+            GameProfileRepository gameprofilerepository = yggdrasilauthenticationservice.createProfileRepository();
+            GameProfileCache usercache = new GameProfileCache(gameprofilerepository, userCacheFile); // Paper - only move usercache.json into folder if --universe is used, not world-container
+            // CraftBukkit start
+            String s = (String) Optional.ofNullable((String) optionset.valueOf("world")).orElse(dedicatedserversettings.getProperties().levelName);
+            LevelStorageSource convertable = LevelStorageSource.createDefault(file.toPath());
+            LevelStorageSource.LevelStorageAccess convertable_conversionsession = convertable.createAccess(s, LevelStem.OVERWORLD);
+            LevelSummary worldinfo = convertable_conversionsession.getSummary();
+
+            if (worldinfo != null) {
+                if (worldinfo.requiresManualConversion()) {
+                    Main.LOGGER.info("This world must be opened in an older version (like 1.6.4) to be safely converted");
                     return;
                 }
 
-                if (!levelSummary.isCompatible()) {
-                    LOGGER.info("This world was created by an incompatible version.");
+                if (!worldinfo.isCompatible()) {
+                    Main.LOGGER.info("This world was created by an incompatible version.");
                     return;
                 }
             }
 
-            DataPackConfig dataPackConfig = levelStorageAccess.getDataPacks();
-            boolean bl = optionSet.has(optionSpec7);
-            if (bl) {
-                LOGGER.warn("Safe mode active, only vanilla datapack will be loaded");
+            DataPackConfig datapackconfiguration = convertable_conversionsession.getDataPacks();
+            boolean flag = optionset.has("safeMode");
+
+            if (flag) {
+                Main.LOGGER.warn("Safe mode active, only vanilla datapack will be loaded");
             }
 
-            PackRepository packRepository = new PackRepository(PackType.SERVER_DATA, new ServerPacksSource(), new FolderRepositorySource(levelStorageAccess.getLevelPath(LevelResource.DATAPACK_DIR).toFile(), PackSource.WORLD));
-            DataPackConfig dataPackConfig2 = MinecraftServer.configurePackRepository(packRepository, dataPackConfig == null ? DataPackConfig.DEFAULT : dataPackConfig, bl);
-            CompletableFuture<ServerResources> completableFuture = ServerResources.loadResources(packRepository.openAllSelected(), registryHolder, Commands.CommandSelection.DEDICATED, dedicatedServerSettings.getProperties().functionPermissionLevel, Util.backgroundExecutor(), Runnable::run);
+            PackRepository resourcepackrepository = new PackRepository(PackType.SERVER_DATA, new RepositorySource[]{new ServerPacksSource(), new FolderRepositorySource(convertable_conversionsession.getLevelPath(LevelResource.DATAPACK_DIR).toFile(), PackSource.WORLD)});
+            // CraftBukkit start
+            File bukkitDataPackFolder = new File(convertable_conversionsession.getLevelPath(LevelResource.DATAPACK_DIR).toFile(), "bukkit");
+            if (!bukkitDataPackFolder.exists()) {
+                bukkitDataPackFolder.mkdirs();
+            }
+            File mcMeta = new File(bukkitDataPackFolder, "pack.mcmeta");
+            try {
+                com.google.common.io.Files.write("{\n"
+                        + "    \"pack\": {\n"
+                        + "        \"description\": \"Data pack for resources provided by Bukkit plugins\",\n"
+                        + "        \"pack_format\": " + SharedConstants.getCurrentVersion().getPackVersion() + "\n"
+                        + "    }\n"
+                        + "}\n", mcMeta, com.google.common.base.Charsets.UTF_8);
+            } catch (java.io.IOException ex) {
+                throw new RuntimeException("Could not initialize Bukkit datapack", ex);
+            }
+            // CraftBukkit end
+            DataPackConfig datapackconfiguration1 = MinecraftServer.configurePackRepository(resourcepackrepository, datapackconfiguration == null ? DataPackConfig.DEFAULT : datapackconfiguration, flag);
+            CompletableFuture completablefuture = ServerResources.loadResources(resourcepackrepository.openAllSelected(), iregistrycustom_dimension, Commands.CommandSelection.DEDICATED, dedicatedserversettings.getProperties().functionPermissionLevel, Util.backgroundExecutor(), Runnable::run);
+
+            ServerResources datapackresources;
 
-            ServerResources serverResources;
             try {
-                serverResources = completableFuture.get();
-            } catch (Exception var43) {
-                LOGGER.warn("Failed to load datapacks, can't proceed with server load. You can either fix your datapacks or reset to vanilla with --safeMode", (Throwable)var43);
-                packRepository.close();
+                datapackresources = (ServerResources) completablefuture.get();
+            } catch (Exception exception) {
+                Main.LOGGER.warn("Failed to load datapacks, can't proceed with server load. You can either fix your datapacks or reset to vanilla with --safeMode", exception);
+                resourcepackrepository.close();
                 return;
             }
 
-            serverResources.updateGlobals();
-            RegistryReadOps<Tag> registryReadOps = RegistryReadOps.createAndLoad(NbtOps.INSTANCE, serverResources.getResourceManager(), registryHolder);
-            dedicatedServerSettings.getProperties().getWorldGenSettings(registryHolder);
-            WorldData worldData = levelStorageAccess.getDataTag(registryReadOps, dataPackConfig2);
-            if (worldData == null) {
-                LevelSettings levelSettings;
-                WorldGenSettings worldGenSettings;
-                if (optionSet.has(optionSpec3)) {
-                    levelSettings = MinecraftServer.DEMO_SETTINGS;
-                    worldGenSettings = WorldGenSettings.demoSettings(registryHolder);
+            datapackresources.updateGlobals();
+            /*
+            RegistryReadOps<NBTBase> registryreadops = RegistryReadOps.createAndLoad(DynamicOpsNBT.INSTANCE, datapackresources.getResourceManager(), iregistrycustom_dimension);
+
+            dedicatedserversettings.getProperties().getWorldGenSettings(iregistrycustom_dimension);
+            Object object = convertable_conversionsession.getDataTag(registryreadops, datapackconfiguration1);
+
+            if (object == null) {
+                WorldSettings worldsettings;
+                GeneratorSettings generatorsettings;
+
+                if (optionset.has(optionspec2)) {
+                    worldsettings = MinecraftServer.DEMO_SETTINGS;
+                    generatorsettings = GeneratorSettings.demoSettings(iregistrycustom_dimension);
                 } else {
-                    DedicatedServerProperties dedicatedServerProperties = dedicatedServerSettings.getProperties();
-                    levelSettings = new LevelSettings(dedicatedServerProperties.levelName, dedicatedServerProperties.gamemode, dedicatedServerProperties.hardcore, dedicatedServerProperties.difficulty, false, new GameRules(), dataPackConfig2);
-                    worldGenSettings = optionSet.has(optionSpec4) ? dedicatedServerProperties.getWorldGenSettings(registryHolder).withBonusChest() : dedicatedServerProperties.getWorldGenSettings(registryHolder);
+                    DedicatedServerProperties dedicatedserverproperties = dedicatedserversettings.getProperties();
+
+                    worldsettings = new WorldSettings(dedicatedserverproperties.levelName, dedicatedserverproperties.gamemode, dedicatedserverproperties.hardcore, dedicatedserverproperties.difficulty, false, new GameRules(), datapackconfiguration1);
+                    generatorsettings = optionset.has(optionspec3) ? dedicatedserverproperties.getWorldGenSettings(iregistrycustom_dimension).withBonusChest() : dedicatedserverproperties.getWorldGenSettings(iregistrycustom_dimension);
                 }
 
-                worldData = new PrimaryLevelData(levelSettings, worldGenSettings, Lifecycle.stable());
+                object = new WorldDataServer(worldsettings, generatorsettings, Lifecycle.stable());
             }
 
-            if (optionSet.has(optionSpec5)) {
-                forceUpgrade(levelStorageAccess, DataFixers.getDataFixer(), optionSet.has(optionSpec6), () -> {
+            if (optionset.has(optionspec4)) {
+                forceUpgrade(convertable_conversionsession, DataConverterRegistry.getDataFixer(), optionset.has(optionspec5), () -> {
                     return true;
-                }, worldData.worldGenSettings());
+                }, ((SaveData) object).worldGenSettings());
             }
 
-            levelStorageAccess.saveDataTag(registryHolder, worldData);
-            WorldData worldData2 = worldData;
-            final DedicatedServer dedicatedServer = MinecraftServer.spin((serverThread) -> {
-                DedicatedServer dedicatedServer = new DedicatedServer(serverThread, registryHolder, levelStorageAccess, packRepository, serverResources, worldData2, dedicatedServerSettings, DataFixers.getDataFixer(), minecraftSessionService, gameProfileRepository, gameProfileCache, LoggerChunkProgressListener::new);
-                dedicatedServer.setSingleplayerName(optionSet.valueOf(optionSpec9));
-                dedicatedServer.setPort(optionSet.valueOf(optionSpec12));
-                dedicatedServer.setDemo(optionSet.has(optionSpec3));
-                dedicatedServer.setId(optionSet.valueOf(optionSpec13));
-                boolean bl = !optionSet.has(optionSpec) && !optionSet.valuesOf(optionSpec15).contains("nogui");
-                if (bl && !GraphicsEnvironment.isHeadless()) {
-                    dedicatedServer.showGui();
+            convertable_conversionsession.saveDataTag(iregistrycustom_dimension, (SaveData) object);
+            */
+            Class.forName(net.minecraft.world.entity.npc.VillagerTrades.class.getName());// Paper - load this sync so it won't fail later async
+            final DedicatedServer dedicatedserver = (DedicatedServer) MinecraftServer.spin((thread) -> {
+                DedicatedServer dedicatedserver1 = new DedicatedServer(optionset, datapackconfiguration1, thread, iregistrycustom_dimension, convertable_conversionsession, resourcepackrepository, datapackresources, null, dedicatedserversettings, DataFixers.getDataFixer(), minecraftsessionservice, gameprofilerepository, usercache, LoggerChunkProgressListener::new);
+
+                /*
+                dedicatedserver1.setSingleplayerName((String) optionset.valueOf(optionspec8));
+                dedicatedserver1.setPort((Integer) optionset.valueOf(optionspec11));
+                dedicatedserver1.setDemo(optionset.has(optionspec2));
+                dedicatedserver1.setId((String) optionset.valueOf(optionspec12));
+                */
+                boolean flag1 = !optionset.has("nogui") && !optionset.nonOptionArguments().contains("nogui");
+
+                if(!Boolean.parseBoolean(System.getenv().getOrDefault("PAPER_DISABLE_SERVER_GUI", String.valueOf(false)))) // Paper
+                if (flag1 && !GraphicsEnvironment.isHeadless()) {
+                    dedicatedserver1.showGui();
                 }
 
-                return dedicatedServer;
+                if (optionset.has("port")) {
+                    int port = (Integer) optionset.valueOf("port");
+                    if (port > 0) {
+                        dedicatedserver1.setPort(port);
+                    }
+                }
+
+                return dedicatedserver1;
             });
+            /* CraftBukkit start
             Thread thread = new Thread("Server Shutdown Thread") {
-                @Override
                 public void run() {
-                    dedicatedServer.halt(true);
+                    dedicatedserver.halt(true);
                 }
             };
-            thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
+
+            thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(Main.LOGGER));
             Runtime.getRuntime().addShutdownHook(thread);
-        } catch (Exception var44) {
-            LOGGER.fatal("Failed to start the minecraft server", (Throwable)var44);
+            */ // CraftBukkit end
+        } catch (Exception exception1) {
+            Main.LOGGER.fatal("Failed to start the minecraft server", exception1);
+        }
+
+    }
+
+    // Paper start - load config files
+    private static org.bukkit.configuration.file.YamlConfiguration loadConfigFile(File configFile) throws Exception {
+        org.bukkit.configuration.file.YamlConfiguration config = new org.bukkit.configuration.file.YamlConfiguration();
+        if (configFile.exists()) {
+            try {
+                config.load(configFile);
+            } catch (Exception ex) {
+                throw new Exception("Failed to load configuration file: " + configFile.getName(), ex);
+            }
         }
+        return config;
+    }
+    // Paper end
 
+    // Paper start - fix and optimise world upgrading
+    public static void convertWorldButItWorks(net.minecraft.resources.ResourceKey<net.minecraft.world.level.dimension.LevelStem> dimensionType, net.minecraft.resources.ResourceKey<net.minecraft.world.level.dimension.DimensionType> worldKey, net.minecraft.world.level.storage.LevelStorageSource.LevelStorageAccess worldSession,
+                                              DataFixer dataFixer, Optional<net.minecraft.resources.ResourceKey<com.mojang.serialization.Codec<? extends net.minecraft.world.level.chunk.ChunkGenerator>>> generatorKey, boolean removeCaches) {
+        int threads = Runtime.getRuntime().availableProcessors() * 3 / 8;
+        final ThreadedWorldUpgrader worldUpgrader = new ThreadedWorldUpgrader(dimensionType, worldKey, worldSession.getLevelId(), worldSession.levelPath.toFile(), threads, dataFixer, generatorKey, removeCaches);
+        worldUpgrader.convert();
     }
+    // Paper end - fix and optimise world upgrading
 
     public static void forceUpgrade(LevelStorageSource.LevelStorageAccess session, DataFixer dataFixer, boolean eraseCache, BooleanSupplier continueCheck, WorldGenSettings generatorOptions) {
-        LOGGER.info("Forcing world upgrade!");
-        WorldUpgrader worldUpgrader = new WorldUpgrader(session, dataFixer, generatorOptions, eraseCache);
-        Component component = null;
+        Main.LOGGER.info("Forcing world upgrade! {}", session.getLevelId()); // CraftBukkit
+        WorldUpgrader worldupgrader = new WorldUpgrader(session, dataFixer, generatorOptions, eraseCache);
+        Component ichatbasecomponent = null;
 
-        while(!worldUpgrader.isFinished()) {
-            Component component2 = worldUpgrader.getStatus();
-            if (component != component2) {
-                component = component2;
-                LOGGER.info(worldUpgrader.getStatus().getString());
+        while (!worldupgrader.isFinished()) {
+            Component ichatbasecomponent1 = worldupgrader.getStatus();
+
+            if (ichatbasecomponent != ichatbasecomponent1) {
+                ichatbasecomponent = ichatbasecomponent1;
+                Main.LOGGER.info(worldupgrader.getStatus().getString());
             }
 
-            int i = worldUpgrader.getTotalChunks();
+            int i = worldupgrader.getTotalChunks();
+
             if (i > 0) {
-                int j = worldUpgrader.getConverted() + worldUpgrader.getSkipped();
-                LOGGER.info("{}% completed ({} / {} chunks)...", Mth.floor((float)j / (float)i * 100.0F), j, i);
+                int j = worldupgrader.getConverted() + worldupgrader.getSkipped();
+
+                Main.LOGGER.info("{}% completed ({} / {} chunks)...", Mth.floor((float) j / (float) i * 100.0F), j, i);
             }
 
             if (!continueCheck.getAsBoolean()) {
-                worldUpgrader.cancel();
+                worldupgrader.cancel();
             } else {
                 try {
                     Thread.sleep(1000L);
-                } catch (InterruptedException var10) {
+                } catch (InterruptedException interruptedexception) {
+                    ;
                 }
             }
         }
