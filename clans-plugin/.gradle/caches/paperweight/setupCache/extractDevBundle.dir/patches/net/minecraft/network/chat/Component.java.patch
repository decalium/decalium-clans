--- a/net/minecraft/network/chat/Component.java
+++ b/net/minecraft/network/chat/Component.java
@@ -1,6 +1,7 @@
 package net.minecraft.network.chat;
 
 import com.google.common.collect.Lists;
+import io.papermc.paper.adventure.AdventureComponent; // Paper
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
 import com.google.gson.JsonArray;
@@ -18,17 +19,34 @@
 import java.io.StringReader;
 import java.lang.reflect.Field;
 import java.lang.reflect.Type;
+import java.util.Iterator;
 import java.util.List;
-import java.util.Optional;
 import java.util.Map.Entry;
+import java.util.Optional;
 import javax.annotation.Nullable;
 import net.minecraft.Util;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.util.FormattedCharSequence;
 import net.minecraft.util.GsonHelper;
 import net.minecraft.util.LowerCaseEnumTypeAdapterFactory;
+// CraftBukkit start
+import com.google.common.collect.Streams;
+import java.util.stream.Stream;
+// CraftBukkit end
+
+public interface Component extends Message, FormattedText, Iterable<Component> { // CraftBukkit
+
+    // CraftBukkit start
+    default Stream<Component> stream() {
+        return Streams.concat(new Stream[]{Stream.of(this), this.getSiblings().stream().flatMap(Component::stream)});
+    }
+
+    @Override
+    default Iterator<Component> iterator() {
+        return this.stream().iterator();
+    }
+    // CraftBukkit end
 
-public interface Component extends Message, FormattedText {
     Style getStyle();
 
     String getContents();
@@ -39,17 +57,19 @@
     }
 
     default String getString(int length) {
-        StringBuilder stringBuilder = new StringBuilder();
-        this.visit((string) -> {
-            int j = length - stringBuilder.length();
+        StringBuilder stringbuilder = new StringBuilder();
+
+        this.visit((s) -> {
+            int j = length - stringbuilder.length();
+
             if (j <= 0) {
-                return STOP_ITERATION;
+                return Component.STOP_ITERATION;
             } else {
-                stringBuilder.append(string.length() <= j ? string : string.substring(0, j));
+                stringbuilder.append(s.length() <= j ? s : s.substring(0, j));
                 return Optional.empty();
             }
         });
-        return stringBuilder.toString();
+        return stringbuilder.toString();
     }
 
     List<Component> getSiblings();
@@ -62,36 +82,52 @@
 
     @Override
     default <T> Optional<T> visit(FormattedText.StyledContentConsumer<T> styledVisitor, Style style) {
-        Style style2 = this.getStyle().applyTo(style);
-        Optional<T> optional = this.visitSelf(styledVisitor, style2);
+        Style chatmodifier1 = this.getStyle().applyTo(style);
+        Optional<T> optional = this.visitSelf(styledVisitor, chatmodifier1);
+
         if (optional.isPresent()) {
             return optional;
         } else {
-            for(Component component : this.getSiblings()) {
-                Optional<T> optional2 = component.visit(styledVisitor, style2);
-                if (optional2.isPresent()) {
-                    return optional2;
+            Iterator iterator = this.getSiblings().iterator();
+
+            Optional optional1;
+
+            do {
+                if (!iterator.hasNext()) {
+                    return Optional.empty();
                 }
-            }
 
-            return Optional.empty();
+                Component ichatbasecomponent = (Component) iterator.next();
+
+                optional1 = ichatbasecomponent.visit(styledVisitor, chatmodifier1);
+            } while (!optional1.isPresent());
+
+            return optional1;
         }
     }
 
     @Override
     default <T> Optional<T> visit(FormattedText.ContentConsumer<T> visitor) {
         Optional<T> optional = this.visitSelf(visitor);
+
         if (optional.isPresent()) {
             return optional;
         } else {
-            for(Component component : this.getSiblings()) {
-                Optional<T> optional2 = component.visit(visitor);
-                if (optional2.isPresent()) {
-                    return optional2;
+            Iterator iterator = this.getSiblings().iterator();
+
+            Optional optional1;
+
+            do {
+                if (!iterator.hasNext()) {
+                    return Optional.empty();
                 }
-            }
 
-            return Optional.empty();
+                Component ichatbasecomponent = (Component) iterator.next();
+
+                optional1 = ichatbasecomponent.visit(visitor);
+            } while (!optional1.isPresent());
+
+            return optional1;
         }
     }
 
@@ -105,9 +141,10 @@
 
     default List<Component> toFlatList(Style style) {
         List<Component> list = Lists.newArrayList();
-        this.visit((styleOverride, text) -> {
-            if (!text.isEmpty()) {
-                list.add((new TextComponent(text)).withStyle(styleOverride));
+
+        this.visit((chatmodifier1, s) -> {
+            if (!s.isEmpty()) {
+                list.add((new TextComponent(s)).withStyle(chatmodifier1));
             }
 
             return Optional.empty();
@@ -116,132 +153,151 @@
     }
 
     static Component nullToEmpty(@Nullable String string) {
-        return (Component)(string != null ? new TextComponent(string) : TextComponent.EMPTY);
+        return (Component) (string != null ? new TextComponent(string) : TextComponent.EMPTY);
     }
 
     public static class Serializer implements JsonDeserializer<MutableComponent>, JsonSerializer<Component> {
-        private static final Gson GSON = Util.make(() -> {
-            GsonBuilder gsonBuilder = new GsonBuilder();
-            gsonBuilder.disableHtmlEscaping();
-            gsonBuilder.registerTypeHierarchyAdapter(Component.class, new Component.Serializer());
-            gsonBuilder.registerTypeHierarchyAdapter(Style.class, new Style.Serializer());
-            gsonBuilder.registerTypeAdapterFactory(new LowerCaseEnumTypeAdapterFactory());
-            return gsonBuilder.create();
+
+        private static final Gson GSON = (Gson) Util.make(() -> {
+            GsonBuilder gsonbuilder = new GsonBuilder();
+
+            gsonbuilder.disableHtmlEscaping();
+            gsonbuilder.registerTypeAdapter(AdventureComponent.class, new AdventureComponent.Serializer()); // Paper
+            gsonbuilder.registerTypeHierarchyAdapter(Component.class, new Component.Serializer());
+            gsonbuilder.registerTypeHierarchyAdapter(Style.class, new Style.Serializer());
+            gsonbuilder.registerTypeAdapterFactory(new LowerCaseEnumTypeAdapterFactory());
+            return gsonbuilder.create();
         });
-        private static final Field JSON_READER_POS = Util.make(() -> {
+        private static final Field JSON_READER_POS = (Field) Util.make(() -> {
             try {
                 new JsonReader(new StringReader(""));
                 Field field = JsonReader.class.getDeclaredField("pos");
+
                 field.setAccessible(true);
                 return field;
-            } catch (NoSuchFieldException var1) {
-                throw new IllegalStateException("Couldn't get field 'pos' for JsonReader", var1);
+            } catch (NoSuchFieldException nosuchfieldexception) {
+                throw new IllegalStateException("Couldn't get field 'pos' for JsonReader", nosuchfieldexception);
             }
         });
-        private static final Field JSON_READER_LINESTART = Util.make(() -> {
+        private static final Field JSON_READER_LINESTART = (Field) Util.make(() -> {
             try {
                 new JsonReader(new StringReader(""));
                 Field field = JsonReader.class.getDeclaredField("lineStart");
+
                 field.setAccessible(true);
                 return field;
-            } catch (NoSuchFieldException var1) {
-                throw new IllegalStateException("Couldn't get field 'lineStart' for JsonReader", var1);
+            } catch (NoSuchFieldException nosuchfieldexception) {
+                throw new IllegalStateException("Couldn't get field 'lineStart' for JsonReader", nosuchfieldexception);
             }
         });
 
-        @Override
-        public MutableComponent deserialize(JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {
-            if (jsonElement.isJsonPrimitive()) {
-                return new TextComponent(jsonElement.getAsString());
-            } else if (!jsonElement.isJsonObject()) {
-                if (jsonElement.isJsonArray()) {
-                    JsonArray jsonArray3 = jsonElement.getAsJsonArray();
-                    MutableComponent mutableComponent13 = null;
+        public Serializer() {}
 
-                    for(JsonElement jsonElement2 : jsonArray3) {
-                        MutableComponent mutableComponent14 = this.deserialize(jsonElement2, jsonElement2.getClass(), jsonDeserializationContext);
-                        if (mutableComponent13 == null) {
-                            mutableComponent13 = mutableComponent14;
+        public MutableComponent deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException {
+            if (jsonelement.isJsonPrimitive()) {
+                return new TextComponent(jsonelement.getAsString());
+            } else if (!jsonelement.isJsonObject()) {
+                if (jsonelement.isJsonArray()) {
+                    JsonArray jsonarray = jsonelement.getAsJsonArray();
+                    MutableComponent ichatmutablecomponent = null;
+                    Iterator iterator = jsonarray.iterator();
+
+                    while (iterator.hasNext()) {
+                        JsonElement jsonelement1 = (JsonElement) iterator.next();
+                        MutableComponent ichatmutablecomponent1 = this.deserialize(jsonelement1, jsonelement1.getClass(), jsondeserializationcontext);
+
+                        if (ichatmutablecomponent == null) {
+                            ichatmutablecomponent = ichatmutablecomponent1;
                         } else {
-                            mutableComponent13.append(mutableComponent14);
+                            ichatmutablecomponent.append((Component) ichatmutablecomponent1);
                         }
                     }
 
-                    return mutableComponent13;
+                    return ichatmutablecomponent;
                 } else {
-                    throw new JsonParseException("Don't know how to turn " + jsonElement + " into a Component");
+                    throw new JsonParseException("Don't know how to turn " + jsonelement + " into a Component");
                 }
             } else {
-                JsonObject jsonObject = jsonElement.getAsJsonObject();
-                MutableComponent mutableComponent;
-                if (jsonObject.has("text")) {
-                    mutableComponent = new TextComponent(GsonHelper.getAsString(jsonObject, "text"));
-                } else if (jsonObject.has("translate")) {
-                    String string = GsonHelper.getAsString(jsonObject, "translate");
-                    if (jsonObject.has("with")) {
-                        JsonArray jsonArray = GsonHelper.getAsJsonArray(jsonObject, "with");
-                        Object[] objects = new Object[jsonArray.size()];
+                JsonObject jsonobject = jsonelement.getAsJsonObject();
+                Object object;
 
-                        for(int i = 0; i < objects.length; ++i) {
-                            objects[i] = this.deserialize(jsonArray.get(i), type, jsonDeserializationContext);
-                            if (objects[i] instanceof TextComponent) {
-                                TextComponent textComponent = (TextComponent)objects[i];
-                                if (textComponent.getStyle().isEmpty() && textComponent.getSiblings().isEmpty()) {
-                                    objects[i] = textComponent.getText();
+                if (jsonobject.has("text")) {
+                    object = new TextComponent(GsonHelper.getAsString(jsonobject, "text"));
+                } else {
+                    String s;
+
+                    if (jsonobject.has("translate")) {
+                        s = GsonHelper.getAsString(jsonobject, "translate");
+                        if (jsonobject.has("with")) {
+                            JsonArray jsonarray1 = GsonHelper.getAsJsonArray(jsonobject, "with");
+                            Object[] aobject = new Object[jsonarray1.size()];
+
+                            for (int i = 0; i < aobject.length; ++i) {
+                                aobject[i] = this.deserialize(jsonarray1.get(i), type, jsondeserializationcontext);
+                                if (aobject[i] instanceof TextComponent) {
+                                    TextComponent chatcomponenttext = (TextComponent) aobject[i];
+
+                                    if (chatcomponenttext.getStyle().isEmpty() && chatcomponenttext.getSiblings().isEmpty()) {
+                                        aobject[i] = chatcomponenttext.getText();
+                                    }
                                 }
                             }
+
+                            object = new TranslatableComponent(s, aobject);
+                        } else {
+                            object = new TranslatableComponent(s);
                         }
+                    } else if (jsonobject.has("score")) {
+                        JsonObject jsonobject1 = GsonHelper.getAsJsonObject(jsonobject, "score");
 
-                        mutableComponent = new TranslatableComponent(string, objects);
-                    } else {
-                        mutableComponent = new TranslatableComponent(string);
-                    }
-                } else if (jsonObject.has("score")) {
-                    JsonObject jsonObject2 = GsonHelper.getAsJsonObject(jsonObject, "score");
-                    if (!jsonObject2.has("name") || !jsonObject2.has("objective")) {
-                        throw new JsonParseException("A score component needs a least a name and an objective");
-                    }
+                        if (!jsonobject1.has("name") || !jsonobject1.has("objective")) {
+                            throw new JsonParseException("A score component needs a least a name and an objective");
+                        }
 
-                    mutableComponent = new ScoreComponent(GsonHelper.getAsString(jsonObject2, "name"), GsonHelper.getAsString(jsonObject2, "objective"));
-                } else if (jsonObject.has("selector")) {
-                    Optional<Component> optional = this.parseSeparator(type, jsonDeserializationContext, jsonObject);
-                    mutableComponent = new SelectorComponent(GsonHelper.getAsString(jsonObject, "selector"), optional);
-                } else if (jsonObject.has("keybind")) {
-                    mutableComponent = new KeybindComponent(GsonHelper.getAsString(jsonObject, "keybind"));
-                } else {
-                    if (!jsonObject.has("nbt")) {
-                        throw new JsonParseException("Don't know how to turn " + jsonElement + " into a Component");
-                    }
+                        object = new ScoreComponent(GsonHelper.getAsString(jsonobject1, "name"), GsonHelper.getAsString(jsonobject1, "objective"));
+                    } else if (jsonobject.has("selector")) {
+                        Optional<Component> optional = this.parseSeparator(type, jsondeserializationcontext, jsonobject);
 
-                    String string2 = GsonHelper.getAsString(jsonObject, "nbt");
-                    Optional<Component> optional2 = this.parseSeparator(type, jsonDeserializationContext, jsonObject);
-                    boolean bl = GsonHelper.getAsBoolean(jsonObject, "interpret", false);
-                    if (jsonObject.has("block")) {
-                        mutableComponent = new NbtComponent.BlockNbtComponent(string2, bl, GsonHelper.getAsString(jsonObject, "block"), optional2);
-                    } else if (jsonObject.has("entity")) {
-                        mutableComponent = new NbtComponent.EntityNbtComponent(string2, bl, GsonHelper.getAsString(jsonObject, "entity"), optional2);
+                        object = new SelectorComponent(GsonHelper.getAsString(jsonobject, "selector"), optional);
+                    } else if (jsonobject.has("keybind")) {
+                        object = new KeybindComponent(GsonHelper.getAsString(jsonobject, "keybind"));
                     } else {
-                        if (!jsonObject.has("storage")) {
-                            throw new JsonParseException("Don't know how to turn " + jsonElement + " into a Component");
+                        if (!jsonobject.has("nbt")) {
+                            throw new JsonParseException("Don't know how to turn " + jsonelement + " into a Component");
                         }
 
-                        mutableComponent = new NbtComponent.StorageNbtComponent(string2, bl, new ResourceLocation(GsonHelper.getAsString(jsonObject, "storage")), optional2);
+                        s = GsonHelper.getAsString(jsonobject, "nbt");
+                        Optional<Component> optional1 = this.parseSeparator(type, jsondeserializationcontext, jsonobject);
+                        boolean flag = GsonHelper.getAsBoolean(jsonobject, "interpret", false);
+
+                        if (jsonobject.has("block")) {
+                            object = new NbtComponent.BlockNbtComponent(s, flag, GsonHelper.getAsString(jsonobject, "block"), optional1);
+                        } else if (jsonobject.has("entity")) {
+                            object = new NbtComponent.EntityNbtComponent(s, flag, GsonHelper.getAsString(jsonobject, "entity"), optional1);
+                        } else {
+                            if (!jsonobject.has("storage")) {
+                                throw new JsonParseException("Don't know how to turn " + jsonelement + " into a Component");
+                            }
+
+                            object = new NbtComponent.StorageNbtComponent(s, flag, new ResourceLocation(GsonHelper.getAsString(jsonobject, "storage")), optional1);
+                        }
                     }
                 }
 
-                if (jsonObject.has("extra")) {
-                    JsonArray jsonArray2 = GsonHelper.getAsJsonArray(jsonObject, "extra");
-                    if (jsonArray2.size() <= 0) {
+                if (jsonobject.has("extra")) {
+                    JsonArray jsonarray2 = GsonHelper.getAsJsonArray(jsonobject, "extra");
+
+                    if (jsonarray2.size() <= 0) {
                         throw new JsonParseException("Unexpected empty array of components");
                     }
 
-                    for(int j = 0; j < jsonArray2.size(); ++j) {
-                        mutableComponent.append(this.deserialize(jsonArray2.get(j), type, jsonDeserializationContext));
+                    for (int j = 0; j < jsonarray2.size(); ++j) {
+                        ((MutableComponent) object).append((Component) this.deserialize(jsonarray2.get(j), type, jsondeserializationcontext));
                     }
                 }
 
-                mutableComponent.setStyle(jsonDeserializationContext.deserialize(jsonElement, Style.class));
-                return mutableComponent;
+                ((MutableComponent) object).setStyle((Style) jsondeserializationcontext.deserialize(jsonelement, Style.class));
+                return (MutableComponent) object;
             }
         }
 
@@ -250,139 +306,161 @@
         }
 
         private void serializeStyle(Style style, JsonObject json, JsonSerializationContext context) {
-            JsonElement jsonElement = context.serialize(style);
-            if (jsonElement.isJsonObject()) {
-                JsonObject jsonObject = (JsonObject)jsonElement;
+            JsonElement jsonelement = context.serialize(style);
 
-                for(Entry<String, JsonElement> entry : jsonObject.entrySet()) {
-                    json.add(entry.getKey(), entry.getValue());
+            if (jsonelement.isJsonObject()) {
+                JsonObject jsonobject1 = (JsonObject) jsonelement;
+                Iterator iterator = jsonobject1.entrySet().iterator();
+
+                while (iterator.hasNext()) {
+                    Entry<String, JsonElement> entry = (Entry) iterator.next();
+
+                    json.add((String) entry.getKey(), (JsonElement) entry.getValue());
                 }
             }
 
         }
 
-        @Override
-        public JsonElement serialize(Component component, Type type, JsonSerializationContext jsonSerializationContext) {
-            JsonObject jsonObject = new JsonObject();
-            if (!component.getStyle().isEmpty()) {
-                this.serializeStyle(component.getStyle(), jsonObject, jsonSerializationContext);
+        public JsonElement serialize(Component ichatbasecomponent, Type type, JsonSerializationContext jsonserializationcontext) {
+            if (ichatbasecomponent instanceof AdventureComponent) return jsonserializationcontext.serialize(ichatbasecomponent); // Paper
+            JsonObject jsonobject = new JsonObject();
+
+            if (!ichatbasecomponent.getStyle().isEmpty()) {
+                this.serializeStyle(ichatbasecomponent.getStyle(), jsonobject, jsonserializationcontext);
             }
 
-            if (!component.getSiblings().isEmpty()) {
-                JsonArray jsonArray = new JsonArray();
+            if (!ichatbasecomponent.getSiblings().isEmpty()) {
+                JsonArray jsonarray = new JsonArray();
+                Iterator iterator = ichatbasecomponent.getSiblings().iterator();
 
-                for(Component component2 : component.getSiblings()) {
-                    jsonArray.add(this.serialize(component2, component2.getClass(), jsonSerializationContext));
+                while (iterator.hasNext()) {
+                    Component ichatbasecomponent1 = (Component) iterator.next();
+
+                    jsonarray.add(this.serialize(ichatbasecomponent1, ichatbasecomponent1.getClass(), jsonserializationcontext));
                 }
 
-                jsonObject.add("extra", jsonArray);
+                jsonobject.add("extra", jsonarray);
             }
 
-            if (component instanceof TextComponent) {
-                jsonObject.addProperty("text", ((TextComponent)component).getText());
-            } else if (component instanceof TranslatableComponent) {
-                TranslatableComponent translatableComponent = (TranslatableComponent)component;
-                jsonObject.addProperty("translate", translatableComponent.getKey());
-                if (translatableComponent.getArgs() != null && translatableComponent.getArgs().length > 0) {
-                    JsonArray jsonArray2 = new JsonArray();
+            if (ichatbasecomponent instanceof TextComponent) {
+                jsonobject.addProperty("text", ((TextComponent) ichatbasecomponent).getText());
+            } else if (ichatbasecomponent instanceof TranslatableComponent) {
+                TranslatableComponent chatmessage = (TranslatableComponent) ichatbasecomponent;
+
+                jsonobject.addProperty("translate", chatmessage.getKey());
+                if (chatmessage.getArgs() != null && chatmessage.getArgs().length > 0) {
+                    JsonArray jsonarray1 = new JsonArray();
+                    Object[] aobject = chatmessage.getArgs();
+                    int i = aobject.length;
+
+                    for (int j = 0; j < i; ++j) {
+                        Object object = aobject[j];
 
-                    for(Object object : translatableComponent.getArgs()) {
                         if (object instanceof Component) {
-                            jsonArray2.add(this.serialize((Component)object, object.getClass(), jsonSerializationContext));
+                            jsonarray1.add(this.serialize((Component) object, object.getClass(), jsonserializationcontext));
                         } else {
-                            jsonArray2.add(new JsonPrimitive(String.valueOf(object)));
+                            jsonarray1.add(new JsonPrimitive(String.valueOf(object)));
                         }
                     }
 
-                    jsonObject.add("with", jsonArray2);
+                    jsonobject.add("with", jsonarray1);
                 }
-            } else if (component instanceof ScoreComponent) {
-                ScoreComponent scoreComponent = (ScoreComponent)component;
-                JsonObject jsonObject2 = new JsonObject();
-                jsonObject2.addProperty("name", scoreComponent.getName());
-                jsonObject2.addProperty("objective", scoreComponent.getObjective());
-                jsonObject.add("score", jsonObject2);
-            } else if (component instanceof SelectorComponent) {
-                SelectorComponent selectorComponent = (SelectorComponent)component;
-                jsonObject.addProperty("selector", selectorComponent.getPattern());
-                this.serializeSeparator(jsonSerializationContext, jsonObject, selectorComponent.getSeparator());
-            } else if (component instanceof KeybindComponent) {
-                KeybindComponent keybindComponent = (KeybindComponent)component;
-                jsonObject.addProperty("keybind", keybindComponent.getName());
+            } else if (ichatbasecomponent instanceof ScoreComponent) {
+                ScoreComponent chatcomponentscore = (ScoreComponent) ichatbasecomponent;
+                JsonObject jsonobject1 = new JsonObject();
+
+                jsonobject1.addProperty("name", chatcomponentscore.getName());
+                jsonobject1.addProperty("objective", chatcomponentscore.getObjective());
+                jsonobject.add("score", jsonobject1);
+            } else if (ichatbasecomponent instanceof SelectorComponent) {
+                SelectorComponent chatcomponentselector = (SelectorComponent) ichatbasecomponent;
+
+                jsonobject.addProperty("selector", chatcomponentselector.getPattern());
+                this.serializeSeparator(jsonserializationcontext, jsonobject, chatcomponentselector.getSeparator());
+            } else if (ichatbasecomponent instanceof KeybindComponent) {
+                KeybindComponent chatcomponentkeybind = (KeybindComponent) ichatbasecomponent;
+
+                jsonobject.addProperty("keybind", chatcomponentkeybind.getName());
             } else {
-                if (!(component instanceof NbtComponent)) {
-                    throw new IllegalArgumentException("Don't know how to serialize " + component + " as a Component");
+                if (!(ichatbasecomponent instanceof NbtComponent)) {
+                    throw new IllegalArgumentException("Don't know how to serialize " + ichatbasecomponent + " as a Component");
                 }
 
-                NbtComponent nbtComponent = (NbtComponent)component;
-                jsonObject.addProperty("nbt", nbtComponent.getNbtPath());
-                jsonObject.addProperty("interpret", nbtComponent.isInterpreting());
-                this.serializeSeparator(jsonSerializationContext, jsonObject, nbtComponent.separator);
-                if (component instanceof NbtComponent.BlockNbtComponent) {
-                    NbtComponent.BlockNbtComponent blockNbtComponent = (NbtComponent.BlockNbtComponent)component;
-                    jsonObject.addProperty("block", blockNbtComponent.getPos());
-                } else if (component instanceof NbtComponent.EntityNbtComponent) {
-                    NbtComponent.EntityNbtComponent entityNbtComponent = (NbtComponent.EntityNbtComponent)component;
-                    jsonObject.addProperty("entity", entityNbtComponent.getSelector());
+                NbtComponent chatcomponentnbt = (NbtComponent) ichatbasecomponent;
+
+                jsonobject.addProperty("nbt", chatcomponentnbt.getNbtPath());
+                jsonobject.addProperty("interpret", chatcomponentnbt.isInterpreting());
+                this.serializeSeparator(jsonserializationcontext, jsonobject, chatcomponentnbt.separator);
+                if (ichatbasecomponent instanceof NbtComponent.BlockNbtComponent) {
+                    NbtComponent.BlockNbtComponent chatcomponentnbt_a = (NbtComponent.BlockNbtComponent) ichatbasecomponent;
+
+                    jsonobject.addProperty("block", chatcomponentnbt_a.getPos());
+                } else if (ichatbasecomponent instanceof NbtComponent.EntityNbtComponent) {
+                    NbtComponent.EntityNbtComponent chatcomponentnbt_b = (NbtComponent.EntityNbtComponent) ichatbasecomponent;
+
+                    jsonobject.addProperty("entity", chatcomponentnbt_b.getSelector());
                 } else {
-                    if (!(component instanceof NbtComponent.StorageNbtComponent)) {
-                        throw new IllegalArgumentException("Don't know how to serialize " + component + " as a Component");
+                    if (!(ichatbasecomponent instanceof NbtComponent.StorageNbtComponent)) {
+                        throw new IllegalArgumentException("Don't know how to serialize " + ichatbasecomponent + " as a Component");
                     }
 
-                    NbtComponent.StorageNbtComponent storageNbtComponent = (NbtComponent.StorageNbtComponent)component;
-                    jsonObject.addProperty("storage", storageNbtComponent.getId().toString());
+                    NbtComponent.StorageNbtComponent chatcomponentnbt_c = (NbtComponent.StorageNbtComponent) ichatbasecomponent;
+
+                    jsonobject.addProperty("storage", chatcomponentnbt_c.getId().toString());
                 }
             }
 
-            return jsonObject;
+            return jsonobject;
         }
 
         private void serializeSeparator(JsonSerializationContext context, JsonObject json, Optional<Component> separator) {
-            separator.ifPresent((separatorx) -> {
-                json.add("separator", this.serialize(separatorx, separatorx.getClass(), context));
+            separator.ifPresent((ichatbasecomponent) -> {
+                json.add("separator", this.serialize(ichatbasecomponent, ichatbasecomponent.getClass(), context));
             });
         }
 
         public static String toJson(Component text) {
-            return GSON.toJson(text);
+            return Component.Serializer.GSON.toJson(text);
         }
 
         public static JsonElement toJsonTree(Component text) {
-            return GSON.toJsonTree(text);
+            return Component.Serializer.GSON.toJsonTree(text);
         }
 
         @Nullable
         public static MutableComponent fromJson(String json) {
-            return GsonHelper.fromJson(GSON, json, MutableComponent.class, false);
+            return (MutableComponent) GsonHelper.fromJson(Component.Serializer.GSON, json, MutableComponent.class, false);
         }
 
         @Nullable
         public static MutableComponent fromJson(JsonElement json) {
-            return GSON.fromJson(json, MutableComponent.class);
+            return (MutableComponent) Component.Serializer.GSON.fromJson(json, MutableComponent.class);
         }
 
         @Nullable
         public static MutableComponent fromJsonLenient(String json) {
-            return GsonHelper.fromJson(GSON, json, MutableComponent.class, true);
+            return (MutableComponent) GsonHelper.fromJson(Component.Serializer.GSON, json, MutableComponent.class, true);
         }
 
         public static MutableComponent fromJson(com.mojang.brigadier.StringReader reader) {
             try {
-                JsonReader jsonReader = new JsonReader(new StringReader(reader.getRemaining()));
-                jsonReader.setLenient(false);
-                MutableComponent mutableComponent = GSON.getAdapter(MutableComponent.class).read(jsonReader);
-                reader.setCursor(reader.getCursor() + getPos(jsonReader));
-                return mutableComponent;
-            } catch (StackOverflowError | IOException var3) {
-                throw new JsonParseException(var3);
+                JsonReader jsonreader = new JsonReader(new StringReader(reader.getRemaining()));
+
+                jsonreader.setLenient(false);
+                MutableComponent ichatmutablecomponent = (MutableComponent) Component.Serializer.GSON.getAdapter(MutableComponent.class).read(jsonreader);
+
+                reader.setCursor(reader.getCursor() + Serializer.getPos(jsonreader));
+                return ichatmutablecomponent;
+            } catch (StackOverflowError | IOException ioexception) {
+                throw new JsonParseException(ioexception);
             }
         }
 
         private static int getPos(JsonReader reader) {
             try {
-                return JSON_READER_POS.getInt(reader) - JSON_READER_LINESTART.getInt(reader) + 1;
-            } catch (IllegalAccessException var2) {
-                throw new IllegalStateException("Couldn't read position of JsonReader", var2);
+                return Component.Serializer.JSON_READER_POS.getInt(reader) - Component.Serializer.JSON_READER_LINESTART.getInt(reader) + 1;
+            } catch (IllegalAccessException illegalaccessexception) {
+                throw new IllegalStateException("Couldn't read position of JsonReader", illegalaccessexception);
             }
         }
     }
