--- a/net/minecraft/world/entity/monster/Ravager.java
+++ b/net/minecraft/world/entity/monster/Ravager.java
@@ -1,5 +1,7 @@
 package net.minecraft.world.entity.monster;
 
+import java.util.Iterator;
+import java.util.List;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
@@ -45,6 +47,7 @@
 import net.minecraft.world.phys.Vec3;
 
 public class Ravager extends Raider {
+
     private static final Predicate<Entity> NO_RAVAGER_AND_ALIVE = (entity) -> {
         return entity.isAlive() && !(entity instanceof Ravager);
     };
@@ -74,22 +77,23 @@
         this.goalSelector.addGoal(5, new WaterAvoidingRandomStrollGoal(this, 0.4D));
         this.goalSelector.addGoal(6, new LookAtPlayerGoal(this, Player.class, 6.0F));
         this.goalSelector.addGoal(10, new LookAtPlayerGoal(this, Mob.class, 8.0F));
-        this.targetSelector.addGoal(2, (new HurtByTargetGoal(this, Raider.class)).setAlertOthers());
+        this.targetSelector.addGoal(2, (new HurtByTargetGoal(this, new Class[]{Raider.class})).setAlertOthers());
         this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, Player.class, true));
-        this.targetSelector.addGoal(4, new NearestAttackableTargetGoal<>(this, AbstractVillager.class, true, (entity) -> {
-            return !entity.isBaby();
+        this.targetSelector.addGoal(4, new NearestAttackableTargetGoal<>(this, AbstractVillager.class, true, (entityliving) -> {
+            return !entityliving.isBaby();
         }));
         this.targetSelector.addGoal(4, new NearestAttackableTargetGoal<>(this, IronGolem.class, true));
     }
 
     @Override
     protected void updateControlFlags() {
-        boolean bl = !(this.getControllingPassenger() instanceof Mob) || this.getControllingPassenger().getType().is(EntityTypeTags.RAIDERS);
-        boolean bl2 = !(this.getVehicle() instanceof Boat);
-        this.goalSelector.setControlFlag(Goal.Flag.MOVE, bl);
-        this.goalSelector.setControlFlag(Goal.Flag.JUMP, bl && bl2);
-        this.goalSelector.setControlFlag(Goal.Flag.LOOK, bl);
-        this.goalSelector.setControlFlag(Goal.Flag.TARGET, bl);
+        boolean flag = !(this.getControllingPassenger() instanceof Mob) || this.getControllingPassenger().getType().is(EntityTypeTags.RAIDERS);
+        boolean flag1 = !(this.getVehicle() instanceof Boat);
+
+        this.goalSelector.setControlFlag(Goal.Flag.MOVE, flag);
+        this.goalSelector.setControlFlag(Goal.Flag.JUMP, flag && flag1);
+        this.goalSelector.setControlFlag(Goal.Flag.LOOK, flag);
+        this.goalSelector.setControlFlag(Goal.Flag.TARGET, flag);
     }
 
     public static AttributeSupplier.Builder createAttributes() {
@@ -150,24 +154,28 @@
             if (this.isImmobile()) {
                 this.getAttribute(Attributes.MOVEMENT_SPEED).setBaseValue(0.0D);
             } else {
-                double d = this.getTarget() != null ? 0.35D : 0.3D;
-                double e = this.getAttribute(Attributes.MOVEMENT_SPEED).getBaseValue();
-                this.getAttribute(Attributes.MOVEMENT_SPEED).setBaseValue(Mth.lerp(0.1D, e, d));
+                double d0 = this.getTarget() != null ? 0.35D : 0.3D;
+                double d1 = this.getAttribute(Attributes.MOVEMENT_SPEED).getBaseValue();
+
+                this.getAttribute(Attributes.MOVEMENT_SPEED).setBaseValue(Mth.lerp(0.1D, d1, d0));
             }
 
             if (this.horizontalCollision && this.level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
-                boolean bl = false;
-                AABB aABB = this.getBoundingBox().inflate(0.2D);
+                boolean flag = false;
+                AABB axisalignedbb = this.getBoundingBox().inflate(0.2D);
+                Iterator iterator = BlockPos.betweenClosed(Mth.floor(axisalignedbb.minX), Mth.floor(axisalignedbb.minY), Mth.floor(axisalignedbb.minZ), Mth.floor(axisalignedbb.maxX), Mth.floor(axisalignedbb.maxY), Mth.floor(axisalignedbb.maxZ)).iterator();
 
-                for(BlockPos blockPos : BlockPos.betweenClosed(Mth.floor(aABB.minX), Mth.floor(aABB.minY), Mth.floor(aABB.minZ), Mth.floor(aABB.maxX), Mth.floor(aABB.maxY), Mth.floor(aABB.maxZ))) {
-                    BlockState blockState = this.level.getBlockState(blockPos);
-                    Block block = blockState.getBlock();
-                    if (block instanceof LeavesBlock) {
-                        bl = this.level.destroyBlock(blockPos, true, this) || bl;
+                while (iterator.hasNext()) {
+                    BlockPos blockposition = (BlockPos) iterator.next();
+                    BlockState iblockdata = this.level.getBlockState(blockposition);
+                    Block block = iblockdata.getBlock();
+
+                    if (block instanceof LeavesBlock && !org.bukkit.craftbukkit.v1_18_R1.event.CraftEventFactory.callEntityChangeBlockEvent(this, blockposition, net.minecraft.world.level.block.Blocks.AIR.defaultBlockState()).isCancelled()) { // CraftBukkit
+                        flag = this.level.destroyBlock(blockposition, true, this) || flag;
                     }
                 }
 
-                if (!bl && this.onGround) {
+                if (!flag && this.onGround) {
                     this.jumpFromGround();
                 }
             }
@@ -197,10 +205,11 @@
 
     private void stunEffect() {
         if (this.random.nextInt(6) == 0) {
-            double d = this.getX() - (double)this.getBbWidth() * Math.sin((double)(this.yBodyRot * ((float)Math.PI / 180F))) + (this.random.nextDouble() * 0.6D - 0.3D);
-            double e = this.getY() + (double)this.getBbHeight() - 0.3D;
-            double f = this.getZ() + (double)this.getBbWidth() * Math.cos((double)(this.yBodyRot * ((float)Math.PI / 180F))) + (this.random.nextDouble() * 0.6D - 0.3D);
-            this.level.addParticle(ParticleTypes.ENTITY_EFFECT, d, e, f, 0.4980392156862745D, 0.5137254901960784D, 0.5725490196078431D);
+            double d0 = this.getX() - (double) this.getBbWidth() * Math.sin((double) (this.yBodyRot * 0.017453292F)) + (this.random.nextDouble() * 0.6D - 0.3D);
+            double d1 = this.getY() + (double) this.getBbHeight() - 0.3D;
+            double d2 = this.getZ() + (double) this.getBbWidth() * Math.cos((double) (this.yBodyRot * 0.017453292F)) + (this.random.nextDouble() * 0.6D - 0.3D);
+
+            this.level.addParticle(ParticleTypes.ENTITY_EFFECT, d0, d1, d2, 0.4980392156862745D, 0.5137254901960784D, 0.5725490196078431D);
         }
 
     }
@@ -221,7 +230,7 @@
             if (this.random.nextDouble() < 0.5D) {
                 this.stunnedTick = 40;
                 this.playSound(SoundEvents.RAVAGER_STUNNED, 1.0F, 1.0F);
-                this.level.broadcastEntityEvent(this, (byte)39);
+                this.level.broadcastEntityEvent(this, (byte) 39);
                 target.push(this);
             } else {
                 this.strongKnockback(target);
@@ -234,21 +243,25 @@
 
     private void roar() {
         if (this.isAlive()) {
-            for(LivingEntity livingEntity : this.level.getEntitiesOfClass(LivingEntity.class, this.getBoundingBox().inflate(4.0D), NO_RAVAGER_AND_ALIVE)) {
-                if (!(livingEntity instanceof AbstractIllager)) {
-                    livingEntity.hurt(DamageSource.mobAttack(this), 6.0F);
-                }
+            List<? extends LivingEntity> list = this.level.getEntitiesOfClass(LivingEntity.class, this.getBoundingBox().inflate(4.0D), Ravager.NO_RAVAGER_AND_ALIVE);
 
-                this.strongKnockback(livingEntity);
+            LivingEntity entityliving;
+
+            for (Iterator iterator = list.iterator(); iterator.hasNext(); this.strongKnockback(entityliving)) {
+                entityliving = (LivingEntity) iterator.next();
+                if (!(entityliving instanceof AbstractIllager)) {
+                    entityliving.hurt(DamageSource.mobAttack(this), 6.0F);
+                }
             }
 
-            Vec3 vec3 = this.getBoundingBox().getCenter();
+            Vec3 vec3d = this.getBoundingBox().getCenter();
 
-            for(int i = 0; i < 40; ++i) {
-                double d = this.random.nextGaussian() * 0.2D;
-                double e = this.random.nextGaussian() * 0.2D;
-                double f = this.random.nextGaussian() * 0.2D;
-                this.level.addParticle(ParticleTypes.POOF, vec3.x, vec3.y, vec3.z, d, e, f);
+            for (int i = 0; i < 40; ++i) {
+                double d0 = this.random.nextGaussian() * 0.2D;
+                double d1 = this.random.nextGaussian() * 0.2D;
+                double d2 = this.random.nextGaussian() * 0.2D;
+
+                this.level.addParticle(ParticleTypes.POOF, vec3d.x, vec3d.y, vec3d.z, d0, d1, d2);
             }
 
             this.level.gameEvent(this, GameEvent.RAVAGER_ROAR, this.eyeBlockPosition());
@@ -257,10 +270,11 @@
     }
 
     private void strongKnockback(Entity entity) {
-        double d = entity.getX() - this.getX();
-        double e = entity.getZ() - this.getZ();
-        double f = Math.max(d * d + e * e, 0.001D);
-        entity.push(d / f * 4.0D, 0.2D, e / f * 4.0D);
+        double d0 = entity.getX() - this.getX();
+        double d1 = entity.getZ() - this.getZ();
+        double d2 = Math.max(d0 * d0 + d1 * d1, 0.001D);
+
+        entity.push(d0 / d2 * 4.0D, 0.2D, d1 / d2 * 4.0D);
     }
 
     @Override
@@ -290,7 +304,7 @@
     @Override
     public boolean doHurtTarget(Entity target) {
         this.attackTick = 10;
-        this.level.broadcastEntityEvent(this, (byte)4);
+        this.level.broadcastEntityEvent(this, (byte) 4);
         this.playSound(SoundEvents.RAVAGER_ATTACK, 1.0F, 1.0F);
         return super.doHurtTarget(target);
     }
@@ -322,15 +336,15 @@
     }
 
     @Override
-    public void applyRaidBuffs(int wave, boolean unused) {
-    }
+    public void applyRaidBuffs(int wave, boolean unused) {}
 
     @Override
     public boolean canBeLeader() {
         return false;
     }
 
-    class RavagerMeleeAttackGoal extends MeleeAttackGoal {
+    private class RavagerMeleeAttackGoal extends MeleeAttackGoal {
+
         public RavagerMeleeAttackGoal() {
             super(Ravager.this, 1.0D, true);
         }
@@ -338,11 +352,13 @@
         @Override
         protected double getAttackReachSqr(LivingEntity entity) {
             float f = Ravager.this.getBbWidth() - 0.1F;
-            return (double)(f * 2.0F * f * 2.0F + entity.getBbWidth());
+
+            return (double) (f * 2.0F * f * 2.0F + entity.getBbWidth());
         }
     }
 
-    static class RavagerNavigation extends GroundPathNavigation {
+    private static class RavagerNavigation extends GroundPathNavigation {
+
         public RavagerNavigation(Mob mob, Level world) {
             super(mob, world);
         }
@@ -354,7 +370,10 @@
         }
     }
 
-    static class RavagerNodeEvaluator extends WalkNodeEvaluator {
+    private static class RavagerNodeEvaluator extends WalkNodeEvaluator {
+
+        RavagerNodeEvaluator() {}
+
         @Override
         protected BlockPathTypes evaluateBlockPathType(BlockGetter world, boolean canOpenDoors, boolean canEnterOpenDoors, BlockPos pos, BlockPathTypes type) {
             return type == BlockPathTypes.LEAVES ? BlockPathTypes.OPEN : super.evaluateBlockPathType(world, canOpenDoors, canEnterOpenDoors, pos, type);
