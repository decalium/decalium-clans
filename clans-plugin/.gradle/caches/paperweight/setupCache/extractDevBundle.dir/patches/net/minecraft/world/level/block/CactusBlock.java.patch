--- a/net/minecraft/world/level/block/CactusBlock.java
+++ b/net/minecraft/world/level/block/CactusBlock.java
@@ -1,10 +1,12 @@
 package net.minecraft.world.level.block;
 
+import java.util.Iterator;
 import java.util.Random;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.tags.FluidTags;
+import net.minecraft.tags.Tag;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.BlockGetter;
@@ -20,8 +22,10 @@
 import net.minecraft.world.level.pathfinder.PathComputationType;
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import org.bukkit.craftbukkit.v1_18_R1.event.CraftEventFactory; // CraftBukkit
 
 public class CactusBlock extends Block {
+
     public static final IntegerProperty AGE = BlockStateProperties.AGE_15;
     public static final int MAX_AGE = 15;
     protected static final int AABB_OFFSET = 1;
@@ -30,7 +34,7 @@
 
     protected CactusBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState(this.stateDefinition.any().setValue(AGE, Integer.valueOf(0)));
+        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(CactusBlock.AGE, 0));
     }
 
     @Override
@@ -43,21 +47,26 @@
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, Random random) {
-        BlockPos blockPos = pos.above();
-        if (world.isEmptyBlock(blockPos)) {
+        BlockPos blockposition1 = pos.above();
+
+        if (world.isEmptyBlock(blockposition1)) {
             int i;
-            for(i = 1; world.getBlockState(pos.below(i)).is(this); ++i) {
+
+            for (i = 1; world.getBlockState(pos.below(i)).is((Block) this); ++i) {
+                ;
             }
 
-            if (i < 3) {
-                int j = state.getValue(AGE);
-                if (j == 15) {
-                    world.setBlockAndUpdate(blockPos, this.defaultBlockState());
-                    BlockState blockState = state.setValue(AGE, Integer.valueOf(0));
-                    world.setBlock(pos, blockState, 4);
-                    blockState.neighborChanged(world, blockPos, this, pos, false);
+            if (i < world.paperConfig.cactusMaxHeight) { // Paper - Configurable growth height
+                int j = (Integer) state.getValue(CactusBlock.AGE);
+
+                if (j >= (byte) range(3, ((100.0F / world.spigotConfig.cactusModifier) * 15) + 0.5F, 15)) { // Spigot
+                    CraftEventFactory.handleBlockGrowEvent(world, blockposition1, this.defaultBlockState()); // CraftBukkit
+                    BlockState iblockdata1 = (BlockState) state.setValue(CactusBlock.AGE, 0);
+
+                    world.setBlock(pos, iblockdata1, 4);
+                    iblockdata1.neighborChanged(world, blockposition1, this, pos, false);
                 } else {
-                    world.setBlock(pos, state.setValue(AGE, Integer.valueOf(j + 1)), 4);
+                    world.setBlock(pos, (BlockState) state.setValue(CactusBlock.AGE, j + 1), 4);
                 }
 
             }
@@ -66,18 +75,18 @@
 
     @Override
     public VoxelShape getCollisionShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return COLLISION_SHAPE;
+        return CactusBlock.COLLISION_SHAPE;
     }
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return OUTLINE_SHAPE;
+        return CactusBlock.OUTLINE_SHAPE;
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
         if (!state.canSurvive(world, pos)) {
-            world.scheduleTick(pos, this, 1);
+            world.scheduleTick(pos, (Block) this, 1);
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
@@ -85,26 +94,38 @@
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
-        for(Direction direction : Direction.Plane.HORIZONTAL) {
-            BlockState blockState = world.getBlockState(pos.relative(direction));
-            Material material = blockState.getMaterial();
-            if (material.isSolid() || world.getFluidState(pos.relative(direction)).is(FluidTags.LAVA)) {
-                return false;
+        Iterator iterator = Direction.Plane.HORIZONTAL.iterator();
+
+        Direction enumdirection;
+        Material material;
+
+        do {
+            if (!iterator.hasNext()) {
+                BlockState iblockdata1 = world.getBlockState(pos.below());
+
+                return (iblockdata1.is(Blocks.CACTUS) || iblockdata1.is(Blocks.SAND) || iblockdata1.is(Blocks.RED_SAND)) && !world.getBlockState(pos.above()).getMaterial().isLiquid();
             }
-        }
 
-        BlockState blockState2 = world.getBlockState(pos.below());
-        return (blockState2.is(Blocks.CACTUS) || blockState2.is(Blocks.SAND) || blockState2.is(Blocks.RED_SAND)) && !world.getBlockState(pos.above()).getMaterial().isLiquid();
+            enumdirection = (Direction) iterator.next();
+            BlockState iblockdata2 = world.getBlockState(pos.relative(enumdirection));
+
+            material = iblockdata2.getMaterial();
+        } while (!material.isSolid() && !world.getFluidState(pos.relative(enumdirection)).is((Tag) FluidTags.LAVA));
+
+        return false;
     }
 
     @Override
     public void entityInside(BlockState state, Level world, BlockPos pos, Entity entity) {
+        if (!new io.papermc.paper.event.entity.EntityInsideBlockEvent(entity.getBukkitEntity(), org.bukkit.craftbukkit.v1_18_R1.block.CraftBlock.at(world, pos)).callEvent()) { return; } // Paper
+        CraftEventFactory.blockDamage = world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()); // CraftBukkit
         entity.hurt(DamageSource.CACTUS, 1.0F);
+        CraftEventFactory.blockDamage = null; // CraftBukkit
     }
 
     @Override
     protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
-        builder.add(AGE);
+        builder.add(CactusBlock.AGE);
     }
 
     @Override
