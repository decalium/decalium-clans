--- a/net/minecraft/world/level/biome/MobSpawnSettings.java
+++ b/net/minecraft/world/level/biome/MobSpawnSettings.java
@@ -60,11 +60,43 @@
     }
 
     public static class Builder {
-        private final Map<MobCategory, List<MobSpawnSettings.SpawnerData>> spawners = Stream.of(MobCategory.values()).collect(ImmutableMap.toImmutableMap((mobCategory) -> {
+        // Paper start - keep track of data in a pair set to give O(1) contains calls - we have to hook removals incase plugins mess with it
+        public static class MobList extends java.util.ArrayList<MobSpawnSettings.SpawnerData> {
+            java.util.Set<MobSpawnSettings.SpawnerData> biomes = new java.util.HashSet<>();
+
+            @Override
+            public boolean contains(Object o) {
+                return biomes.contains(o);
+            }
+
+            @Override
+            public boolean add(MobSpawnSettings.SpawnerData BiomeSettingsMobs) {
+                biomes.add(BiomeSettingsMobs);
+                return super.add(BiomeSettingsMobs);
+            }
+
+            @Override
+            public MobSpawnSettings.SpawnerData remove(int index) {
+                MobSpawnSettings.SpawnerData removed = super.remove(index);
+                if (removed != null) {
+                    biomes.remove(removed);
+                }
+                return removed;
+            }
+
+            @Override
+            public void clear() {
+                biomes.clear();
+                super.clear();
+            }
+        }
+        // use toImmutableEnumMap collector
+        private final Map<MobCategory, List<MobSpawnSettings.SpawnerData>> spawners = (Map) Stream.of(MobCategory.values()).collect(Maps.toImmutableEnumMap((mobCategory) -> {
             return mobCategory;
         }, (mobCategory) -> {
-            return Lists.newArrayList();
+            return new MobList(); // Use MobList instead of ArrayList
         }));
+        // Paper end
         private final Map<EntityType<?>, MobSpawnSettings.MobSpawnCost> mobSpawnCosts = Maps.newLinkedHashMap();
         private float creatureGenerationProbability = 0.1F;
 
