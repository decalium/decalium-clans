--- a/net/minecraft/world/level/block/entity/TheEndGatewayBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/TheEndGatewayBlockEntity.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level.block.entity;
 
+import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
 import javax.annotation.Nullable;
@@ -10,6 +11,7 @@
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtUtils;
 import net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket;
+import net.minecraft.server.MCUtil;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.util.Mth;
@@ -23,14 +25,21 @@
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.LevelChunk;
+import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.levelgen.feature.Feature;
 import net.minecraft.world.level.levelgen.feature.configurations.EndGatewayConfiguration;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.v1_18_R1.entity.CraftPlayer;
+import org.bukkit.event.player.PlayerTeleportEvent;
+// CraftBukkit end
 
 public class TheEndGatewayBlockEntity extends TheEndPortalBlockEntity {
+
     private static final Logger LOGGER = LogManager.getLogger();
     private static final int SPAWN_TIME = 200;
     private static final int COOLDOWN_TIME = 40;
@@ -66,9 +75,10 @@
         super.load(nbt);
         this.age = nbt.getLong("Age");
         if (nbt.contains("ExitPortal", 10)) {
-            BlockPos blockPos = NbtUtils.readBlockPos(nbt.getCompound("ExitPortal"));
-            if (Level.isInSpawnableBounds(blockPos)) {
-                this.exitPortal = blockPos;
+            BlockPos blockposition = NbtUtils.readBlockPos(nbt.getCompound("ExitPortal"));
+
+            if (Level.isInSpawnableBounds(blockposition)) {
+                this.exitPortal = blockposition;
             }
         }
 
@@ -84,23 +94,32 @@
     }
 
     public static void teleportTick(Level world, BlockPos pos, BlockState state, TheEndGatewayBlockEntity blockEntity) {
-        boolean bl = blockEntity.isSpawning();
-        boolean bl2 = blockEntity.isCoolingDown();
+        boolean flag = blockEntity.isSpawning();
+        boolean flag1 = blockEntity.isCoolingDown();
+
         ++blockEntity.age;
-        if (bl2) {
+        if (flag1) {
             --blockEntity.teleportCooldown;
         } else {
             List<Entity> list = world.getEntitiesOfClass(Entity.class, new AABB(pos), TheEndGatewayBlockEntity::canEntityTeleport);
+
             if (!list.isEmpty()) {
-                teleportEntity(world, pos, state, list.get(world.random.nextInt(list.size())), blockEntity);
+                // Paper start
+                for (Entity entity : list) {
+                    if (entity.canChangeDimensions()) {
+                        TheEndGatewayBlockEntity.teleportEntity(world, pos, state, entity, blockEntity);
+                        break;
+                    }
+                }
+                // Paper end
             }
 
             if (blockEntity.age % 2400L == 0L) {
-                triggerCooldown(world, pos, state, blockEntity);
+                TheEndGatewayBlockEntity.triggerCooldown(world, pos, state, blockEntity);
             }
         }
 
-        if (bl != blockEntity.isSpawning() || bl2 != blockEntity.isCoolingDown()) {
+        if (flag != blockEntity.isSpawning() || flag1 != blockEntity.isCoolingDown()) {
             setChanged(world, pos, state);
         }
 
@@ -119,11 +138,11 @@
     }
 
     public float getSpawnPercent(float tickDelta) {
-        return Mth.clamp(((float)this.age + tickDelta) / 200.0F, 0.0F, 1.0F);
+        return Mth.clamp(((float) this.age + tickDelta) / 200.0F, 0.0F, 1.0F);
     }
 
     public float getCooldownPercent(float tickDelta) {
-        return 1.0F - Mth.clamp(((float)this.teleportCooldown - tickDelta) / 40.0F, 0.0F, 1.0F);
+        return 1.0F - Mth.clamp(((float) this.teleportCooldown - tickDelta) / 40.0F, 0.0F, 1.0F);
     }
 
     @Override
@@ -157,96 +176,139 @@
 
     public static void teleportEntity(Level world, BlockPos pos, BlockState state, Entity entity, TheEndGatewayBlockEntity blockEntity) {
         if (world instanceof ServerLevel && !blockEntity.isCoolingDown()) {
-            ServerLevel serverLevel = (ServerLevel)world;
+            ServerLevel worldserver = (ServerLevel) world;
+
             blockEntity.teleportCooldown = 100;
-            if (blockEntity.exitPortal == null && world.dimension() == Level.END) {
-                BlockPos blockPos = findOrCreateValidTeleportPos(serverLevel, pos);
-                blockPos = blockPos.above(10);
-                LOGGER.debug("Creating portal at {}", (Object)blockPos);
-                spawnGatewayPortal(serverLevel, blockPos, EndGatewayConfiguration.knownExit(pos, false));
-                blockEntity.exitPortal = blockPos;
+            BlockPos blockposition1;
+
+            if (blockEntity.exitPortal == null && world.getTypeKey() == LevelStem.END) { // CraftBukkit - work in alternate worlds
+                blockposition1 = TheEndGatewayBlockEntity.findOrCreateValidTeleportPos(worldserver, pos);
+                blockposition1 = blockposition1.above(10);
+                TheEndGatewayBlockEntity.LOGGER.debug("Creating portal at {}", blockposition1);
+                TheEndGatewayBlockEntity.spawnGatewayPortal(worldserver, blockposition1, EndGatewayConfiguration.knownExit(pos, false));
+                blockEntity.exitPortal = blockposition1;
             }
 
             if (blockEntity.exitPortal != null) {
-                BlockPos blockPos2 = blockEntity.exactTeleport ? blockEntity.exitPortal : findExitPosition(world, blockEntity.exitPortal);
-                Entity entity3;
+                blockposition1 = blockEntity.exactTeleport ? blockEntity.exitPortal : TheEndGatewayBlockEntity.findExitPosition(world, blockEntity.exitPortal);
+                Entity entity1;
+
                 if (entity instanceof ThrownEnderpearl) {
-                    Entity entity2 = ((ThrownEnderpearl)entity).getOwner();
+                    Entity entity2 = ((ThrownEnderpearl) entity).getOwner();
+
                     if (entity2 instanceof ServerPlayer) {
-                        CriteriaTriggers.ENTER_BLOCK.trigger((ServerPlayer)entity2, state);
+                        CriteriaTriggers.ENTER_BLOCK.trigger((ServerPlayer) entity2, state);
                     }
 
                     if (entity2 != null) {
-                        entity3 = entity2;
+                        entity1 = entity2;
                         entity.discard();
                     } else {
-                        entity3 = entity;
+                        entity1 = entity;
                     }
                 } else {
-                    entity3 = entity.getRootVehicle();
+                    entity1 = entity.getRootVehicle();
                 }
 
-                entity3.setPortalCooldown();
-                entity3.teleportToWithTicket((double)blockPos2.getX() + 0.5D, (double)blockPos2.getY(), (double)blockPos2.getZ() + 0.5D);
+                // CraftBukkit start - Fire PlayerTeleportEvent
+                if (entity1 instanceof ServerPlayer) {
+                    org.bukkit.craftbukkit.v1_18_R1.entity.CraftPlayer player = (CraftPlayer) entity1.getBukkitEntity();
+                    org.bukkit.Location location = new Location(world.getWorld(), (double) blockposition1.getX() + 0.5D, (double) blockposition1.getY() + 0.5D, (double) blockposition1.getZ() + 0.5D);
+                    location.setPitch(player.getLocation().getPitch());
+                    location.setYaw(player.getLocation().getYaw());
+
+                    PlayerTeleportEvent teleEvent = new com.destroystokyo.paper.event.player.PlayerTeleportEndGatewayEvent(player, player.getLocation(), location, new org.bukkit.craftbukkit.v1_18_R1.block.CraftEndGateway(worldserver.getWorld(), blockEntity)); // Paper
+                    Bukkit.getPluginManager().callEvent(teleEvent);
+                    if (teleEvent.isCancelled()) {
+                        return;
+                    }
+
+                    entity1.setPortalCooldown();
+                    ((ServerPlayer) entity1).connection.teleport(teleEvent.getTo());
+                    TheEndGatewayBlockEntity.triggerCooldown(world, pos, state, blockEntity); // CraftBukkit - call at end of method
+                    return;
+
+                }
+                // CraftBukkit end
+                // Paper start - EntityTeleportEndGatewayEvent - replicated from above
+                org.bukkit.craftbukkit.v1_18_R1.entity.CraftEntity bukkitEntity = entity.getBukkitEntity();
+                org.bukkit.Location location = new Location(world.getWorld(), (double) blockposition1.getX() + 0.5D, (double) blockposition1.getY() + 0.5D, (double) blockposition1.getZ() + 0.5D);
+                location.setPitch(bukkitEntity.getLocation().getPitch());
+                location.setYaw(bukkitEntity.getLocation().getYaw());
+
+                com.destroystokyo.paper.event.entity.EntityTeleportEndGatewayEvent event = new com.destroystokyo.paper.event.entity.EntityTeleportEndGatewayEvent(bukkitEntity, bukkitEntity.getLocation(), location, new org.bukkit.craftbukkit.v1_18_R1.block.CraftEndGateway(world.getWorld(), blockEntity));
+                if (!event.callEvent()) {
+                    return;
+                }
+                // Paper end
+
+                entity1.setPortalCooldown();
+                entity1.teleportToWithTicket(event.getTo().getX(), event.getTo().getY(), event.getTo().getZ()); // Paper
             }
 
-            triggerCooldown(world, pos, state, blockEntity);
+            TheEndGatewayBlockEntity.triggerCooldown(world, pos, state, blockEntity);
         }
     }
 
     private static BlockPos findExitPosition(Level world, BlockPos pos) {
-        BlockPos blockPos = findTallestBlock(world, pos.offset(0, 2, 0), 5, false);
-        LOGGER.debug("Best exit position for portal at {} is {}", pos, blockPos);
-        return blockPos.above();
+        BlockPos blockposition1 = TheEndGatewayBlockEntity.findTallestBlock(world, pos.offset(0, 2, 0), 5, false);
+
+        TheEndGatewayBlockEntity.LOGGER.debug("Best exit position for portal at {} is {}", pos, blockposition1);
+        return blockposition1.above();
     }
 
     private static BlockPos findOrCreateValidTeleportPos(ServerLevel world, BlockPos pos) {
-        Vec3 vec3 = findExitPortalXZPosTentative(world, pos);
-        LevelChunk levelChunk = getChunk(world, vec3);
-        BlockPos blockPos = findValidSpawnInChunk(levelChunk);
-        if (blockPos == null) {
-            blockPos = new BlockPos(vec3.x + 0.5D, 75.0D, vec3.z + 0.5D);
-            LOGGER.debug("Failed to find a suitable block to teleport to, spawning an island on {}", (Object)blockPos);
-            EndFeatures.END_ISLAND.place(world, world.getChunkSource().getGenerator(), new Random(blockPos.asLong()), blockPos);
+        Vec3 vec3d = TheEndGatewayBlockEntity.findExitPortalXZPosTentative(world, pos);
+        LevelChunk chunk = TheEndGatewayBlockEntity.getChunk(world, vec3d);
+        BlockPos blockposition1 = TheEndGatewayBlockEntity.findValidSpawnInChunk(chunk);
+
+        if (blockposition1 == null) {
+            blockposition1 = new BlockPos(vec3d.x + 0.5D, 75.0D, vec3d.z + 0.5D);
+            TheEndGatewayBlockEntity.LOGGER.debug("Failed to find a suitable block to teleport to, spawning an island on {}", blockposition1);
+            EndFeatures.END_ISLAND.place(world, world.getChunkSource().getGenerator(), new Random(blockposition1.asLong()), blockposition1);
         } else {
-            LOGGER.debug("Found suitable block to teleport to: {}", (Object)blockPos);
+            TheEndGatewayBlockEntity.LOGGER.debug("Found suitable block to teleport to: {}", blockposition1);
         }
 
-        return findTallestBlock(world, blockPos, 16, true);
+        blockposition1 = TheEndGatewayBlockEntity.findTallestBlock(world, blockposition1, 16, true);
+        return blockposition1;
     }
 
     private static Vec3 findExitPortalXZPosTentative(ServerLevel world, BlockPos pos) {
-        Vec3 vec3 = (new Vec3((double)pos.getX(), 0.0D, (double)pos.getZ())).normalize();
-        int i = 1024;
-        Vec3 vec32 = vec3.scale(1024.0D);
+        Vec3 vec3d = (new Vec3((double) pos.getX(), 0.0D, (double) pos.getZ())).normalize();
+        boolean flag = true;
+        Vec3 vec3d1 = vec3d.scale(1024.0D);
 
-        for(int j = 16; !isChunkEmpty(world, vec32) && j-- > 0; vec32 = vec32.add(vec3.scale(-16.0D))) {
-            LOGGER.debug("Skipping backwards past nonempty chunk at {}", (Object)vec32);
+        int i;
+
+        for (i = 16; !TheEndGatewayBlockEntity.isChunkEmpty(world, vec3d1) && i-- > 0; vec3d1 = vec3d1.add(vec3d.scale(-16.0D))) {
+            TheEndGatewayBlockEntity.LOGGER.debug("Skipping backwards past nonempty chunk at {}", vec3d1);
         }
 
-        for(int var6 = 16; isChunkEmpty(world, vec32) && var6-- > 0; vec32 = vec32.add(vec3.scale(16.0D))) {
-            LOGGER.debug("Skipping forward past empty chunk at {}", (Object)vec32);
+        for (i = 16; TheEndGatewayBlockEntity.isChunkEmpty(world, vec3d1) && i-- > 0; vec3d1 = vec3d1.add(vec3d.scale(16.0D))) {
+            TheEndGatewayBlockEntity.LOGGER.debug("Skipping forward past empty chunk at {}", vec3d1);
         }
 
-        LOGGER.debug("Found chunk at {}", (Object)vec32);
-        return vec32;
+        TheEndGatewayBlockEntity.LOGGER.debug("Found chunk at {}", vec3d1);
+        return vec3d1;
     }
 
     private static boolean isChunkEmpty(ServerLevel world, Vec3 pos) {
-        return getChunk(world, pos).getHighestSectionPosition() <= world.getMinBuildHeight();
+        return TheEndGatewayBlockEntity.getChunk(world, pos).getHighestSectionPosition() <= world.getMinBuildHeight();
     }
 
     private static BlockPos findTallestBlock(BlockGetter world, BlockPos pos, int searchRadius, boolean force) {
-        BlockPos blockPos = null;
+        BlockPos blockposition1 = null;
 
-        for(int i = -searchRadius; i <= searchRadius; ++i) {
-            for(int j = -searchRadius; j <= searchRadius; ++j) {
-                if (i != 0 || j != 0 || force) {
-                    for(int k = world.getMaxBuildHeight() - 1; k > (blockPos == null ? world.getMinBuildHeight() : blockPos.getY()); --k) {
-                        BlockPos blockPos2 = new BlockPos(pos.getX() + i, k, pos.getZ() + j);
-                        BlockState blockState = world.getBlockState(blockPos2);
-                        if (blockState.isCollisionShapeFullBlock(world, blockPos2) && (force || !blockState.is(Blocks.BEDROCK))) {
-                            blockPos = blockPos2;
+        for (int j = -searchRadius; j <= searchRadius; ++j) {
+            for (int k = -searchRadius; k <= searchRadius; ++k) {
+                if (j != 0 || k != 0 || force) {
+                    for (int l = world.getMaxBuildHeight() - 1; l > (blockposition1 == null ? world.getMinBuildHeight() : blockposition1.getY()); --l) {
+                        BlockPos blockposition2 = new BlockPos(pos.getX() + j, l, pos.getZ() + k);
+                        BlockState iblockdata = world.getBlockState(blockposition2);
+
+                        if (iblockdata.isCollisionShapeFullBlock(world, blockposition2) && (force || !iblockdata.is(Blocks.BEDROCK))) {
+                            blockposition1 = blockposition2;
                             break;
                         }
                     }
@@ -254,7 +316,7 @@
             }
         }
 
-        return blockPos == null ? pos : blockPos;
+        return blockposition1 == null ? pos : blockposition1;
     }
 
     private static LevelChunk getChunk(Level world, Vec3 pos) {
@@ -263,27 +325,31 @@
 
     @Nullable
     private static BlockPos findValidSpawnInChunk(LevelChunk chunk) {
-        ChunkPos chunkPos = chunk.getPos();
-        BlockPos blockPos = new BlockPos(chunkPos.getMinBlockX(), 30, chunkPos.getMinBlockZ());
+        ChunkPos chunkcoordintpair = chunk.getPos();
+        BlockPos blockposition = new BlockPos(chunkcoordintpair.getMinBlockX(), 30, chunkcoordintpair.getMinBlockZ());
         int i = chunk.getHighestSectionPosition() + 16 - 1;
-        BlockPos blockPos2 = new BlockPos(chunkPos.getMaxBlockX(), i, chunkPos.getMaxBlockZ());
-        BlockPos blockPos3 = null;
-        double d = 0.0D;
+        BlockPos blockposition1 = new BlockPos(chunkcoordintpair.getMaxBlockX(), i, chunkcoordintpair.getMaxBlockZ());
+        BlockPos blockposition2 = null;
+        double d0 = 0.0D;
+        Iterator iterator = BlockPos.betweenClosed(blockposition, blockposition1).iterator();
 
-        for(BlockPos blockPos4 : BlockPos.betweenClosed(blockPos, blockPos2)) {
-            BlockState blockState = chunk.getBlockState(blockPos4);
-            BlockPos blockPos5 = blockPos4.above();
-            BlockPos blockPos6 = blockPos4.above(2);
-            if (blockState.is(Blocks.END_STONE) && !chunk.getBlockState(blockPos5).isCollisionShapeFullBlock(chunk, blockPos5) && !chunk.getBlockState(blockPos6).isCollisionShapeFullBlock(chunk, blockPos6)) {
-                double e = blockPos4.distSqr(0.0D, 0.0D, 0.0D, true);
-                if (blockPos3 == null || e < d) {
-                    blockPos3 = blockPos4;
-                    d = e;
+        while (iterator.hasNext()) {
+            BlockPos blockposition3 = (BlockPos) iterator.next();
+            BlockState iblockdata = chunk.getBlockState(blockposition3);
+            BlockPos blockposition4 = blockposition3.above();
+            BlockPos blockposition5 = blockposition3.above(2);
+
+            if (iblockdata.is(Blocks.END_STONE) && !chunk.getBlockState(blockposition4).isCollisionShapeFullBlock(chunk, blockposition4) && !chunk.getBlockState(blockposition5).isCollisionShapeFullBlock(chunk, blockposition5)) {
+                double d1 = blockposition3.distSqr(0.0D, 0.0D, 0.0D, true);
+
+                if (blockposition2 == null || d1 < d0) {
+                    blockposition2 = blockposition3;
+                    d0 = d1;
                 }
             }
         }
 
-        return blockPos3;
+        return blockposition2;
     }
 
     private static void spawnGatewayPortal(ServerLevel world, BlockPos pos, EndGatewayConfiguration config) {
@@ -297,9 +363,13 @@
 
     public int getParticleAmount() {
         int i = 0;
+        Direction[] aenumdirection = Direction.values();
+        int j = aenumdirection.length;
 
-        for(Direction direction : Direction.values()) {
-            i += this.shouldRenderFace(direction) ? 1 : 0;
+        for (int k = 0; k < j; ++k) {
+            Direction enumdirection = aenumdirection[k];
+
+            i += this.shouldRenderFace(enumdirection) ? 1 : 0;
         }
 
         return i;
