--- a/net/minecraft/world/entity/animal/AbstractFish.java
+++ b/net/minecraft/world/entity/animal/AbstractFish.java
@@ -1,5 +1,7 @@
 package net.minecraft.world.entity.animal;
 
+import java.util.Objects;
+import java.util.function.Predicate;
 import net.minecraft.core.BlockPos;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.syncher.EntityDataAccessor;
@@ -21,6 +23,7 @@
 import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.ai.control.MoveControl;
 import net.minecraft.world.entity.ai.goal.AvoidEntityGoal;
+import net.minecraft.world.entity.ai.goal.GoalSelector;
 import net.minecraft.world.entity.ai.goal.PanicGoal;
 import net.minecraft.world.entity.ai.goal.RandomSwimmingGoal;
 import net.minecraft.world.entity.ai.navigation.PathNavigation;
@@ -32,6 +35,7 @@
 import net.minecraft.world.phys.Vec3;
 
 public abstract class AbstractFish extends WaterAnimal implements Bucketable {
+
     private static final EntityDataAccessor<Boolean> FROM_BUCKET = SynchedEntityData.defineId(AbstractFish.class, EntityDataSerializers.BOOLEAN);
 
     public AbstractFish(EntityType<? extends AbstractFish> type, Level world) {
@@ -55,7 +59,7 @@
 
     @Override
     public boolean removeWhenFarAway(double distanceSquared) {
-        return !this.fromBucket() && !this.hasCustomName();
+        return true; // CraftBukkit
     }
 
     @Override
@@ -66,17 +70,18 @@
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(FROM_BUCKET, false);
+        this.entityData.define(AbstractFish.FROM_BUCKET, false);
     }
 
     @Override
     public boolean fromBucket() {
-        return this.entityData.get(FROM_BUCKET);
+        return (Boolean) this.entityData.get(AbstractFish.FROM_BUCKET);
     }
 
     @Override
     public void setFromBucket(boolean fromBucket) {
-        this.entityData.set(FROM_BUCKET, fromBucket);
+        this.entityData.set(AbstractFish.FROM_BUCKET, fromBucket);
+        this.setPersistenceRequired(fromBucket || this.isPersistenceRequired()); // CraftBukkit - SPIGOT-4106 update persistence // Paper - actually set as persistent
     }
 
     @Override
@@ -95,7 +100,11 @@
     protected void registerGoals() {
         super.registerGoals();
         this.goalSelector.addGoal(0, new PanicGoal(this, 1.25D));
-        this.goalSelector.addGoal(2, new AvoidEntityGoal<>(this, Player.class, 8.0F, 1.6D, 1.4D, EntitySelector.NO_SPECTATORS::test));
+        GoalSelector pathfindergoalselector = this.goalSelector;
+        Predicate predicate = EntitySelector.NO_SPECTATORS;
+
+        Objects.requireNonNull(predicate);
+        pathfindergoalselector.addGoal(2, new AvoidEntityGoal<>(this, Player.class, 8.0F, 1.6D, 1.4D, predicate::test));
         this.goalSelector.addGoal(4, new AbstractFish.FishSwimGoal(this));
     }
 
@@ -122,7 +131,7 @@
     @Override
     public void aiStep() {
         if (!this.isInWater() && this.onGround && this.verticalCollision) {
-            this.setDeltaMovement(this.getDeltaMovement().add((double)((this.random.nextFloat() * 2.0F - 1.0F) * 0.05F), (double)0.4F, (double)((this.random.nextFloat() * 2.0F - 1.0F) * 0.05F)));
+            this.setDeltaMovement(this.getDeltaMovement().add((double) ((this.random.nextFloat() * 2.0F - 1.0F) * 0.05F), 0.4000000059604645D, (double) ((this.random.nextFloat() * 2.0F - 1.0F) * 0.05F)));
             this.onGround = false;
             this.hasImpulse = true;
             this.playSound(this.getFlopSound(), this.getSoundVolume(), this.getVoicePitch());
@@ -133,7 +142,7 @@
 
     @Override
     protected InteractionResult mobInteract(Player player, InteractionHand hand) {
-        return Bucketable.bucketMobPickup(player, hand, this).orElse(super.mobInteract(player, hand));
+        return (InteractionResult) Bucketable.bucketMobPickup(player, hand, this).orElse(super.mobInteract(player, hand));
     }
 
     @Override
@@ -163,10 +172,10 @@
     }
 
     @Override
-    protected void playStepSound(BlockPos pos, BlockState state) {
-    }
+    protected void playStepSound(BlockPos pos, BlockState state) {}
+
+    private static class FishMoveControl extends MoveControl {
 
-    static class FishMoveControl extends MoveControl {
         private final AbstractFish fish;
 
         FishMoveControl(AbstractFish owner) {
@@ -181,19 +190,23 @@
             }
 
             if (this.operation == MoveControl.Operation.MOVE_TO && !this.fish.getNavigation().isDone()) {
-                float f = (float)(this.speedModifier * this.fish.getAttributeValue(Attributes.MOVEMENT_SPEED));
+                float f = (float) (this.speedModifier * this.fish.getAttributeValue(Attributes.MOVEMENT_SPEED));
+
                 this.fish.setSpeed(Mth.lerp(0.125F, this.fish.getSpeed(), f));
-                double d = this.wantedX - this.fish.getX();
-                double e = this.wantedY - this.fish.getY();
-                double g = this.wantedZ - this.fish.getZ();
-                if (e != 0.0D) {
-                    double h = Math.sqrt(d * d + e * e + g * g);
-                    this.fish.setDeltaMovement(this.fish.getDeltaMovement().add(0.0D, (double)this.fish.getSpeed() * (e / h) * 0.1D, 0.0D));
+                double d0 = this.wantedX - this.fish.getX();
+                double d1 = this.wantedY - this.fish.getY();
+                double d2 = this.wantedZ - this.fish.getZ();
+
+                if (d1 != 0.0D) {
+                    double d3 = Math.sqrt(d0 * d0 + d1 * d1 + d2 * d2);
+
+                    this.fish.setDeltaMovement(this.fish.getDeltaMovement().add(0.0D, (double) this.fish.getSpeed() * (d1 / d3) * 0.1D, 0.0D));
                 }
 
-                if (d != 0.0D || g != 0.0D) {
-                    float i = (float)(Mth.atan2(g, d) * (double)(180F / (float)Math.PI)) - 90.0F;
-                    this.fish.setYRot(this.rotlerp(this.fish.getYRot(), i, 90.0F));
+                if (d0 != 0.0D || d2 != 0.0D) {
+                    float f1 = (float) (Mth.atan2(d2, d0) * 57.2957763671875D) - 90.0F;
+
+                    this.fish.setYRot(this.rotlerp(this.fish.getYRot(), f1, 90.0F));
                     this.fish.yBodyRot = this.fish.getYRot();
                 }
 
@@ -203,7 +216,8 @@
         }
     }
 
-    static class FishSwimGoal extends RandomSwimmingGoal {
+    private static class FishSwimGoal extends RandomSwimmingGoal {
+
         private final AbstractFish fish;
 
         public FishSwimGoal(AbstractFish fish) {
