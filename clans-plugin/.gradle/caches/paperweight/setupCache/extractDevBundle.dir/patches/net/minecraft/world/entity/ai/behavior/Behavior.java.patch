--- a/net/minecraft/world/entity/ai/behavior/Behavior.java
+++ b/net/minecraft/world/entity/ai/behavior/Behavior.java
@@ -14,6 +14,10 @@
     private long endTimestamp;
     private final int minDuration;
     private final int maxDuration;
+    // Paper start - configurable behavior tick rate and timings
+    private final String configKey;
+    private final co.aikar.timings.Timing timing;
+    // Paper end
 
     public Behavior(Map<MemoryModuleType<?>, MemoryStatus> requiredMemoryState) {
         this(requiredMemoryState, 60);
@@ -27,6 +31,15 @@
         this.minDuration = minRunTime;
         this.maxDuration = maxRunTime;
         this.entryCondition = requiredMemoryState;
+        // Paper start - configurable behavior tick rate and timings
+        String key = io.papermc.paper.util.ObfHelper.INSTANCE.deobfClassName(this.getClass().getName());
+        int lastSeparator = key.lastIndexOf('.');
+        if (lastSeparator != -1) {
+            key = key.substring(lastSeparator + 1);
+        }
+        this.configKey = key.toLowerCase(java.util.Locale.ROOT);
+        this.timing = co.aikar.timings.MinecraftTimings.getBehaviorTimings(configKey);
+        // Paper end
     }
 
     public Behavior.Status getStatus() {
@@ -34,11 +47,19 @@
     }
 
     public final boolean tryStart(ServerLevel world, E entity, long time) {
+        // Paper start - behavior tick rate
+        int tickRate = world.paperConfig.getBehaviorTickRate(this.configKey, entity.getType().id, -1);
+        if (tickRate > -1 && time < this.endTimestamp + tickRate) {
+            return false;
+        }
+        // Paper end
         if (this.hasRequiredMemories(entity) && this.checkExtraStartConditions(world, entity)) {
             this.status = Behavior.Status.RUNNING;
             int i = this.minDuration + world.getRandom().nextInt(this.maxDuration + 1 - this.minDuration);
             this.endTimestamp = time + (long)i;
+            this.timing.startTiming(); // Paper - behavior timings
             this.start(world, entity, time);
+            this.timing.stopTiming(); // Paper - behavior timings
             return true;
         } else {
             return false;
@@ -49,11 +70,13 @@
     }
 
     public final void tickOrStop(ServerLevel world, E entity, long time) {
+        this.timing.startTiming(); // Paper - behavior timings
         if (!this.timedOut(time) && this.canStillUse(world, entity, time)) {
             this.tick(world, entity, time);
         } else {
             this.doStop(world, entity, time);
         }
+        this.timing.stopTiming(); // Paper - behavior timings
 
     }
 
