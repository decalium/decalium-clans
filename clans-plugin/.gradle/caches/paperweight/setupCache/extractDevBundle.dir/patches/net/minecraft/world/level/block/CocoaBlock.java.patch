--- a/net/minecraft/world/level/block/CocoaBlock.java
+++ b/net/minecraft/world/level/block/CocoaBlock.java
@@ -6,6 +6,7 @@
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.tags.BlockTags;
+import net.minecraft.tags.Tag;
 import net.minecraft.world.item.context.BlockPlaceContext;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.Level;
@@ -19,8 +20,10 @@
 import net.minecraft.world.level.pathfinder.PathComputationType;
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import org.bukkit.craftbukkit.v1_18_R1.event.CraftEventFactory; // CraftBukkit
 
 public class CocoaBlock extends HorizontalDirectionalBlock implements BonemealableBlock {
+
     public static final int MAX_AGE = 2;
     public static final IntegerProperty AGE = BlockStateProperties.AGE_2;
     protected static final int AGE_0_WIDTH = 4;
@@ -39,20 +42,21 @@
 
     public CocoaBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState(this.stateDefinition.any().setValue(FACING, Direction.NORTH).setValue(AGE, Integer.valueOf(0)));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(CocoaBlock.FACING, Direction.NORTH)).setValue(CocoaBlock.AGE, 0));
     }
 
     @Override
     public boolean isRandomlyTicking(BlockState state) {
-        return state.getValue(AGE) < 2;
+        return (Integer) state.getValue(CocoaBlock.AGE) < 2;
     }
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, Random random) {
-        if (world.random.nextInt(5) == 0) {
-            int i = state.getValue(AGE);
+        if (world.random.nextInt(Math.max(1, (int) (100.0F / world.spigotConfig.cocoaModifier) * 5)) == 0) { // Spigot
+            int i = (Integer) state.getValue(CocoaBlock.AGE);
+
             if (i < 2) {
-                world.setBlock(pos, state.setValue(AGE, Integer.valueOf(i + 1)), 2);
+                CraftEventFactory.handleBlockGrowEvent(world, pos, (BlockState) state.setValue(CocoaBlock.AGE, i + 1), 2); // CraftBukkkit
             }
         }
 
@@ -60,38 +64,44 @@
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
-        BlockState blockState = world.getBlockState(pos.relative(state.getValue(FACING)));
-        return blockState.is(BlockTags.JUNGLE_LOGS);
+        BlockState iblockdata1 = world.getBlockState(pos.relative((Direction) state.getValue(CocoaBlock.FACING)));
+
+        return iblockdata1.is((Tag) BlockTags.JUNGLE_LOGS);
     }
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        int i = state.getValue(AGE);
-        switch((Direction)state.getValue(FACING)) {
-        case SOUTH:
-            return SOUTH_AABB[i];
-        case NORTH:
-        default:
-            return NORTH_AABB[i];
-        case WEST:
-            return WEST_AABB[i];
-        case EAST:
-            return EAST_AABB[i];
+        int i = (Integer) state.getValue(CocoaBlock.AGE);
+
+        switch ((Direction) state.getValue(CocoaBlock.FACING)) {
+            case SOUTH:
+                return CocoaBlock.SOUTH_AABB[i];
+            case NORTH:
+            default:
+                return CocoaBlock.NORTH_AABB[i];
+            case WEST:
+                return CocoaBlock.WEST_AABB[i];
+            case EAST:
+                return CocoaBlock.EAST_AABB[i];
         }
     }
 
     @Nullable
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
-        BlockState blockState = this.defaultBlockState();
-        LevelReader levelReader = ctx.getLevel();
-        BlockPos blockPos = ctx.getClickedPos();
+        BlockState iblockdata = this.defaultBlockState();
+        Level world = ctx.getLevel();
+        BlockPos blockposition = ctx.getClickedPos();
+        Direction[] aenumdirection = ctx.getNearestLookingDirections();
+        int i = aenumdirection.length;
 
-        for(Direction direction : ctx.getNearestLookingDirections()) {
-            if (direction.getAxis().isHorizontal()) {
-                blockState = blockState.setValue(FACING, direction);
-                if (blockState.canSurvive(levelReader, blockPos)) {
-                    return blockState;
+        for (int j = 0; j < i; ++j) {
+            Direction enumdirection = aenumdirection[j];
+
+            if (enumdirection.getAxis().isHorizontal()) {
+                iblockdata = (BlockState) iblockdata.setValue(CocoaBlock.FACING, enumdirection);
+                if (iblockdata.canSurvive(world, blockposition)) {
+                    return iblockdata;
                 }
             }
         }
@@ -101,12 +111,12 @@
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        return direction == state.getValue(FACING) && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        return direction == state.getValue(CocoaBlock.FACING) && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
     }
 
     @Override
     public boolean isValidBonemealTarget(BlockGetter world, BlockPos pos, BlockState state, boolean isClient) {
-        return state.getValue(AGE) < 2;
+        return (Integer) state.getValue(CocoaBlock.AGE) < 2;
     }
 
     @Override
@@ -116,12 +126,12 @@
 
     @Override
     public void performBonemeal(ServerLevel world, Random random, BlockPos pos, BlockState state) {
-        world.setBlock(pos, state.setValue(AGE, Integer.valueOf(state.getValue(AGE) + 1)), 2);
+        CraftEventFactory.handleBlockGrowEvent(world, pos, (BlockState) state.setValue(CocoaBlock.AGE, (Integer) state.getValue(CocoaBlock.AGE) + 1), 2); // CraftBukkit
     }
 
     @Override
     protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
-        builder.add(FACING, AGE);
+        builder.add(CocoaBlock.FACING, CocoaBlock.AGE);
     }
 
     @Override
