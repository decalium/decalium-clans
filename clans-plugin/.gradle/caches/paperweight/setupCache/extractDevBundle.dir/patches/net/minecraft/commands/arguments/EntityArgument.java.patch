--- a/net/minecraft/commands/arguments/EntityArgument.java
+++ b/net/minecraft/commands/arguments/EntityArgument.java
@@ -24,6 +24,7 @@
 import net.minecraft.world.entity.Entity;
 
 public class EntityArgument implements ArgumentType<EntitySelector> {
+
     private static final Collection<String> EXAMPLES = Arrays.asList("Player", "0123", "@e", "@e[type=foo]", "dd12be42-52a9-4a91-a8a1-11c01849e498");
     public static final SimpleCommandExceptionType ERROR_NOT_SINGLE_ENTITY = new SimpleCommandExceptionType(new TranslatableComponent("argument.entity.toomany"));
     public static final SimpleCommandExceptionType ERROR_NOT_SINGLE_PLAYER = new SimpleCommandExceptionType(new TranslatableComponent("argument.player.toomany"));
@@ -46,7 +47,7 @@
     }
 
     public static Entity getEntity(CommandContext<CommandSourceStack> context, String name) throws CommandSyntaxException {
-        return context.getArgument(name, EntitySelector.class).findSingleEntity(context.getSource());
+        return ((EntitySelector) context.getArgument(name, EntitySelector.class)).findSingleEntity((CommandSourceStack) context.getSource());
     }
 
     public static EntityArgument entities() {
@@ -54,20 +55,21 @@
     }
 
     public static Collection<? extends Entity> getEntities(CommandContext<CommandSourceStack> context, String name) throws CommandSyntaxException {
-        Collection<? extends Entity> collection = getOptionalEntities(context, name);
+        Collection<? extends Entity> collection = EntityArgument.getOptionalEntities(context, name);
+
         if (collection.isEmpty()) {
-            throw NO_ENTITIES_FOUND.create();
+            throw EntityArgument.NO_ENTITIES_FOUND.create();
         } else {
             return collection;
         }
     }
 
     public static Collection<? extends Entity> getOptionalEntities(CommandContext<CommandSourceStack> context, String name) throws CommandSyntaxException {
-        return context.getArgument(name, EntitySelector.class).findEntities(context.getSource());
+        return ((EntitySelector) context.getArgument(name, EntitySelector.class)).findEntities((CommandSourceStack) context.getSource());
     }
 
     public static Collection<ServerPlayer> getOptionalPlayers(CommandContext<CommandSourceStack> context, String name) throws CommandSyntaxException {
-        return context.getArgument(name, EntitySelector.class).findPlayers(context.getSource());
+        return ((EntitySelector) context.getArgument(name, EntitySelector.class)).findPlayers((CommandSourceStack) context.getSource());
     }
 
     public static EntityArgument player() {
@@ -75,7 +77,7 @@
     }
 
     public static ServerPlayer getPlayer(CommandContext<CommandSourceStack> context, String name) throws CommandSyntaxException {
-        return context.getArgument(name, EntitySelector.class).findSinglePlayer(context.getSource());
+        return ((EntitySelector) context.getArgument(name, EntitySelector.class)).findSinglePlayer((CommandSourceStack) context.getSource());
     }
 
     public static EntityArgument players() {
@@ -83,50 +85,61 @@
     }
 
     public static Collection<ServerPlayer> getPlayers(CommandContext<CommandSourceStack> context, String name) throws CommandSyntaxException {
-        List<ServerPlayer> list = context.getArgument(name, EntitySelector.class).findPlayers(context.getSource());
+        List<ServerPlayer> list = ((EntitySelector) context.getArgument(name, EntitySelector.class)).findPlayers((CommandSourceStack) context.getSource());
+
         if (list.isEmpty()) {
-            throw NO_PLAYERS_FOUND.create();
+            throw EntityArgument.NO_PLAYERS_FOUND.create();
         } else {
             return list;
         }
     }
 
-    public EntitySelector parse(StringReader stringReader) throws CommandSyntaxException {
-        int i = 0;
-        EntitySelectorParser entitySelectorParser = new EntitySelectorParser(stringReader);
-        EntitySelector entitySelector = entitySelectorParser.parse();
-        if (entitySelector.getMaxResults() > 1 && this.single) {
+    public EntitySelector parse(StringReader stringreader) throws CommandSyntaxException {
+        // CraftBukkit start
+        return this.parse(stringreader, false);
+    }
+
+    public EntitySelector parse(StringReader stringreader, boolean overridePermissions) throws CommandSyntaxException {
+        // CraftBukkit end
+        boolean flag = false;
+        EntitySelectorParser argumentparserselector = new EntitySelectorParser(stringreader);
+        EntitySelector entityselector = argumentparserselector.parse(overridePermissions); // CraftBukkit
+
+        if (entityselector.getMaxResults() > 1 && this.single) {
             if (this.playersOnly) {
-                stringReader.setCursor(0);
-                throw ERROR_NOT_SINGLE_PLAYER.createWithContext(stringReader);
+                stringreader.setCursor(0);
+                throw EntityArgument.ERROR_NOT_SINGLE_PLAYER.createWithContext(stringreader);
             } else {
-                stringReader.setCursor(0);
-                throw ERROR_NOT_SINGLE_ENTITY.createWithContext(stringReader);
+                stringreader.setCursor(0);
+                throw EntityArgument.ERROR_NOT_SINGLE_ENTITY.createWithContext(stringreader);
             }
-        } else if (entitySelector.includesEntities() && this.playersOnly && !entitySelector.isSelfSelector()) {
-            stringReader.setCursor(0);
-            throw ERROR_ONLY_PLAYERS_ALLOWED.createWithContext(stringReader);
+        } else if (entityselector.includesEntities() && this.playersOnly && !entityselector.isSelfSelector()) {
+            stringreader.setCursor(0);
+            throw EntityArgument.ERROR_ONLY_PLAYERS_ALLOWED.createWithContext(stringreader);
         } else {
-            return entitySelector;
+            return entityselector;
         }
     }
 
-    public <S> CompletableFuture<Suggestions> listSuggestions(CommandContext<S> commandContext, SuggestionsBuilder suggestionsBuilder) {
-        if (commandContext.getSource() instanceof SharedSuggestionProvider) {
-            StringReader stringReader = new StringReader(suggestionsBuilder.getInput());
-            stringReader.setCursor(suggestionsBuilder.getStart());
-            SharedSuggestionProvider sharedSuggestionProvider = (SharedSuggestionProvider)commandContext.getSource();
-            EntitySelectorParser entitySelectorParser = new EntitySelectorParser(stringReader, sharedSuggestionProvider.hasPermission(2));
+    public <S> CompletableFuture<Suggestions> listSuggestions(CommandContext<S> commandcontext, SuggestionsBuilder suggestionsbuilder) {
+        if (commandcontext.getSource() instanceof SharedSuggestionProvider) {
+            StringReader stringreader = new StringReader(suggestionsbuilder.getInput());
+
+            stringreader.setCursor(suggestionsbuilder.getStart());
+            SharedSuggestionProvider icompletionprovider = (SharedSuggestionProvider) commandcontext.getSource();
+            EntitySelectorParser argumentparserselector = new EntitySelectorParser(stringreader, icompletionprovider.hasPermission(2));
 
             try {
-                entitySelectorParser.parse();
-            } catch (CommandSyntaxException var7) {
+                argumentparserselector.parse();
+            } catch (CommandSyntaxException commandsyntaxexception) {
+                ;
             }
 
-            return entitySelectorParser.fillSuggestions(suggestionsBuilder, (builder) -> {
-                Collection<String> collection = sharedSuggestionProvider.getOnlinePlayerNames();
-                Iterable<String> iterable = (Iterable<String>)(this.playersOnly ? collection : Iterables.concat(collection, sharedSuggestionProvider.getSelectedEntities()));
-                SharedSuggestionProvider.suggest(iterable, builder);
+            return argumentparserselector.fillSuggestions(suggestionsbuilder, (suggestionsbuilder1) -> {
+                Collection<String> collection = icompletionprovider.getOnlinePlayerNames();
+                Iterable<String> iterable = this.playersOnly ? collection : Iterables.concat(collection, icompletionprovider.getSelectedEntities());
+
+                SharedSuggestionProvider.suggest((Iterable) iterable, suggestionsbuilder1);
             });
         } else {
             return Suggestions.empty();
@@ -134,31 +147,34 @@
     }
 
     public Collection<String> getExamples() {
-        return EXAMPLES;
+        return EntityArgument.EXAMPLES;
     }
 
     public static class Serializer implements ArgumentSerializer<EntityArgument> {
-        @Override
+
+        public Serializer() {}
+
         public void serializeToNetwork(EntityArgument type, FriendlyByteBuf buf) {
-            byte b = 0;
+            byte b0 = 0;
+
             if (type.single) {
-                b = (byte)(b | 1);
+                b0 = (byte) (b0 | 1);
             }
 
             if (type.playersOnly) {
-                b = (byte)(b | 2);
+                b0 = (byte) (b0 | 2);
             }
 
-            buf.writeByte(b);
+            buf.writeByte(b0);
         }
 
         @Override
-        public EntityArgument deserializeFromNetwork(FriendlyByteBuf friendlyByteBuf) {
-            byte b = friendlyByteBuf.readByte();
-            return new EntityArgument((b & 1) != 0, (b & 2) != 0);
+        public EntityArgument deserializeFromNetwork(FriendlyByteBuf buf) {
+            byte b0 = buf.readByte();
+
+            return new EntityArgument((b0 & 1) != 0, (b0 & 2) != 0);
         }
 
-        @Override
         public void serializeToJson(EntityArgument type, JsonObject json) {
             json.addProperty("amount", type.single ? "single" : "multiple");
             json.addProperty("type", type.playersOnly ? "players" : "entities");
