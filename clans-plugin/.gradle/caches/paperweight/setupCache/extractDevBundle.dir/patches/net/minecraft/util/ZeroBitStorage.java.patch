--- a/net/minecraft/util/ZeroBitStorage.java
+++ b/net/minecraft/util/ZeroBitStorage.java
@@ -13,21 +13,21 @@
     }
 
     @Override
-    public int getAndSet(int index, int value) {
-        Validate.inclusiveBetween(0L, (long)(this.size - 1), (long)index);
-        Validate.inclusiveBetween(0L, 0L, (long)value);
+    public final int getAndSet(int index, int value) { // Paper - make final for inline
+        //Validate.inclusiveBetween(0L, (long)(this.size - 1), (long)index); // Paper
+        //Validate.inclusiveBetween(0L, 0L, (long)value); // Paper
         return 0;
     }
 
     @Override
-    public void set(int index, int value) {
-        Validate.inclusiveBetween(0L, (long)(this.size - 1), (long)index);
-        Validate.inclusiveBetween(0L, 0L, (long)value);
+    public final void set(int index, int value) { // Paper - make final for inline
+        //Validate.inclusiveBetween(0L, (long)(this.size - 1), (long)index); // Paper
+        //Validate.inclusiveBetween(0L, 0L, (long)value); // Paper
     }
 
     @Override
-    public int get(int index) {
-        Validate.inclusiveBetween(0L, (long)(this.size - 1), (long)index);
+    public final int get(int index) { // Paper - make final for inline
+        //Validate.inclusiveBetween(0L, (long)(this.size - 1), (long)index); // Paper
         return 0;
     }
 
@@ -46,6 +46,15 @@
         return 0;
     }
 
+    // Paper start
+    @Override
+    public void forEach(DataBitConsumer consumer) {
+        for(int i = 0; i < this.size; ++i) {
+            consumer.accept(i, 0);
+        }
+    }
+    // Paper end
+
     @Override
     public void getAll(IntConsumer action) {
         for(int i = 0; i < this.size; ++i) {
