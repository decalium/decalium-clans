--- a/net/minecraft/world/entity/animal/SnowGolem.java
+++ b/net/minecraft/world/entity/animal/SnowGolem.java
@@ -13,6 +13,7 @@
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
@@ -39,8 +40,12 @@
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.phys.Vec3;
+// CraftBukkit start
+import org.bukkit.craftbukkit.v1_18_R1.event.CraftEventFactory;
+// CraftBukkit end
 
 public class SnowGolem extends AbstractGolem implements Shearable, RangedAttackMob {
+
     private static final EntityDataAccessor<Byte> DATA_PUMPKIN_ID = SynchedEntityData.defineId(SnowGolem.class, EntityDataSerializers.BYTE);
     private static final byte PUMPKIN_FLAG = 16;
     private static final float EYE_HEIGHT = 1.7F;
@@ -55,19 +60,19 @@
         this.goalSelector.addGoal(2, new WaterAvoidingRandomStrollGoal(this, 1.0D, 1.0000001E-5F));
         this.goalSelector.addGoal(3, new LookAtPlayerGoal(this, Player.class, 6.0F));
         this.goalSelector.addGoal(4, new RandomLookAroundGoal(this));
-        this.targetSelector.addGoal(1, new NearestAttackableTargetGoal<>(this, Mob.class, 10, true, false, (entity) -> {
-            return entity instanceof Enemy;
+        this.targetSelector.addGoal(1, new NearestAttackableTargetGoal<>(this, Mob.class, 10, true, false, (entityliving) -> {
+            return entityliving instanceof Enemy;
         }));
     }
 
     public static AttributeSupplier.Builder createAttributes() {
-        return Mob.createMobAttributes().add(Attributes.MAX_HEALTH, 4.0D).add(Attributes.MOVEMENT_SPEED, (double)0.2F);
+        return Mob.createMobAttributes().add(Attributes.MAX_HEALTH, 4.0D).add(Attributes.MOVEMENT_SPEED, 0.20000000298023224D);
     }
 
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(DATA_PUMPKIN_ID, (byte)16);
+        this.entityData.define(SnowGolem.DATA_PUMPKIN_ID, (byte) 16);
     }
 
     @Override
@@ -97,25 +102,27 @@
             int i = Mth.floor(this.getX());
             int j = Mth.floor(this.getY());
             int k = Mth.floor(this.getZ());
-            BlockPos blockPos = new BlockPos(i, j, k);
-            Biome biome = this.level.getBiome(blockPos);
-            if (biome.shouldSnowGolemBurn(blockPos)) {
-                this.hurt(DamageSource.ON_FIRE, 1.0F);
+            BlockPos blockposition = new BlockPos(i, j, k);
+            Biome biomebase = this.level.getBiome(blockposition);
+
+            if (biomebase.shouldSnowGolemBurn(blockposition)) {
+                this.hurt(CraftEventFactory.MELTING, 1.0F); // CraftBukkit - DamageSource.BURN -> CraftEventFactory.MELTING
             }
 
             if (!this.level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
                 return;
             }
 
-            BlockState blockState = Blocks.SNOW.defaultBlockState();
+            BlockState iblockdata = Blocks.SNOW.defaultBlockState();
 
-            for(int l = 0; l < 4; ++l) {
-                i = Mth.floor(this.getX() + (double)((float)(l % 2 * 2 - 1) * 0.25F));
+            for (int l = 0; l < 4; ++l) {
+                i = Mth.floor(this.getX() + (double) ((float) (l % 2 * 2 - 1) * 0.25F));
                 j = Mth.floor(this.getY());
-                k = Mth.floor(this.getZ() + (double)((float)(l / 2 % 2 * 2 - 1) * 0.25F));
-                BlockPos blockPos2 = new BlockPos(i, j, k);
-                if (this.level.getBlockState(blockPos2).isAir() && blockState.canSurvive(this.level, blockPos2)) {
-                    this.level.setBlockAndUpdate(blockPos2, blockState);
+                k = Mth.floor(this.getZ() + (double) ((float) (l / 2 % 2 * 2 - 1) * 0.25F));
+                BlockPos blockposition1 = new BlockPos(i, j, k);
+
+                if (this.level.getBlockState(blockposition1).isAir() && iblockdata.canSurvive(this.level, blockposition1)) {
+                    org.bukkit.craftbukkit.v1_18_R1.event.CraftEventFactory.handleBlockFormEvent(this.level, blockposition1, iblockdata, this); // CraftBukkit
                 }
             }
         }
@@ -124,15 +131,16 @@
 
     @Override
     public void performRangedAttack(LivingEntity target, float pullProgress) {
-        Snowball snowball = new Snowball(this.level, this);
-        double d = target.getEyeY() - (double)1.1F;
-        double e = target.getX() - this.getX();
-        double f = d - snowball.getY();
-        double g = target.getZ() - this.getZ();
-        double h = Math.sqrt(e * e + g * g) * (double)0.2F;
-        snowball.shoot(e, f + h, g, 1.6F, 12.0F);
+        Snowball entitysnowball = new Snowball(this.level, this);
+        double d0 = target.getEyeY() - 1.100000023841858D;
+        double d1 = target.getX() - this.getX();
+        double d2 = d0 - entitysnowball.getY();
+        double d3 = target.getZ() - this.getZ();
+        double d4 = Math.sqrt(d1 * d1 + d3 * d3) * 0.20000000298023224D;
+
+        entitysnowball.shoot(d1, d2 + d4, d3, 1.6F, 12.0F);
         this.playSound(SoundEvents.SNOW_GOLEM_SHOOT, 1.0F, 0.4F / (this.getRandom().nextFloat() * 0.4F + 0.8F));
-        this.level.addFreshEntity(snowball);
+        this.level.addFreshEntity(entitysnowball);
     }
 
     @Override
@@ -142,13 +150,19 @@
 
     @Override
     protected InteractionResult mobInteract(Player player, InteractionHand hand) {
-        ItemStack itemStack = player.getItemInHand(hand);
-        if (itemStack.is(Items.SHEARS) && this.readyForShearing()) {
+        ItemStack itemstack = player.getItemInHand(hand);
+
+        if (itemstack.is(Items.SHEARS) && this.readyForShearing()) {
+            // CraftBukkit start
+            if (!CraftEventFactory.handlePlayerShearEntityEvent(player, this, itemstack, hand)) {
+                return InteractionResult.PASS;
+            }
+            // CraftBukkit end
             this.shear(SoundSource.PLAYERS);
-            this.gameEvent(GameEvent.SHEAR, player);
+            this.gameEvent(GameEvent.SHEAR, (Entity) player);
             if (!this.level.isClientSide) {
-                itemStack.hurtAndBreak(1, player, (playerx) -> {
-                    playerx.broadcastBreakEvent(hand);
+                itemstack.hurtAndBreak(1, player, (entityhuman1) -> {
+                    entityhuman1.broadcastBreakEvent(hand);
                 });
             }
 
@@ -160,10 +174,12 @@
 
     @Override
     public void shear(SoundSource shearedSoundCategory) {
-        this.level.playSound((Player)null, this, SoundEvents.SNOW_GOLEM_SHEAR, shearedSoundCategory, 1.0F, 1.0F);
+        this.level.playSound((Player) null, (Entity) this, SoundEvents.SNOW_GOLEM_SHEAR, shearedSoundCategory, 1.0F, 1.0F);
         if (!this.level.isClientSide()) {
             this.setPumpkin(false);
+            this.forceDrops = true; // CraftBukkit
             this.spawnAtLocation(new ItemStack(Items.CARVED_PUMPKIN), 1.7F);
+            this.forceDrops = false; // CraftBukkit
         }
 
     }
@@ -174,15 +190,16 @@
     }
 
     public boolean hasPumpkin() {
-        return (this.entityData.get(DATA_PUMPKIN_ID) & 16) != 0;
+        return ((Byte) this.entityData.get(SnowGolem.DATA_PUMPKIN_ID) & 16) != 0;
     }
 
     public void setPumpkin(boolean hasPumpkin) {
-        byte b = this.entityData.get(DATA_PUMPKIN_ID);
+        byte b0 = (Byte) this.entityData.get(SnowGolem.DATA_PUMPKIN_ID);
+
         if (hasPumpkin) {
-            this.entityData.set(DATA_PUMPKIN_ID, (byte)(b | 16));
+            this.entityData.set(SnowGolem.DATA_PUMPKIN_ID, (byte) (b0 | 16));
         } else {
-            this.entityData.set(DATA_PUMPKIN_ID, (byte)(b & -17));
+            this.entityData.set(SnowGolem.DATA_PUMPKIN_ID, (byte) (b0 & -17));
         }
 
     }
@@ -207,6 +224,6 @@
 
     @Override
     public Vec3 getLeashOffset() {
-        return new Vec3(0.0D, (double)(0.75F * this.getEyeHeight()), (double)(this.getBbWidth() * 0.4F));
+        return new Vec3(0.0D, (double) (0.75F * this.getEyeHeight()), (double) (this.getBbWidth() * 0.4F));
     }
 }
