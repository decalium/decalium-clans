--- a/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
@@ -11,10 +11,26 @@
 import net.minecraft.network.protocol.login.ClientboundLoginDisconnectPacket;
 import net.minecraft.server.MinecraftServer;
 
+// CraftBukkit start
+import java.net.InetAddress;
+import java.util.HashMap;
+// CraftBukkit end
+
 public class ServerHandshakePacketListenerImpl implements ServerHandshakePacketListener {
+
+    // Spigot start
+    private static final com.google.gson.Gson gson = new com.google.gson.Gson();
+    static final java.util.regex.Pattern HOST_PATTERN = java.util.regex.Pattern.compile("[0-9a-f\\.:]{0,45}");
+    static final java.util.regex.Pattern PROP_PATTERN = java.util.regex.Pattern.compile("\\w{0,16}");
+    // Spigot end
+    // CraftBukkit start - add fields
+    private static final HashMap<InetAddress, Long> throttleTracker = new HashMap<InetAddress, Long>();
+    private static int throttleCounter = 0;
+    // CraftBukkit end
     private static final Component IGNORE_STATUS_REASON = new TextComponent("Ignoring status request");
     private final MinecraftServer server;
     private final Connection connection;
+    private static final boolean BYPASS_HOSTCHECK = Boolean.getBoolean("Paper.bypassHostCheck"); // Paper
 
     public ServerHandshakePacketListenerImpl(MinecraftServer server, Connection connection) {
         this.server = server;
@@ -23,40 +39,131 @@
 
     @Override
     public void handleIntention(ClientIntentionPacket packet) {
-        switch(packet.getIntention()) {
-        case LOGIN:
-            this.connection.setProtocol(ConnectionProtocol.LOGIN);
-            if (packet.getProtocolVersion() != SharedConstants.getCurrentVersion().getProtocolVersion()) {
-                Component component;
-                if (packet.getProtocolVersion() < 754) {
-                    component = new TranslatableComponent("multiplayer.disconnect.outdated_client", SharedConstants.getCurrentVersion().getName());
-                } else {
-                    component = new TranslatableComponent("multiplayer.disconnect.incompatible", SharedConstants.getCurrentVersion().getName());
+        switch (packet.getIntention()) {
+            case LOGIN:
+                this.connection.setProtocol(ConnectionProtocol.LOGIN);
+                // CraftBukkit start - Connection throttle
+                try {
+                    if (!(this.connection.channel.localAddress() instanceof io.netty.channel.unix.DomainSocketAddress)) { // Paper - the connection throttle is useless when you have a Unix domain socket
+                    long currentTime = System.currentTimeMillis();
+                    long connectionThrottle = this.server.server.getConnectionThrottle();
+                    InetAddress address = ((java.net.InetSocketAddress) this.connection.getRemoteAddress()).getAddress();
+
+                    synchronized (ServerHandshakePacketListenerImpl.throttleTracker) {
+                        if (ServerHandshakePacketListenerImpl.throttleTracker.containsKey(address) && !"127.0.0.1".equals(address.getHostAddress()) && currentTime - ServerHandshakePacketListenerImpl.throttleTracker.get(address) < connectionThrottle) {
+                            ServerHandshakePacketListenerImpl.throttleTracker.put(address, currentTime);
+                            Component chatmessage = org.bukkit.craftbukkit.v1_18_R1.util.CraftChatMessage.fromString(com.destroystokyo.paper.PaperConfig.connectionThrottleKickMessage, true)[0]; // Paper - Configurable connection throttle kick message // Paper - Fix hex colors not working in some kick messages
+                            this.connection.send(new ClientboundLoginDisconnectPacket(chatmessage));
+                            this.connection.disconnect(chatmessage);
+                            return;
+                        }
+
+                        ServerHandshakePacketListenerImpl.throttleTracker.put(address, currentTime);
+                        ServerHandshakePacketListenerImpl.throttleCounter++;
+                        if (ServerHandshakePacketListenerImpl.throttleCounter > 200) {
+                            ServerHandshakePacketListenerImpl.throttleCounter = 0;
+
+                            // Cleanup stale entries
+                            java.util.Iterator iter = ServerHandshakePacketListenerImpl.throttleTracker.entrySet().iterator();
+                            while (iter.hasNext()) {
+                                java.util.Map.Entry<InetAddress, Long> entry = (java.util.Map.Entry) iter.next();
+                                if (entry.getValue() > connectionThrottle) {
+                                    iter.remove();
+                                }
+                            }
+                        }
+                    }
+                    } // Paper - add closing bracket for if check above
+                } catch (Throwable t) {
+                    org.apache.logging.log4j.LogManager.getLogger().debug("Failed to check connection throttle", t);
                 }
+                // CraftBukkit end
+                if (packet.getProtocolVersion() != SharedConstants.getCurrentVersion().getProtocolVersion()) {
+                    Component chatmessage; // Paper - Fix hex colors not working in some kick messages
 
-                this.connection.send(new ClientboundLoginDisconnectPacket(component));
-                this.connection.disconnect(component);
-            } else {
-                this.connection.setListener(new ServerLoginPacketListenerImpl(this.server, this.connection));
-            }
-            break;
-        case STATUS:
-            if (this.server.repliesToStatus()) {
-                this.connection.setProtocol(ConnectionProtocol.STATUS);
-                this.connection.setListener(new ServerStatusPacketListenerImpl(this.server, this.connection));
-            } else {
-                this.connection.disconnect(IGNORE_STATUS_REASON);
-            }
-            break;
-        default:
-            throw new UnsupportedOperationException("Invalid intention " + packet.getIntention());
+                    if (packet.getProtocolVersion() < SharedConstants.getCurrentVersion().getProtocolVersion()) { // Paper - Fix incorrect message for outdated clients
+                        chatmessage = org.bukkit.craftbukkit.v1_18_R1.util.CraftChatMessage.fromString( java.text.MessageFormat.format( org.spigotmc.SpigotConfig.outdatedClientMessage.replaceAll("'", "''"), SharedConstants.getCurrentVersion().getName() ) , true )[0]; // Spigot // Paper - Fix hex colors not working in some kick messages
+                    } else {
+                        chatmessage = org.bukkit.craftbukkit.v1_18_R1.util.CraftChatMessage.fromString( java.text.MessageFormat.format( org.spigotmc.SpigotConfig.outdatedServerMessage.replaceAll("'", "''"), SharedConstants.getCurrentVersion().getName() ) , true )[0]; // Spigot // Paper - Fix hex colors not working in some kick messages
+                    }
+
+                    this.connection.send(new ClientboundLoginDisconnectPacket(chatmessage));
+                    this.connection.disconnect(chatmessage);
+                } else {
+                    this.connection.setListener(new ServerLoginPacketListenerImpl(this.server, this.connection));
+                // Paper start - handshake event
+                boolean proxyLogicEnabled = org.spigotmc.SpigotConfig.bungee;
+                boolean handledByEvent = false;
+                // Try and handle the handshake through the event
+                if (com.destroystokyo.paper.event.player.PlayerHandshakeEvent.getHandlerList().getRegisteredListeners().length != 0) { // Hello? Can you hear me?
+                    java.net.SocketAddress socketAddress = this.connection.address;
+                    String hostnameOfRemote = socketAddress instanceof java.net.InetSocketAddress ? ((java.net.InetSocketAddress) socketAddress).getHostString() : InetAddress.getLoopbackAddress().getHostAddress();
+                    com.destroystokyo.paper.event.player.PlayerHandshakeEvent event = new com.destroystokyo.paper.event.player.PlayerHandshakeEvent(packet.hostName, hostnameOfRemote, !proxyLogicEnabled);
+                    if (event.callEvent()) {
+                        // If we've failed somehow, let the client know so and go no further.
+                        if (event.isFailed()) {
+                            Component chatmessage = org.bukkit.craftbukkit.v1_18_R1.util.CraftChatMessage.fromString(event.getFailMessage(), true)[0]; // Paper - Fix hex colors not working in some kick messages
+                            this.connection.send(new ClientboundLoginDisconnectPacket(chatmessage));
+                            this.connection.disconnect(chatmessage);
+                            return;
+                        }
+
+                        if (event.getServerHostname() != null) packet.hostName = event.getServerHostname();
+                        if (event.getSocketAddressHostname() != null) this.connection.address = new java.net.InetSocketAddress(event.getSocketAddressHostname(), socketAddress instanceof java.net.InetSocketAddress ? ((java.net.InetSocketAddress) socketAddress).getPort() : 0);
+                        this.connection.spoofedUUID = event.getUniqueId();
+                        this.connection.spoofedProfile = gson.fromJson(event.getPropertiesJson(), com.mojang.authlib.properties.Property[].class);
+                        handledByEvent = true; // Hooray, we did it!
+                    }
+                }
+                // Don't try and handle default logic if it's been handled by the event.
+                if (!handledByEvent && proxyLogicEnabled) {
+                // Paper end
+                    // Spigot Start
+                //if (org.spigotmc.SpigotConfig.bungee) { // Paper - comment out, we check above!
+                        String[] split = packet.hostName.split("\00");
+                        if ( ( split.length == 3 || split.length == 4 ) && ( ServerHandshakePacketListenerImpl.BYPASS_HOSTCHECK || ServerHandshakePacketListenerImpl.HOST_PATTERN.matcher( split[1] ).matches() ) ) { // Paper
+                            // Paper start - Unix domain socket support
+                            java.net.SocketAddress socketAddress = connection.getRemoteAddress();
+                            packet.hostName = split[0];
+                            connection.address = new java.net.InetSocketAddress(split[1], socketAddress instanceof java.net.InetSocketAddress ? ((java.net.InetSocketAddress) socketAddress).getPort() : 0);
+                            // Paper end
+                            connection.spoofedUUID = com.mojang.util.UUIDTypeAdapter.fromString( split[2] );
+                        } else
+                        {
+                            TranslatableComponent chatmessage = new TranslatableComponent("If you wish to use IP forwarding, please enable it in your BungeeCord config as well!");
+                            this.connection.send(new ClientboundLoginDisconnectPacket(chatmessage));
+                            this.connection.disconnect(chatmessage);
+                            return;
+                        }
+                        if ( split.length == 4 )
+                        {
+                            connection.spoofedProfile = ServerHandshakePacketListenerImpl.gson.fromJson(split[3], com.mojang.authlib.properties.Property[].class);
+                        }
+                    }
+                    // Spigot End
+                    ((ServerLoginPacketListenerImpl) this.connection.getPacketListener()).hostname = packet.hostName + ":" + packet.port; // CraftBukkit - set hostname
+                }
+                break;
+            case STATUS:
+                if (this.server.repliesToStatus()) {
+                    this.connection.setProtocol(ConnectionProtocol.STATUS);
+                    this.connection.setListener(new ServerStatusPacketListenerImpl(this.server, this.connection));
+                } else {
+                    this.connection.disconnect(ServerHandshakePacketListenerImpl.IGNORE_STATUS_REASON);
+                }
+                break;
+            default:
+                throw new UnsupportedOperationException("Invalid intention " + packet.getIntention());
         }
 
+        // Paper start - NetworkClient implementation
+        this.connection.protocolVersion = packet.getProtocolVersion();
+        this.connection.virtualHost = com.destroystokyo.paper.network.PaperNetworkClient.prepareVirtualHost(packet.hostName, packet.port);
+        // Paper end
     }
 
     @Override
-    public void onDisconnect(Component reason) {
-    }
+    public void onDisconnect(Component reason) {}
 
     @Override
     public Connection getConnection() {
