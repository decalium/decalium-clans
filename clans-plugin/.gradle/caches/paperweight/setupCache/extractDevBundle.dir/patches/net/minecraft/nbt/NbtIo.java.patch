--- a/net/minecraft/nbt/NbtIo.java
+++ b/net/minecraft/nbt/NbtIo.java
@@ -1,3 +1,4 @@
+// mc-dev import
 package net.minecraft.nbt;
 
 import java.io.BufferedInputStream;
@@ -20,112 +21,117 @@
 import net.minecraft.ReportedException;
 
 public class NbtIo {
+
+    public NbtIo() {}
+
     public static CompoundTag readCompressed(File file) throws IOException {
-        InputStream inputStream = new FileInputStream(file);
+        FileInputStream fileinputstream = new FileInputStream(file);
+
+        CompoundTag nbttagcompound;
 
-        CompoundTag var2;
         try {
-            var2 = readCompressed(inputStream);
-        } catch (Throwable var5) {
+            nbttagcompound = NbtIo.readCompressed((InputStream) fileinputstream);
+        } catch (Throwable throwable) {
             try {
-                inputStream.close();
-            } catch (Throwable var4) {
-                var5.addSuppressed(var4);
+                fileinputstream.close();
+            } catch (Throwable throwable1) {
+                throwable.addSuppressed(throwable1);
             }
 
-            throw var5;
+            throw throwable;
         }
 
-        inputStream.close();
-        return var2;
+        fileinputstream.close();
+        return nbttagcompound;
     }
 
     public static CompoundTag readCompressed(InputStream stream) throws IOException {
-        DataInputStream dataInputStream = new DataInputStream(new BufferedInputStream(new GZIPInputStream(stream)));
+        DataInputStream datainputstream = new DataInputStream(new BufferedInputStream(new GZIPInputStream(stream)));
+
+        CompoundTag nbttagcompound;
 
-        CompoundTag var2;
         try {
-            var2 = read(dataInputStream, NbtAccounter.UNLIMITED);
-        } catch (Throwable var5) {
+            nbttagcompound = NbtIo.read(datainputstream, NbtAccounter.UNLIMITED);
+        } catch (Throwable throwable) {
             try {
-                dataInputStream.close();
-            } catch (Throwable var4) {
-                var5.addSuppressed(var4);
+                datainputstream.close();
+            } catch (Throwable throwable1) {
+                throwable.addSuppressed(throwable1);
             }
 
-            throw var5;
+            throw throwable;
         }
 
-        dataInputStream.close();
-        return var2;
+        datainputstream.close();
+        return nbttagcompound;
     }
 
     public static void writeCompressed(CompoundTag compound, File file) throws IOException {
-        OutputStream outputStream = new FileOutputStream(file);
+        FileOutputStream fileoutputstream = new FileOutputStream(file);
 
         try {
-            writeCompressed(compound, outputStream);
-        } catch (Throwable var6) {
+            NbtIo.writeCompressed(compound, (OutputStream) fileoutputstream);
+        } catch (Throwable throwable) {
             try {
-                outputStream.close();
-            } catch (Throwable var5) {
-                var6.addSuppressed(var5);
+                fileoutputstream.close();
+            } catch (Throwable throwable1) {
+                throwable.addSuppressed(throwable1);
             }
 
-            throw var6;
+            throw throwable;
         }
 
-        outputStream.close();
+        fileoutputstream.close();
     }
 
     public static void writeCompressed(CompoundTag compound, OutputStream stream) throws IOException {
-        DataOutputStream dataOutputStream = new DataOutputStream(new BufferedOutputStream(new GZIPOutputStream(stream)));
+        DataOutputStream dataoutputstream = new DataOutputStream(new BufferedOutputStream(new GZIPOutputStream(stream)));
 
         try {
-            write(compound, dataOutputStream);
-        } catch (Throwable var6) {
+            NbtIo.write(compound, (DataOutput) dataoutputstream);
+        } catch (Throwable throwable) {
             try {
-                dataOutputStream.close();
-            } catch (Throwable var5) {
-                var6.addSuppressed(var5);
+                dataoutputstream.close();
+            } catch (Throwable throwable1) {
+                throwable.addSuppressed(throwable1);
             }
 
-            throw var6;
+            throw throwable;
         }
 
-        dataOutputStream.close();
+        dataoutputstream.close();
     }
 
     public static void write(CompoundTag compound, File file) throws IOException {
-        FileOutputStream fileOutputStream = new FileOutputStream(file);
+        FileOutputStream fileoutputstream = new FileOutputStream(file);
 
         try {
-            DataOutputStream dataOutputStream = new DataOutputStream(fileOutputStream);
+            DataOutputStream dataoutputstream = new DataOutputStream(fileoutputstream);
 
             try {
-                write(compound, dataOutputStream);
-            } catch (Throwable var8) {
+                NbtIo.write(compound, (DataOutput) dataoutputstream);
+            } catch (Throwable throwable) {
                 try {
-                    dataOutputStream.close();
-                } catch (Throwable var7) {
-                    var8.addSuppressed(var7);
+                    dataoutputstream.close();
+                } catch (Throwable throwable1) {
+                    throwable.addSuppressed(throwable1);
                 }
 
-                throw var8;
+                throw throwable;
             }
 
-            dataOutputStream.close();
-        } catch (Throwable var9) {
+            dataoutputstream.close();
+        } catch (Throwable throwable2) {
             try {
-                fileOutputStream.close();
-            } catch (Throwable var6) {
-                var9.addSuppressed(var6);
+                fileoutputstream.close();
+            } catch (Throwable throwable3) {
+                throwable2.addSuppressed(throwable3);
             }
 
-            throw var9;
+            throw throwable2;
         }
 
-        fileOutputStream.close();
+        fileoutputstream.close();
     }
 
     @Nullable
@@ -133,76 +139,85 @@
         if (!file.exists()) {
             return null;
         } else {
-            FileInputStream fileInputStream = new FileInputStream(file);
+            FileInputStream fileinputstream = new FileInputStream(file);
+
+            CompoundTag nbttagcompound;
 
-            CompoundTag var3;
             try {
-                DataInputStream dataInputStream = new DataInputStream(fileInputStream);
+                DataInputStream datainputstream = new DataInputStream(fileinputstream);
 
                 try {
-                    var3 = read(dataInputStream, NbtAccounter.UNLIMITED);
-                } catch (Throwable var7) {
+                    nbttagcompound = NbtIo.read(datainputstream, NbtAccounter.UNLIMITED);
+                } catch (Throwable throwable) {
                     try {
-                        dataInputStream.close();
-                    } catch (Throwable var6) {
-                        var7.addSuppressed(var6);
+                        datainputstream.close();
+                    } catch (Throwable throwable1) {
+                        throwable.addSuppressed(throwable1);
                     }
 
-                    throw var7;
+                    throw throwable;
                 }
 
-                dataInputStream.close();
-            } catch (Throwable var8) {
+                datainputstream.close();
+            } catch (Throwable throwable2) {
                 try {
-                    fileInputStream.close();
-                } catch (Throwable var5) {
-                    var8.addSuppressed(var5);
+                    fileinputstream.close();
+                } catch (Throwable throwable3) {
+                    throwable2.addSuppressed(throwable3);
                 }
 
-                throw var8;
+                throw throwable2;
             }
 
-            fileInputStream.close();
-            return var3;
+            fileinputstream.close();
+            return nbttagcompound;
         }
     }
 
     public static CompoundTag read(DataInput input) throws IOException {
-        return read(input, NbtAccounter.UNLIMITED);
+        return NbtIo.read(input, NbtAccounter.UNLIMITED);
     }
 
     public static CompoundTag read(DataInput input, NbtAccounter tracker) throws IOException {
-        Tag tag = readUnnamedTag(input, 0, tracker);
-        if (tag instanceof CompoundTag) {
-            return (CompoundTag)tag;
+        // Spigot start
+        if ( input instanceof io.netty.buffer.ByteBufInputStream )
+        {
+            input = new DataInputStream(new org.spigotmc.LimitStream((InputStream) input, tracker));
+        }
+        // Spigot end
+        Tag nbtbase = NbtIo.readUnnamedTag(input, 0, tracker);
+
+        if (nbtbase instanceof CompoundTag) {
+            return (CompoundTag) nbtbase;
         } else {
             throw new IOException("Root tag must be a named compound tag");
         }
     }
 
     public static void write(CompoundTag compound, DataOutput output) throws IOException {
-        writeUnnamedTag(compound, output);
+        NbtIo.writeUnnamedTag(compound, output);
     }
 
     public static void parse(DataInput input, StreamTagVisitor visitor) throws IOException {
-        TagType<?> tagType = TagTypes.getType(input.readByte());
-        if (tagType == EndTag.TYPE) {
+        TagType<?> nbttagtype = TagTypes.getType(input.readByte());
+
+        if (nbttagtype == EndTag.TYPE) {
             if (visitor.visitRootEntry(EndTag.TYPE) == StreamTagVisitor.ValueResult.CONTINUE) {
                 visitor.visitEnd();
             }
 
         } else {
-            switch(visitor.visitRootEntry(tagType)) {
-            case HALT:
-            default:
-                break;
-            case BREAK:
-                StringTag.skipString(input);
-                tagType.skip(input);
-                break;
-            case CONTINUE:
-                StringTag.skipString(input);
-                tagType.parse(input, visitor);
+            switch (visitor.visitRootEntry(nbttagtype)) {
+                case HALT:
+                default:
+                    break;
+                case BREAK:
+                    StringTag.skipString(input);
+                    nbttagtype.skip(input);
+                    break;
+                case CONTINUE:
+                    StringTag.skipString(input);
+                    nbttagtype.parse(input, visitor);
             }
 
         }
@@ -217,19 +232,21 @@
     }
 
     private static Tag readUnnamedTag(DataInput input, int depth, NbtAccounter tracker) throws IOException {
-        byte b = input.readByte();
-        if (b == 0) {
+        byte b0 = input.readByte();
+
+        if (b0 == 0) {
             return EndTag.INSTANCE;
         } else {
             StringTag.skipString(input);
 
             try {
-                return TagTypes.getType(b).load(input, depth, tracker);
-            } catch (IOException var7) {
-                CrashReport crashReport = CrashReport.forThrowable(var7, "Loading NBT data");
-                CrashReportCategory crashReportCategory = crashReport.addCategory("NBT Tag");
-                crashReportCategory.setDetail("Tag type", b);
-                throw new ReportedException(crashReport);
+                return TagTypes.getType(b0).load(input, depth, tracker);
+            } catch (IOException ioexception) {
+                CrashReport crashreport = CrashReport.forThrowable(ioexception, "Loading NBT data");
+                CrashReportCategory crashreportsystemdetails = crashreport.addCategory("NBT Tag");
+
+                crashreportsystemdetails.setDetail("Tag type", (Object) b0);
+                throw new ReportedException(crashreport);
             }
         }
     }
