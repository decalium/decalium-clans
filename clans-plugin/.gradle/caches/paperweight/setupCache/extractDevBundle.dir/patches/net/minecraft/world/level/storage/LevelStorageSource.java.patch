--- a/net/minecraft/world/level/storage/LevelStorageSource.java
+++ b/net/minecraft/world/level/storage/LevelStorageSource.java
@@ -3,6 +3,7 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
+import com.google.common.collect.UnmodifiableIterator;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.serialization.DataResult;
@@ -14,6 +15,7 @@
 import java.io.IOException;
 import java.nio.file.FileVisitResult;
 import java.nio.file.Files;
+import java.nio.file.LinkOption;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.nio.file.SimpleFileVisitor;
@@ -25,6 +27,7 @@
 import java.time.temporal.ChronoField;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Optional;
 import java.util.function.BiFunction;
 import java.util.zip.ZipEntry;
@@ -48,12 +51,13 @@
 import net.minecraft.world.level.DataPackConfig;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelSettings;
-import net.minecraft.world.level.dimension.DimensionType;
+import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.levelgen.WorldGenSettings;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 public class LevelStorageSource {
+
     static final Logger LOGGER = LogManager.getLogger();
     static final DateTimeFormatter FORMATTER = (new DateTimeFormatterBuilder()).appendValue(ChronoField.YEAR, 4, 10, SignStyle.EXCEEDS_PAD).appendLiteral('-').appendValue(ChronoField.MONTH_OF_YEAR, 2).appendLiteral('-').appendValue(ChronoField.DAY_OF_MONTH, 2).appendLiteral('_').appendValue(ChronoField.HOUR_OF_DAY, 2).appendLiteral('-').appendValue(ChronoField.MINUTE_OF_HOUR, 2).appendLiteral('-').appendValue(ChronoField.SECOND_OF_MINUTE, 2).toFormatter();
     private static final String ICON_FILENAME = "icon.png";
@@ -66,9 +70,9 @@
         this.fixerUpper = dataFixer;
 
         try {
-            Files.createDirectories(Files.exists(savesDirectory) ? savesDirectory.toRealPath() : savesDirectory);
-        } catch (IOException var5) {
-            throw new RuntimeException(var5);
+            Files.createDirectories(Files.exists(savesDirectory, new LinkOption[0]) ? savesDirectory.toRealPath() : savesDirectory);
+        } catch (IOException ioexception) {
+            throw new RuntimeException(ioexception);
         }
 
         this.baseDir = savesDirectory;
@@ -80,25 +84,36 @@
     }
 
     private static <T> Pair<WorldGenSettings, Lifecycle> readWorldGenSettings(Dynamic<T> levelData, DataFixer dataFixer, int version) {
-        Dynamic<T> dynamic = levelData.get("WorldGenSettings").orElseEmptyMap();
+        Dynamic<T> dynamic1 = levelData.get("WorldGenSettings").orElseEmptyMap();
+        UnmodifiableIterator unmodifiableiterator = LevelStorageSource.OLD_SETTINGS_KEYS.iterator();
+
+        while (unmodifiableiterator.hasNext()) {
+            String s = (String) unmodifiableiterator.next();
+            Optional<? extends Dynamic<?>> optional = levelData.get(s).result();
 
-        for(String string : OLD_SETTINGS_KEYS) {
-            Optional<? extends Dynamic<?>> optional = levelData.get(string).result();
             if (optional.isPresent()) {
-                dynamic = dynamic.set(string, optional.get());
+                dynamic1 = dynamic1.set(s, (Dynamic) optional.get());
             }
         }
 
-        Dynamic<T> dynamic2 = dataFixer.update(References.WORLD_GEN_SETTINGS, dynamic, version, SharedConstants.getCurrentVersion().getWorldVersion());
-        DataResult<WorldGenSettings> dataResult = WorldGenSettings.CODEC.parse(dynamic2);
-        return Pair.of(dataResult.resultOrPartial(Util.prefix("WorldGenSettings: ", LOGGER::error)).orElseGet(() -> {
-            RegistryAccess registryAccess = RegistryAccess.RegistryHolder.readFromDisk(dynamic2);
-            return WorldGenSettings.makeDefault(registryAccess);
-        }), dataResult.lifecycle());
+        Dynamic<T> dynamic2 = dataFixer.update(References.WORLD_GEN_SETTINGS, dynamic1, version, SharedConstants.getCurrentVersion().getWorldVersion());
+        DataResult<WorldGenSettings> dataresult = WorldGenSettings.CODEC.parse(dynamic2);
+        Logger logger = LevelStorageSource.LOGGER;
+
+        Objects.requireNonNull(logger);
+        return Pair.of((WorldGenSettings) dataresult.resultOrPartial(Util.prefix("WorldGenSettings: ", logger::error)).orElseGet(() -> {
+            RegistryAccess iregistrycustom = RegistryAccess.RegistryHolder.readFromDisk(dynamic2);
+
+            return WorldGenSettings.makeDefault(iregistrycustom);
+        }), dataresult.lifecycle());
     }
 
     private static DataPackConfig readDataPackConfig(Dynamic<?> dynamic) {
-        return DataPackConfig.CODEC.parse(dynamic).resultOrPartial(LOGGER::error).orElse(DataPackConfig.DEFAULT);
+        DataResult dataresult = DataPackConfig.CODEC.parse(dynamic);
+        Logger logger = LevelStorageSource.LOGGER;
+
+        Objects.requireNonNull(logger);
+        return (DataPackConfig) dataresult.resultOrPartial(logger::error).orElse(DataPackConfig.DEFAULT);
     }
 
     public String getName() {
@@ -106,32 +121,38 @@
     }
 
     public List<LevelSummary> getLevelList() throws LevelStorageException {
-        if (!Files.isDirectory(this.baseDir)) {
+        if (!Files.isDirectory(this.baseDir, new LinkOption[0])) {
             throw new LevelStorageException((new TranslatableComponent("selectWorld.load_folder_access")).getString());
         } else {
             List<LevelSummary> list = Lists.newArrayList();
-            File[] files = this.baseDir.toFile().listFiles();
+            File[] afile = this.baseDir.toFile().listFiles();
+            File[] afile1 = afile;
+            int i = afile.length;
+
+            for (int j = 0; j < i; ++j) {
+                File file = afile1[j];
 
-            for(File file : files) {
                 if (file.isDirectory()) {
-                    boolean bl;
+                    boolean flag;
+
                     try {
-                        bl = DirectoryLock.isLocked(file.toPath());
-                    } catch (Exception var10) {
-                        LOGGER.warn("Failed to read {} lock", file, var10);
+                        flag = DirectoryLock.isLocked(file.toPath());
+                    } catch (Exception exception) {
+                        LevelStorageSource.LOGGER.warn("Failed to read {} lock", file, exception);
                         continue;
                     }
 
                     try {
-                        LevelSummary levelSummary = this.readLevelData(file, this.levelSummaryReader(file, bl));
-                        if (levelSummary != null) {
-                            list.add(levelSummary);
+                        LevelSummary worldinfo = (LevelSummary) this.readLevelData(file, this.levelSummaryReader(file, flag));
+
+                        if (worldinfo != null) {
+                            list.add(worldinfo);
                         }
-                    } catch (OutOfMemoryError var9) {
+                    } catch (OutOfMemoryError outofmemoryerror) {
                         MemoryReserve.release();
                         System.gc();
-                        LOGGER.fatal("Ran out of memory trying to read summary of {}", (Object)file);
-                        throw var9;
+                        LevelStorageSource.LOGGER.fatal("Ran out of memory trying to read summary of {}", file);
+                        throw outofmemoryerror;
                     }
                 }
             }
@@ -147,77 +168,86 @@
     @Nullable
     <T> T readLevelData(File file, BiFunction<File, DataFixer, T> levelDataParser) {
         if (!file.exists()) {
-            return (T)null;
+            return null;
         } else {
-            File file2 = new File(file, "level.dat");
-            if (file2.exists()) {
-                T object = levelDataParser.apply(file2, this.fixerUpper);
-                if (object != null) {
-                    return object;
+            File file1 = new File(file, "level.dat");
+
+            if (file1.exists()) {
+                T t0 = levelDataParser.apply(file1, this.fixerUpper);
+
+                if (t0 != null) {
+                    return t0;
                 }
             }
 
-            file2 = new File(file, "level.dat_old");
-            return (T)(file2.exists() ? levelDataParser.apply(file2, this.fixerUpper) : null);
+            file1 = new File(file, "level.dat_old");
+            return file1.exists() ? levelDataParser.apply(file1, this.fixerUpper) : null;
         }
     }
 
     @Nullable
     private static DataPackConfig getDataPacks(File file, DataFixer dataFixer) {
         try {
-            CompoundTag compoundTag = NbtIo.readCompressed(file);
-            CompoundTag compoundTag2 = compoundTag.getCompound("Data");
-            compoundTag2.remove("Player");
-            int i = compoundTag2.contains("DataVersion", 99) ? compoundTag2.getInt("DataVersion") : -1;
-            Dynamic<Tag> dynamic = dataFixer.update(DataFixTypes.LEVEL.getType(), new Dynamic<>(NbtOps.INSTANCE, compoundTag2), i, SharedConstants.getCurrentVersion().getWorldVersion());
-            return dynamic.get("DataPacks").result().map(LevelStorageSource::readDataPackConfig).orElse(DataPackConfig.DEFAULT);
-        } catch (Exception var6) {
-            LOGGER.error("Exception reading {}", file, var6);
+            CompoundTag nbttagcompound = NbtIo.readCompressed(file);
+            CompoundTag nbttagcompound1 = nbttagcompound.getCompound("Data");
+
+            nbttagcompound1.remove("Player");
+            int i = nbttagcompound1.contains("DataVersion", 99) ? nbttagcompound1.getInt("DataVersion") : -1;
+            Dynamic<Tag> dynamic = dataFixer.update(DataFixTypes.LEVEL.getType(), new Dynamic(NbtOps.INSTANCE, nbttagcompound1), i, SharedConstants.getCurrentVersion().getWorldVersion());
+
+            return (DataPackConfig) dynamic.get("DataPacks").result().map(LevelStorageSource::readDataPackConfig).orElse(DataPackConfig.DEFAULT);
+        } catch (Exception exception) {
+            LevelStorageSource.LOGGER.error("Exception reading {}", file, exception);
             return null;
         }
     }
 
-    static BiFunction<File, DataFixer, PrimaryLevelData> getLevelData(DynamicOps<Tag> dynamicOps, DataPackConfig dataPackSettings) {
-        return (file, dataFixer) -> {
+    static BiFunction<File, DataFixer, PrimaryLevelData> getLevelData(DynamicOps<Tag> dynamicops, DataPackConfig dataPackSettings) {
+        return (file, datafixer) -> {
             try {
-                CompoundTag compoundTag = NbtIo.readCompressed(file);
-                CompoundTag compoundTag2 = compoundTag.getCompound("Data");
-                CompoundTag compoundTag3 = compoundTag2.contains("Player", 10) ? compoundTag2.getCompound("Player") : null;
-                compoundTag2.remove("Player");
-                int i = compoundTag2.contains("DataVersion", 99) ? compoundTag2.getInt("DataVersion") : -1;
-                Dynamic<Tag> dynamic = dataFixer.update(DataFixTypes.LEVEL.getType(), new Dynamic<>(dynamicOps, compoundTag2), i, SharedConstants.getCurrentVersion().getWorldVersion());
-                Pair<WorldGenSettings, Lifecycle> pair = readWorldGenSettings(dynamic, dataFixer, i);
-                LevelVersion levelVersion = LevelVersion.parse(dynamic);
-                LevelSettings levelSettings = LevelSettings.parse(dynamic, dataPackSettings);
-                return PrimaryLevelData.parse(dynamic, dataFixer, i, compoundTag3, levelSettings, levelVersion, pair.getFirst(), pair.getSecond());
-            } catch (Exception var12) {
-                LOGGER.error("Exception reading {}", file, var12);
+                CompoundTag nbttagcompound = NbtIo.readCompressed(file);
+                CompoundTag nbttagcompound1 = nbttagcompound.getCompound("Data");
+                CompoundTag nbttagcompound2 = nbttagcompound1.contains("Player", 10) ? nbttagcompound1.getCompound("Player") : null;
+
+                nbttagcompound1.remove("Player");
+                int i = nbttagcompound1.contains("DataVersion", 99) ? nbttagcompound1.getInt("DataVersion") : -1;
+                Dynamic<Tag> dynamic = datafixer.update(DataFixTypes.LEVEL.getType(), new Dynamic(dynamicops, nbttagcompound1), i, SharedConstants.getCurrentVersion().getWorldVersion());
+                Pair<WorldGenSettings, Lifecycle> pair = LevelStorageSource.readWorldGenSettings(dynamic, datafixer, i);
+                LevelVersion levelversion = LevelVersion.parse(dynamic);
+                LevelSettings worldsettings = LevelSettings.parse(dynamic, dataPackSettings);
+
+                return PrimaryLevelData.parse(dynamic, datafixer, i, nbttagcompound2, worldsettings, levelversion, (WorldGenSettings) pair.getFirst(), (Lifecycle) pair.getSecond());
+            } catch (Exception exception) {
+                LevelStorageSource.LOGGER.error("Exception reading {}", file, exception);
                 return null;
             }
         };
     }
 
     BiFunction<File, DataFixer, LevelSummary> levelSummaryReader(File file, boolean locked) {
-        return (filex, dataFixer) -> {
+        return (file1, datafixer) -> {
             try {
-                CompoundTag compoundTag = NbtIo.readCompressed(filex);
-                CompoundTag compoundTag2 = compoundTag.getCompound("Data");
-                compoundTag2.remove("Player");
-                int i = compoundTag2.contains("DataVersion", 99) ? compoundTag2.getInt("DataVersion") : -1;
-                Dynamic<Tag> dynamic = dataFixer.update(DataFixTypes.LEVEL.getType(), new Dynamic<>(NbtOps.INSTANCE, compoundTag2), i, SharedConstants.getCurrentVersion().getWorldVersion());
-                LevelVersion levelVersion = LevelVersion.parse(dynamic);
-                int j = levelVersion.levelDataVersion();
+                CompoundTag nbttagcompound = NbtIo.readCompressed(file1);
+                CompoundTag nbttagcompound1 = nbttagcompound.getCompound("Data");
+
+                nbttagcompound1.remove("Player");
+                int i = nbttagcompound1.contains("DataVersion", 99) ? nbttagcompound1.getInt("DataVersion") : -1;
+                Dynamic<Tag> dynamic = datafixer.update(DataFixTypes.LEVEL.getType(), new Dynamic(NbtOps.INSTANCE, nbttagcompound1), i, SharedConstants.getCurrentVersion().getWorldVersion());
+                LevelVersion levelversion = LevelVersion.parse(dynamic);
+                int j = levelversion.levelDataVersion();
+
                 if (j != 19132 && j != 19133) {
                     return null;
                 } else {
-                    boolean bl2 = j != this.getStorageVersion();
-                    File file3 = new File(file, "icon.png");
-                    DataPackConfig dataPackConfig = dynamic.get("DataPacks").result().map(LevelStorageSource::readDataPackConfig).orElse(DataPackConfig.DEFAULT);
-                    LevelSettings levelSettings = LevelSettings.parse(dynamic, dataPackConfig);
-                    return new LevelSummary(levelSettings, levelVersion, file.getName(), bl2, locked, file3);
+                    boolean flag1 = j != this.getStorageVersion();
+                    File file2 = new File(file, "icon.png");
+                    DataPackConfig datapackconfiguration = (DataPackConfig) dynamic.get("DataPacks").result().map(LevelStorageSource::readDataPackConfig).orElse(DataPackConfig.DEFAULT);
+                    LevelSettings worldsettings = LevelSettings.parse(dynamic, datapackconfiguration);
+
+                    return new LevelSummary(worldsettings, levelversion, file.getName(), flag1, locked, file2);
                 }
-            } catch (Exception var15) {
-                LOGGER.error("Exception reading {}", filex, var15);
+            } catch (Exception exception) {
+                LevelStorageSource.LOGGER.error("Exception reading {}", file1, exception);
                 return null;
             }
         };
@@ -226,16 +256,17 @@
     public boolean isNewLevelIdAcceptable(String name) {
         try {
             Path path = this.baseDir.resolve(name);
+
             Files.createDirectory(path);
             Files.deleteIfExists(path);
             return true;
-        } catch (IOException var3) {
+        } catch (IOException ioexception) {
             return false;
         }
     }
 
     public boolean levelExists(String name) {
-        return Files.isDirectory(this.baseDir.resolve(name));
+        return Files.isDirectory(this.baseDir.resolve(name), new LinkOption[0]);
     }
 
     public Path getBaseDir() {
@@ -246,19 +277,38 @@
         return this.backupDir;
     }
 
-    public LevelStorageSource.LevelStorageAccess createAccess(String directoryName) throws IOException {
-        return new LevelStorageSource.LevelStorageAccess(directoryName);
+    // CraftBukkit start
+    public LevelStorageSource.LevelStorageAccess createAccess(String s, ResourceKey<LevelStem> dimensionType) throws IOException {
+        return new LevelStorageSource.LevelStorageAccess(s, dimensionType);
+    }
+
+    public static Path getStorageFolder(Path path, ResourceKey<LevelStem> dimensionType) {
+        if (dimensionType == LevelStem.OVERWORLD) {
+            return path;
+        } else if (dimensionType == LevelStem.NETHER) {
+            return path.resolve("DIM-1");
+        } else if (dimensionType == LevelStem.END) {
+            return path.resolve("DIM1");
+        } else {
+            return path.resolve("dimensions").resolve(dimensionType.location().getNamespace()).resolve(dimensionType.location().getPath());
+        }
     }
+    // CraftBukkit end
 
     public class LevelStorageAccess implements AutoCloseable {
+
         final DirectoryLock lock;
         public final Path levelPath;
         private final String levelId;
         private final Map<LevelResource, Path> resources = Maps.newHashMap();
+        // CraftBukkit start
+        public final ResourceKey<LevelStem> dimensionType;
 
-        public LevelStorageAccess(String directoryName) throws IOException {
-            this.levelId = directoryName;
-            this.levelPath = LevelStorageSource.this.baseDir.resolve(directoryName);
+        public LevelStorageAccess(String s, ResourceKey<LevelStem> dimensionType) throws IOException {
+            this.dimensionType = dimensionType;
+            // CraftBukkit end
+            this.levelId = s;
+            this.levelPath = LevelStorageSource.this.baseDir.resolve(s);
             this.lock = DirectoryLock.create(this.levelPath);
         }
 
@@ -267,13 +317,13 @@
         }
 
         public Path getLevelPath(LevelResource savePath) {
-            return this.resources.computeIfAbsent(savePath, (path) -> {
-                return this.levelPath.resolve(path.getId());
+            return (Path) this.resources.computeIfAbsent(savePath, (savedfile1) -> {
+                return this.levelPath.resolve(savedfile1.getId());
             });
         }
 
         public Path getDimensionPath(ResourceKey<Level> key) {
-            return DimensionType.getStorageFolder(key, this.levelPath);
+            return LevelStorageSource.getStorageFolder(this.levelPath, this.dimensionType); // CraftBukkit
         }
 
         private void checkLock() {
@@ -290,39 +340,42 @@
         @Nullable
         public LevelSummary getSummary() {
             this.checkLock();
-            return LevelStorageSource.this.readLevelData(this.levelPath.toFile(), LevelStorageSource.this.levelSummaryReader(this.levelPath.toFile(), false));
+            return (LevelSummary) LevelStorageSource.this.readLevelData(this.levelPath.toFile(), LevelStorageSource.this.levelSummaryReader(this.levelPath.toFile(), false));
         }
 
         @Nullable
-        public WorldData getDataTag(DynamicOps<Tag> dynamicOps, DataPackConfig dataPackSettings) {
+        public WorldData getDataTag(DynamicOps<Tag> dynamicops, DataPackConfig dataPackSettings) {
             this.checkLock();
-            return LevelStorageSource.this.readLevelData(this.levelPath.toFile(), LevelStorageSource.getLevelData(dynamicOps, dataPackSettings));
+            return (WorldData) LevelStorageSource.this.readLevelData(this.levelPath.toFile(), LevelStorageSource.getLevelData(dynamicops, dataPackSettings));
         }
 
         @Nullable
         public DataPackConfig getDataPacks() {
             this.checkLock();
-            return LevelStorageSource.this.readLevelData(this.levelPath.toFile(), LevelStorageSource::getDataPacks);
+            return (DataPackConfig) LevelStorageSource.this.readLevelData(this.levelPath.toFile(), LevelStorageSource::getDataPacks);
         }
 
         public void saveDataTag(RegistryAccess registryManager, WorldData saveProperties) {
-            this.saveDataTag(registryManager, saveProperties, (CompoundTag)null);
+            this.saveDataTag(registryManager, saveProperties, (CompoundTag) null);
         }
 
         public void saveDataTag(RegistryAccess registryManager, WorldData saveProperties, @Nullable CompoundTag nbt) {
             File file = this.levelPath.toFile();
-            CompoundTag compoundTag = saveProperties.createTag(registryManager, nbt);
-            CompoundTag compoundTag2 = new CompoundTag();
-            compoundTag2.put("Data", compoundTag);
+            CompoundTag nbttagcompound1 = saveProperties.createTag(registryManager, nbt);
+            CompoundTag nbttagcompound2 = new CompoundTag();
+
+            nbttagcompound2.put("Data", nbttagcompound1);
 
             try {
-                File file2 = File.createTempFile("level", ".dat", file);
-                NbtIo.writeCompressed(compoundTag2, file2);
-                File file3 = new File(file, "level.dat_old");
-                File file4 = new File(file, "level.dat");
-                Util.safeReplaceFile(file4, file2, file3);
-            } catch (Exception var10) {
-                LevelStorageSource.LOGGER.error("Failed to save level {}", file, var10);
+                File file1 = File.createTempFile("level", ".dat", file);
+
+                NbtIo.writeCompressed(nbttagcompound2, file1);
+                File file2 = new File(file, "level.dat_old");
+                File file3 = new File(file, "level.dat");
+
+                Util.safeReplaceFile(file3, file1, file2);
+            } catch (Exception exception) {
+                LevelStorageSource.LOGGER.error("Failed to save level {}", file, exception);
             }
 
         }
@@ -334,49 +387,51 @@
         public void deleteLevel() throws IOException {
             this.checkLock();
             final Path path = this.levelPath.resolve("session.lock");
+            int i = 1;
 
-            for(int i = 1; i <= 5; ++i) {
-                LevelStorageSource.LOGGER.info("Attempt {}...", (int)i);
+            while (i <= 5) {
+                LevelStorageSource.LOGGER.info("Attempt {}...", i);
 
                 try {
                     Files.walkFileTree(this.levelPath, new SimpleFileVisitor<Path>() {
-                        @Override
-                        public FileVisitResult visitFile(Path path, BasicFileAttributes basicFileAttributes) throws IOException {
-                            if (!path.equals(path)) {
-                                LevelStorageSource.LOGGER.debug("Deleting {}", (Object)path);
-                                Files.delete(path);
+                        public FileVisitResult visitFile(Path path1, BasicFileAttributes basicfileattributes) throws IOException {
+                            if (!path1.equals(path)) {
+                                LevelStorageSource.LOGGER.debug("Deleting {}", path1);
+                                Files.delete(path1);
                             }
 
                             return FileVisitResult.CONTINUE;
                         }
 
-                        @Override
-                        public FileVisitResult postVisitDirectory(Path path, IOException iOException) throws IOException {
-                            if (iOException != null) {
-                                throw iOException;
+                        public FileVisitResult postVisitDirectory(Path path1, IOException ioexception) throws IOException {
+                            if (ioexception != null) {
+                                throw ioexception;
                             } else {
-                                if (path.equals(LevelStorageAccess.this.levelPath)) {
+                                if (path1.equals(LevelStorageAccess.this.levelPath)) {
                                     LevelStorageAccess.this.lock.close();
                                     Files.deleteIfExists(path);
                                 }
 
-                                Files.delete(path);
+                                Files.delete(path1);
                                 return FileVisitResult.CONTINUE;
                             }
                         }
                     });
                     break;
-                } catch (IOException var6) {
+                } catch (IOException ioexception) {
                     if (i >= 5) {
-                        throw var6;
+                        throw ioexception;
                     }
 
-                    LevelStorageSource.LOGGER.warn("Failed to delete {}", this.levelPath, var6);
+                    LevelStorageSource.LOGGER.warn("Failed to delete {}", this.levelPath, ioexception);
 
                     try {
                         Thread.sleep(500L);
-                    } catch (InterruptedException var5) {
+                    } catch (InterruptedException interruptedexception) {
+                        ;
                     }
+
+                    ++i;
                 }
             }
 
@@ -385,13 +440,16 @@
         public void renameLevel(String name) throws IOException {
             this.checkLock();
             File file = new File(LevelStorageSource.this.baseDir.toFile(), this.levelId);
+
             if (file.exists()) {
-                File file2 = new File(file, "level.dat");
-                if (file2.exists()) {
-                    CompoundTag compoundTag = NbtIo.readCompressed(file2);
-                    CompoundTag compoundTag2 = compoundTag.getCompound("Data");
-                    compoundTag2.putString("LevelName", name);
-                    NbtIo.writeCompressed(compoundTag, file2);
+                File file1 = new File(file, "level.dat");
+
+                if (file1.exists()) {
+                    CompoundTag nbttagcompound = NbtIo.readCompressed(file1);
+                    CompoundTag nbttagcompound1 = nbttagcompound.getCompound("Data");
+
+                    nbttagcompound1.putString("LevelName", name);
+                    NbtIo.writeCompressed(nbttagcompound, file1);
                 }
 
             }
@@ -399,50 +457,51 @@
 
         public long makeWorldBackup() throws IOException {
             this.checkLock();
-            String string = LocalDateTime.now().format(LevelStorageSource.FORMATTER) + "_" + this.levelId;
+            String s = LocalDateTime.now().format(LevelStorageSource.FORMATTER);
+            String s1 = s + "_" + this.levelId;
             Path path = LevelStorageSource.this.getBackupPath();
 
             try {
-                Files.createDirectories(Files.exists(path) ? path.toRealPath() : path);
-            } catch (IOException var9) {
-                throw new RuntimeException(var9);
+                Files.createDirectories(Files.exists(path, new LinkOption[0]) ? path.toRealPath() : path);
+            } catch (IOException ioexception) {
+                throw new RuntimeException(ioexception);
             }
 
-            Path path2 = path.resolve(FileUtil.findAvailableName(path, string, ".zip"));
-            final ZipOutputStream zipOutputStream = new ZipOutputStream(new BufferedOutputStream(Files.newOutputStream(path2)));
+            Path path1 = path.resolve(FileUtil.findAvailableName(path, s1, ".zip"));
+            final ZipOutputStream zipoutputstream = new ZipOutputStream(new BufferedOutputStream(Files.newOutputStream(path1)));
 
             try {
-                final Path path3 = Paths.get(this.levelId);
+                final Path path2 = Paths.get(this.levelId);
+
                 Files.walkFileTree(this.levelPath, new SimpleFileVisitor<Path>() {
-                    @Override
-                    public FileVisitResult visitFile(Path path, BasicFileAttributes basicFileAttributes) throws IOException {
-                        if (path.endsWith("session.lock")) {
+                    public FileVisitResult visitFile(Path path3, BasicFileAttributes basicfileattributes) throws IOException {
+                        if (path3.endsWith("session.lock")) {
                             return FileVisitResult.CONTINUE;
                         } else {
-                            String string = path3.resolve(LevelStorageAccess.this.levelPath.relativize(path)).toString().replace('\\', '/');
-                            ZipEntry zipEntry = new ZipEntry(string);
-                            zipOutputStream.putNextEntry(zipEntry);
-                            com.google.common.io.Files.asByteSource(path.toFile()).copyTo(zipOutputStream);
-                            zipOutputStream.closeEntry();
+                            String s2 = path2.resolve(LevelStorageAccess.this.levelPath.relativize(path3)).toString().replace('\\', '/');
+                            ZipEntry zipentry = new ZipEntry(s2);
+
+                            zipoutputstream.putNextEntry(zipentry);
+                            com.google.common.io.Files.asByteSource(path3.toFile()).copyTo(zipoutputstream);
+                            zipoutputstream.closeEntry();
                             return FileVisitResult.CONTINUE;
                         }
                     }
                 });
-            } catch (Throwable var8) {
+            } catch (Throwable throwable) {
                 try {
-                    zipOutputStream.close();
-                } catch (Throwable var7) {
-                    var8.addSuppressed(var7);
+                    zipoutputstream.close();
+                } catch (Throwable throwable1) {
+                    throwable.addSuppressed(throwable1);
                 }
 
-                throw var8;
+                throw throwable;
             }
 
-            zipOutputStream.close();
-            return Files.size(path2);
+            zipoutputstream.close();
+            return Files.size(path1);
         }
 
-        @Override
         public void close() throws IOException {
             this.lock.close();
         }
