--- a/net/minecraft/world/level/chunk/DataLayer.java
+++ b/net/minecraft/world/level/chunk/DataLayer.java
@@ -1,3 +1,4 @@
+// mc-dev import
 package net.minecraft.world.level.chunk;
 
 import javax.annotation.Nullable;
@@ -5,6 +6,7 @@
 import net.minecraft.util.VisibleForDebug;
 
 public final class DataLayer {
+
     public static final int LAYER_COUNT = 16;
     public static final int LAYER_SIZE = 128;
     public static final int SIZE = 2048;
@@ -12,13 +14,12 @@
     @Nullable
     protected byte[] data;
 
-    public DataLayer() {
-    }
+    public DataLayer() {}
 
     public DataLayer(byte[] bytes) {
         this.data = bytes;
         if (bytes.length != 2048) {
-            throw (IllegalArgumentException)Util.pauseInIde(new IllegalArgumentException("DataLayer should be 2048 bytes not: " + bytes.length));
+            throw (IllegalArgumentException) Util.pauseInIde(new IllegalArgumentException("DataLayer should be 2048 bytes not: " + bytes.length));
         }
     }
 
@@ -27,11 +28,11 @@
     }
 
     public int get(int x, int y, int z) {
-        return this.get(getIndex(x, y, z));
+        return this.get(DataLayer.getIndex(x, y, z));
     }
 
     public void set(int x, int y, int z, int value) {
-        this.set(getIndex(x, y, z), value);
+        this.set(DataLayer.getIndex(x, y, z), value);
     }
 
     private static int getIndex(int i, int x, int y) {
@@ -42,9 +43,10 @@
         if (this.data == null) {
             return 0;
         } else {
-            int i = getByteIndex(index);
-            int j = getNibbleIndex(index);
-            return this.data[i] >> 4 * j & 15;
+            int j = DataLayer.getByteIndex(index);
+            int k = DataLayer.getNibbleIndex(index);
+
+            return this.data[j] >> 4 * k & 15;
         }
     }
 
@@ -53,11 +55,12 @@
             this.data = new byte[2048];
         }
 
-        int i = getByteIndex(index);
-        int j = getNibbleIndex(index);
-        int k = ~(15 << 4 * j);
-        int l = (value & 15) << 4 * j;
-        this.data[i] = (byte)(this.data[i] & k | l);
+        int k = DataLayer.getByteIndex(index);
+        int l = DataLayer.getNibbleIndex(index);
+        int i1 = ~(15 << 4 * l);
+        int j1 = (value & 15) << 4 * l;
+
+        this.data[k] = (byte) (this.data[k] & i1 | j1);
     }
 
     private static int getNibbleIndex(int i) {
@@ -77,39 +80,38 @@
     }
 
     public DataLayer copy() {
-        return this.data == null ? new DataLayer() : new DataLayer((byte[])this.data.clone());
+        return this.data == null ? new DataLayer() : new DataLayer((byte[]) this.data.clone());
     }
 
-    @Override
     public String toString() {
-        StringBuilder stringBuilder = new StringBuilder();
+        StringBuilder stringbuilder = new StringBuilder();
 
-        for(int i = 0; i < 4096; ++i) {
-            stringBuilder.append(Integer.toHexString(this.get(i)));
+        for (int i = 0; i < 4096; ++i) {
+            stringbuilder.append(Integer.toHexString(this.get(i)));
             if ((i & 15) == 15) {
-                stringBuilder.append("\n");
+                stringbuilder.append("\n");
             }
 
             if ((i & 255) == 255) {
-                stringBuilder.append("\n");
+                stringbuilder.append("\n");
             }
         }
 
-        return stringBuilder.toString();
+        return stringbuilder.toString();
     }
 
     @VisibleForDebug
     public String layerToString(int unused) {
-        StringBuilder stringBuilder = new StringBuilder();
+        StringBuilder stringbuilder = new StringBuilder();
 
-        for(int i = 0; i < 256; ++i) {
-            stringBuilder.append(Integer.toHexString(this.get(i)));
-            if ((i & 15) == 15) {
-                stringBuilder.append("\n");
+        for (int j = 0; j < 256; ++j) {
+            stringbuilder.append(Integer.toHexString(this.get(j)));
+            if ((j & 15) == 15) {
+                stringbuilder.append("\n");
             }
         }
 
-        return stringBuilder.toString();
+        return stringbuilder.toString();
     }
 
     public boolean isEmpty() {
