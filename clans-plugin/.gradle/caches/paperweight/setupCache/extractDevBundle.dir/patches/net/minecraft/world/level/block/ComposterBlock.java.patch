--- a/net/minecraft/world/level/block/ComposterBlock.java
+++ b/net/minecraft/world/level/block/ComposterBlock.java
@@ -4,21 +4,6 @@
 import it.unimi.dsi.fastutil.objects.Object2FloatOpenHashMap;
 import java.util.Random;
 import javax.annotation.Nullable;
-import net.minecraft.Util;
-import net.minecraft.core.BlockPos;
-import net.minecraft.core.Direction;
-import net.minecraft.core.particles.ParticleTypes;
-import net.minecraft.server.level.ServerLevel;
-import net.minecraft.sounds.SoundEvents;
-import net.minecraft.sounds.SoundSource;
-import net.minecraft.stats.Stats;
-import net.minecraft.world.InteractionHand;
-import net.minecraft.world.InteractionResult;
-import net.minecraft.world.SimpleContainer;
-import net.minecraft.world.WorldlyContainer;
-import net.minecraft.world.WorldlyContainerHolder;
-import net.minecraft.world.entity.item.ItemEntity;
-import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.BlockGetter;
@@ -36,167 +21,191 @@
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import net.minecraft.Util;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Direction;
+import net.minecraft.core.particles.ParticleTypes;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.sounds.SoundEvents;
+import net.minecraft.sounds.SoundSource;
+import net.minecraft.stats.Stats;
+import net.minecraft.world.InteractionHand;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.SimpleContainer;
+import net.minecraft.world.WorldlyContainer;
+import net.minecraft.world.WorldlyContainerHolder;
+// CraftBukkit start
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.item.ItemEntity;
+import net.minecraft.world.entity.player.Player;
+import org.bukkit.craftbukkit.v1_18_R1.inventory.CraftBlockInventoryHolder;
+import org.bukkit.craftbukkit.v1_18_R1.util.DummyGeneratorAccess;
+// CraftBukkit end
 
 public class ComposterBlock extends Block implements WorldlyContainerHolder {
+
     public static final int READY = 8;
     public static final int MIN_LEVEL = 0;
     public static final int MAX_LEVEL = 7;
     public static final IntegerProperty LEVEL = BlockStateProperties.LEVEL_COMPOSTER;
-    public static final Object2FloatMap<ItemLike> COMPOSTABLES = new Object2FloatOpenHashMap<>();
+    public static final Object2FloatMap<ItemLike> COMPOSTABLES = new Object2FloatOpenHashMap();
     private static final int AABB_SIDE_THICKNESS = 2;
     private static final VoxelShape OUTER_SHAPE = Shapes.block();
-    private static final VoxelShape[] SHAPES = Util.make(new VoxelShape[9], (shapes) -> {
-        for(int i = 0; i < 8; ++i) {
-            shapes[i] = Shapes.join(OUTER_SHAPE, Block.box(2.0D, (double)Math.max(2, 1 + i * 2), 2.0D, 14.0D, 16.0D, 14.0D), BooleanOp.ONLY_FIRST);
+    private static final VoxelShape[] SHAPES = (VoxelShape[]) Util.make(new VoxelShape[9], (avoxelshape) -> {
+        for (int i = 0; i < 8; ++i) {
+            avoxelshape[i] = Shapes.join(ComposterBlock.OUTER_SHAPE, Block.box(2.0D, (double) Math.max(2, 1 + i * 2), 2.0D, 14.0D, 16.0D, 14.0D), BooleanOp.ONLY_FIRST);
         }
 
-        shapes[8] = shapes[7];
+        avoxelshape[8] = avoxelshape[7];
     });
 
     public static void bootStrap() {
-        COMPOSTABLES.defaultReturnValue(-1.0F);
+        ComposterBlock.COMPOSTABLES.defaultReturnValue(-1.0F);
         float f = 0.3F;
-        float g = 0.5F;
-        float h = 0.65F;
-        float i = 0.85F;
-        float j = 1.0F;
-        add(0.3F, Items.JUNGLE_LEAVES);
-        add(0.3F, Items.OAK_LEAVES);
-        add(0.3F, Items.SPRUCE_LEAVES);
-        add(0.3F, Items.DARK_OAK_LEAVES);
-        add(0.3F, Items.ACACIA_LEAVES);
-        add(0.3F, Items.BIRCH_LEAVES);
-        add(0.3F, Items.AZALEA_LEAVES);
-        add(0.3F, Items.OAK_SAPLING);
-        add(0.3F, Items.SPRUCE_SAPLING);
-        add(0.3F, Items.BIRCH_SAPLING);
-        add(0.3F, Items.JUNGLE_SAPLING);
-        add(0.3F, Items.ACACIA_SAPLING);
-        add(0.3F, Items.DARK_OAK_SAPLING);
-        add(0.3F, Items.BEETROOT_SEEDS);
-        add(0.3F, Items.DRIED_KELP);
-        add(0.3F, Items.GRASS);
-        add(0.3F, Items.KELP);
-        add(0.3F, Items.MELON_SEEDS);
-        add(0.3F, Items.PUMPKIN_SEEDS);
-        add(0.3F, Items.SEAGRASS);
-        add(0.3F, Items.SWEET_BERRIES);
-        add(0.3F, Items.GLOW_BERRIES);
-        add(0.3F, Items.WHEAT_SEEDS);
-        add(0.3F, Items.MOSS_CARPET);
-        add(0.3F, Items.SMALL_DRIPLEAF);
-        add(0.3F, Items.HANGING_ROOTS);
-        add(0.5F, Items.DRIED_KELP_BLOCK);
-        add(0.5F, Items.TALL_GRASS);
-        add(0.5F, Items.FLOWERING_AZALEA_LEAVES);
-        add(0.5F, Items.CACTUS);
-        add(0.5F, Items.SUGAR_CANE);
-        add(0.5F, Items.VINE);
-        add(0.5F, Items.NETHER_SPROUTS);
-        add(0.5F, Items.WEEPING_VINES);
-        add(0.5F, Items.TWISTING_VINES);
-        add(0.5F, Items.MELON_SLICE);
-        add(0.5F, Items.GLOW_LICHEN);
-        add(0.65F, Items.SEA_PICKLE);
-        add(0.65F, Items.LILY_PAD);
-        add(0.65F, Items.PUMPKIN);
-        add(0.65F, Items.CARVED_PUMPKIN);
-        add(0.65F, Items.MELON);
-        add(0.65F, Items.APPLE);
-        add(0.65F, Items.BEETROOT);
-        add(0.65F, Items.CARROT);
-        add(0.65F, Items.COCOA_BEANS);
-        add(0.65F, Items.POTATO);
-        add(0.65F, Items.WHEAT);
-        add(0.65F, Items.BROWN_MUSHROOM);
-        add(0.65F, Items.RED_MUSHROOM);
-        add(0.65F, Items.MUSHROOM_STEM);
-        add(0.65F, Items.CRIMSON_FUNGUS);
-        add(0.65F, Items.WARPED_FUNGUS);
-        add(0.65F, Items.NETHER_WART);
-        add(0.65F, Items.CRIMSON_ROOTS);
-        add(0.65F, Items.WARPED_ROOTS);
-        add(0.65F, Items.SHROOMLIGHT);
-        add(0.65F, Items.DANDELION);
-        add(0.65F, Items.POPPY);
-        add(0.65F, Items.BLUE_ORCHID);
-        add(0.65F, Items.ALLIUM);
-        add(0.65F, Items.AZURE_BLUET);
-        add(0.65F, Items.RED_TULIP);
-        add(0.65F, Items.ORANGE_TULIP);
-        add(0.65F, Items.WHITE_TULIP);
-        add(0.65F, Items.PINK_TULIP);
-        add(0.65F, Items.OXEYE_DAISY);
-        add(0.65F, Items.CORNFLOWER);
-        add(0.65F, Items.LILY_OF_THE_VALLEY);
-        add(0.65F, Items.WITHER_ROSE);
-        add(0.65F, Items.FERN);
-        add(0.65F, Items.SUNFLOWER);
-        add(0.65F, Items.LILAC);
-        add(0.65F, Items.ROSE_BUSH);
-        add(0.65F, Items.PEONY);
-        add(0.65F, Items.LARGE_FERN);
-        add(0.65F, Items.SPORE_BLOSSOM);
-        add(0.65F, Items.AZALEA);
-        add(0.65F, Items.MOSS_BLOCK);
-        add(0.65F, Items.BIG_DRIPLEAF);
-        add(0.85F, Items.HAY_BLOCK);
-        add(0.85F, Items.BROWN_MUSHROOM_BLOCK);
-        add(0.85F, Items.RED_MUSHROOM_BLOCK);
-        add(0.85F, Items.NETHER_WART_BLOCK);
-        add(0.85F, Items.WARPED_WART_BLOCK);
-        add(0.85F, Items.FLOWERING_AZALEA);
-        add(0.85F, Items.BREAD);
-        add(0.85F, Items.BAKED_POTATO);
-        add(0.85F, Items.COOKIE);
-        add(1.0F, Items.CAKE);
-        add(1.0F, Items.PUMPKIN_PIE);
+        float f1 = 0.5F;
+        float f2 = 0.65F;
+        float f3 = 0.85F;
+        float f4 = 1.0F;
+
+        ComposterBlock.add(0.3F, Items.JUNGLE_LEAVES);
+        ComposterBlock.add(0.3F, Items.OAK_LEAVES);
+        ComposterBlock.add(0.3F, Items.SPRUCE_LEAVES);
+        ComposterBlock.add(0.3F, Items.DARK_OAK_LEAVES);
+        ComposterBlock.add(0.3F, Items.ACACIA_LEAVES);
+        ComposterBlock.add(0.3F, Items.BIRCH_LEAVES);
+        ComposterBlock.add(0.3F, Items.AZALEA_LEAVES);
+        ComposterBlock.add(0.3F, Items.OAK_SAPLING);
+        ComposterBlock.add(0.3F, Items.SPRUCE_SAPLING);
+        ComposterBlock.add(0.3F, Items.BIRCH_SAPLING);
+        ComposterBlock.add(0.3F, Items.JUNGLE_SAPLING);
+        ComposterBlock.add(0.3F, Items.ACACIA_SAPLING);
+        ComposterBlock.add(0.3F, Items.DARK_OAK_SAPLING);
+        ComposterBlock.add(0.3F, Items.BEETROOT_SEEDS);
+        ComposterBlock.add(0.3F, Items.DRIED_KELP);
+        ComposterBlock.add(0.3F, Items.GRASS);
+        ComposterBlock.add(0.3F, Items.KELP);
+        ComposterBlock.add(0.3F, Items.MELON_SEEDS);
+        ComposterBlock.add(0.3F, Items.PUMPKIN_SEEDS);
+        ComposterBlock.add(0.3F, Items.SEAGRASS);
+        ComposterBlock.add(0.3F, Items.SWEET_BERRIES);
+        ComposterBlock.add(0.3F, Items.GLOW_BERRIES);
+        ComposterBlock.add(0.3F, Items.WHEAT_SEEDS);
+        ComposterBlock.add(0.3F, Items.MOSS_CARPET);
+        ComposterBlock.add(0.3F, Items.SMALL_DRIPLEAF);
+        ComposterBlock.add(0.3F, Items.HANGING_ROOTS);
+        ComposterBlock.add(0.5F, Items.DRIED_KELP_BLOCK);
+        ComposterBlock.add(0.5F, Items.TALL_GRASS);
+        ComposterBlock.add(0.5F, Items.FLOWERING_AZALEA_LEAVES);
+        ComposterBlock.add(0.5F, Items.CACTUS);
+        ComposterBlock.add(0.5F, Items.SUGAR_CANE);
+        ComposterBlock.add(0.5F, Items.VINE);
+        ComposterBlock.add(0.5F, Items.NETHER_SPROUTS);
+        ComposterBlock.add(0.5F, Items.WEEPING_VINES);
+        ComposterBlock.add(0.5F, Items.TWISTING_VINES);
+        ComposterBlock.add(0.5F, Items.MELON_SLICE);
+        ComposterBlock.add(0.5F, Items.GLOW_LICHEN);
+        ComposterBlock.add(0.65F, Items.SEA_PICKLE);
+        ComposterBlock.add(0.65F, Items.LILY_PAD);
+        ComposterBlock.add(0.65F, Items.PUMPKIN);
+        ComposterBlock.add(0.65F, Items.CARVED_PUMPKIN);
+        ComposterBlock.add(0.65F, Items.MELON);
+        ComposterBlock.add(0.65F, Items.APPLE);
+        ComposterBlock.add(0.65F, Items.BEETROOT);
+        ComposterBlock.add(0.65F, Items.CARROT);
+        ComposterBlock.add(0.65F, Items.COCOA_BEANS);
+        ComposterBlock.add(0.65F, Items.POTATO);
+        ComposterBlock.add(0.65F, Items.WHEAT);
+        ComposterBlock.add(0.65F, Items.BROWN_MUSHROOM);
+        ComposterBlock.add(0.65F, Items.RED_MUSHROOM);
+        ComposterBlock.add(0.65F, Items.MUSHROOM_STEM);
+        ComposterBlock.add(0.65F, Items.CRIMSON_FUNGUS);
+        ComposterBlock.add(0.65F, Items.WARPED_FUNGUS);
+        ComposterBlock.add(0.65F, Items.NETHER_WART);
+        ComposterBlock.add(0.65F, Items.CRIMSON_ROOTS);
+        ComposterBlock.add(0.65F, Items.WARPED_ROOTS);
+        ComposterBlock.add(0.65F, Items.SHROOMLIGHT);
+        ComposterBlock.add(0.65F, Items.DANDELION);
+        ComposterBlock.add(0.65F, Items.POPPY);
+        ComposterBlock.add(0.65F, Items.BLUE_ORCHID);
+        ComposterBlock.add(0.65F, Items.ALLIUM);
+        ComposterBlock.add(0.65F, Items.AZURE_BLUET);
+        ComposterBlock.add(0.65F, Items.RED_TULIP);
+        ComposterBlock.add(0.65F, Items.ORANGE_TULIP);
+        ComposterBlock.add(0.65F, Items.WHITE_TULIP);
+        ComposterBlock.add(0.65F, Items.PINK_TULIP);
+        ComposterBlock.add(0.65F, Items.OXEYE_DAISY);
+        ComposterBlock.add(0.65F, Items.CORNFLOWER);
+        ComposterBlock.add(0.65F, Items.LILY_OF_THE_VALLEY);
+        ComposterBlock.add(0.65F, Items.WITHER_ROSE);
+        ComposterBlock.add(0.65F, Items.FERN);
+        ComposterBlock.add(0.65F, Items.SUNFLOWER);
+        ComposterBlock.add(0.65F, Items.LILAC);
+        ComposterBlock.add(0.65F, Items.ROSE_BUSH);
+        ComposterBlock.add(0.65F, Items.PEONY);
+        ComposterBlock.add(0.65F, Items.LARGE_FERN);
+        ComposterBlock.add(0.65F, Items.SPORE_BLOSSOM);
+        ComposterBlock.add(0.65F, Items.AZALEA);
+        ComposterBlock.add(0.65F, Items.MOSS_BLOCK);
+        ComposterBlock.add(0.65F, Items.BIG_DRIPLEAF);
+        ComposterBlock.add(0.85F, Items.HAY_BLOCK);
+        ComposterBlock.add(0.85F, Items.BROWN_MUSHROOM_BLOCK);
+        ComposterBlock.add(0.85F, Items.RED_MUSHROOM_BLOCK);
+        ComposterBlock.add(0.85F, Items.NETHER_WART_BLOCK);
+        ComposterBlock.add(0.85F, Items.WARPED_WART_BLOCK);
+        ComposterBlock.add(0.85F, Items.FLOWERING_AZALEA);
+        ComposterBlock.add(0.85F, Items.BREAD);
+        ComposterBlock.add(0.85F, Items.BAKED_POTATO);
+        ComposterBlock.add(0.85F, Items.COOKIE);
+        ComposterBlock.add(1.0F, Items.CAKE);
+        ComposterBlock.add(1.0F, Items.PUMPKIN_PIE);
     }
 
     private static void add(float levelIncreaseChance, ItemLike item) {
-        COMPOSTABLES.put(item.asItem(), levelIncreaseChance);
+        ComposterBlock.COMPOSTABLES.put(item.asItem(), levelIncreaseChance);
     }
 
     public ComposterBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState(this.stateDefinition.any().setValue(LEVEL, Integer.valueOf(0)));
+        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(ComposterBlock.LEVEL, 0));
     }
 
     public static void handleFill(Level world, BlockPos pos, boolean fill) {
-        BlockState blockState = world.getBlockState(pos);
-        world.playLocalSound((double)pos.getX(), (double)pos.getY(), (double)pos.getZ(), fill ? SoundEvents.COMPOSTER_FILL_SUCCESS : SoundEvents.COMPOSTER_FILL, SoundSource.BLOCKS, 1.0F, 1.0F, false);
-        double d = blockState.getShape(world, pos).max(Direction.Axis.Y, 0.5D, 0.5D) + 0.03125D;
-        double e = (double)0.13125F;
-        double f = (double)0.7375F;
+        BlockState iblockdata = world.getBlockState(pos);
+
+        world.playLocalSound((double) pos.getX(), (double) pos.getY(), (double) pos.getZ(), fill ? SoundEvents.COMPOSTER_FILL_SUCCESS : SoundEvents.COMPOSTER_FILL, SoundSource.BLOCKS, 1.0F, 1.0F, false);
+        double d0 = iblockdata.getShape(world, pos).max(Direction.Axis.Y, 0.5D, 0.5D) + 0.03125D;
+        double d1 = 0.13124999403953552D;
+        double d2 = 0.737500011920929D;
         Random random = world.getRandom();
 
-        for(int i = 0; i < 10; ++i) {
-            double g = random.nextGaussian() * 0.02D;
-            double h = random.nextGaussian() * 0.02D;
-            double j = random.nextGaussian() * 0.02D;
-            world.addParticle(ParticleTypes.COMPOSTER, (double)pos.getX() + (double)0.13125F + (double)0.7375F * (double)random.nextFloat(), (double)pos.getY() + d + (double)random.nextFloat() * (1.0D - d), (double)pos.getZ() + (double)0.13125F + (double)0.7375F * (double)random.nextFloat(), g, h, j);
+        for (int i = 0; i < 10; ++i) {
+            double d3 = random.nextGaussian() * 0.02D;
+            double d4 = random.nextGaussian() * 0.02D;
+            double d5 = random.nextGaussian() * 0.02D;
+
+            world.addParticle(ParticleTypes.COMPOSTER, (double) pos.getX() + 0.13124999403953552D + 0.737500011920929D * (double) random.nextFloat(), (double) pos.getY() + d0 + (double) random.nextFloat() * (1.0D - d0), (double) pos.getZ() + 0.13124999403953552D + 0.737500011920929D * (double) random.nextFloat(), d3, d4, d5);
         }
 
     }
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return SHAPES[state.getValue(LEVEL)];
+        return ComposterBlock.SHAPES[(Integer) state.getValue(ComposterBlock.LEVEL)];
     }
 
     @Override
     public VoxelShape getInteractionShape(BlockState state, BlockGetter world, BlockPos pos) {
-        return OUTER_SHAPE;
+        return ComposterBlock.OUTER_SHAPE;
     }
 
     @Override
     public VoxelShape getCollisionShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return SHAPES[0];
+        return ComposterBlock.SHAPES[0];
     }
 
     @Override
     public void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
-        if (state.getValue(LEVEL) == 7) {
+        if ((Integer) state.getValue(ComposterBlock.LEVEL) == 7) {
             world.scheduleTick(pos, state.getBlock(), 20);
         }
 
@@ -204,82 +213,112 @@
 
     @Override
     public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
-        int i = state.getValue(LEVEL);
-        ItemStack itemStack = player.getItemInHand(hand);
-        if (i < 8 && COMPOSTABLES.containsKey(itemStack.getItem())) {
+        int i = (Integer) state.getValue(ComposterBlock.LEVEL);
+        ItemStack itemstack = player.getItemInHand(hand);
+
+        if (i < 8 && ComposterBlock.COMPOSTABLES.containsKey(itemstack.getItem())) {
             if (i < 7 && !world.isClientSide) {
-                BlockState blockState = addItem(state, world, pos, itemStack);
-                world.levelEvent(1500, pos, state != blockState ? 1 : 0);
-                player.awardStat(Stats.ITEM_USED.get(itemStack.getItem()));
+                BlockState iblockdata1 = ComposterBlock.addItem(state, world, pos, itemstack);
+
+                world.levelEvent(1500, pos, state != iblockdata1 ? 1 : 0);
+                player.awardStat(Stats.ITEM_USED.get(itemstack.getItem()));
                 if (!player.getAbilities().instabuild) {
-                    itemStack.shrink(1);
+                    itemstack.shrink(1);
                 }
             }
 
             return InteractionResult.sidedSuccess(world.isClientSide);
         } else if (i == 8) {
-            extractProduce(state, world, pos);
+            ComposterBlock.extractProduce(state, world, pos, (Entity) null); // CraftBukkit - no event for players
             return InteractionResult.sidedSuccess(world.isClientSide);
         } else {
             return InteractionResult.PASS;
         }
     }
 
-    public static BlockState insertItem(BlockState state, ServerLevel world, ItemStack stack, BlockPos pos) {
-        int i = state.getValue(LEVEL);
-        if (i < 7 && COMPOSTABLES.containsKey(stack.getItem())) {
-            BlockState blockState = addItem(state, world, pos, stack);
-            stack.shrink(1);
-            return blockState;
+    public static BlockState insertItem(BlockState iblockdata, ServerLevel worldserver, ItemStack itemstack, BlockPos blockposition, Entity entity) { // CraftBukkit
+        int i = (Integer) iblockdata.getValue(ComposterBlock.LEVEL);
+
+        if (i < 7 && ComposterBlock.COMPOSTABLES.containsKey(itemstack.getItem())) {
+            // CraftBukkit start
+            double rand = worldserver.getRandom().nextDouble();
+            BlockState iblockdata1 = ComposterBlock.addItem(iblockdata, DummyGeneratorAccess.INSTANCE, blockposition, itemstack, rand);
+            if (iblockdata == iblockdata1 || org.bukkit.craftbukkit.v1_18_R1.event.CraftEventFactory.callEntityChangeBlockEvent(entity, blockposition, iblockdata1).isCancelled()) {
+                return iblockdata;
+            }
+            iblockdata1 = ComposterBlock.addItem(iblockdata, (LevelAccessor) worldserver, blockposition, itemstack, rand);
+            // CraftBukkit end
+
+            itemstack.shrink(1);
+            return iblockdata1;
         } else {
-            return state;
+            return iblockdata;
         }
     }
 
-    public static BlockState extractProduce(BlockState state, Level world, BlockPos pos) {
+    // CraftBukkit start
+    public static BlockState extractProduce(BlockState iblockdata, Level world, BlockPos blockposition, Entity entity) {
+        if (entity != null) {
+            BlockState iblockdata1 = ComposterBlock.empty(iblockdata, DummyGeneratorAccess.INSTANCE, blockposition);
+            if (org.bukkit.craftbukkit.v1_18_R1.event.CraftEventFactory.callEntityChangeBlockEvent(entity, blockposition, iblockdata1).isCancelled()) {
+                return iblockdata;
+            }
+        }
+        // CraftBukkit end
         if (!world.isClientSide) {
             float f = 0.7F;
-            double d = (double)(world.random.nextFloat() * 0.7F) + (double)0.15F;
-            double e = (double)(world.random.nextFloat() * 0.7F) + (double)0.060000002F + 0.6D;
-            double g = (double)(world.random.nextFloat() * 0.7F) + (double)0.15F;
-            ItemEntity itemEntity = new ItemEntity(world, (double)pos.getX() + d, (double)pos.getY() + e, (double)pos.getZ() + g, new ItemStack(Items.BONE_MEAL));
-            itemEntity.setDefaultPickUpDelay();
-            world.addFreshEntity(itemEntity);
+            double d0 = (double) (world.random.nextFloat() * 0.7F) + 0.15000000596046448D;
+            double d1 = (double) (world.random.nextFloat() * 0.7F) + 0.06000000238418579D + 0.6D;
+            double d2 = (double) (world.random.nextFloat() * 0.7F) + 0.15000000596046448D;
+            ItemEntity entityitem = new ItemEntity(world, (double) blockposition.getX() + d0, (double) blockposition.getY() + d1, (double) blockposition.getZ() + d2, new ItemStack(Items.BONE_MEAL));
+
+            entityitem.setDefaultPickUpDelay();
+            world.addFreshEntity(entityitem);
         }
 
-        BlockState blockState = empty(state, world, pos);
-        world.playSound((Player)null, pos, SoundEvents.COMPOSTER_EMPTY, SoundSource.BLOCKS, 1.0F, 1.0F);
-        return blockState;
+        BlockState iblockdata1 = ComposterBlock.empty(iblockdata, world, blockposition);
+
+        world.playSound((Player) null, blockposition, SoundEvents.COMPOSTER_EMPTY, SoundSource.BLOCKS, 1.0F, 1.0F);
+        return iblockdata1;
     }
 
     static BlockState empty(BlockState state, LevelAccessor world, BlockPos pos) {
-        BlockState blockState = state.setValue(LEVEL, Integer.valueOf(0));
-        world.setBlock(pos, blockState, 3);
-        return blockState;
+        BlockState iblockdata1 = (BlockState) state.setValue(ComposterBlock.LEVEL, 0);
+
+        world.setBlock(pos, iblockdata1, 3);
+        return iblockdata1;
     }
 
     static BlockState addItem(BlockState state, LevelAccessor world, BlockPos pos, ItemStack item) {
-        int i = state.getValue(LEVEL);
-        float f = COMPOSTABLES.getFloat(item.getItem());
-        if ((i != 0 || !(f > 0.0F)) && !(world.getRandom().nextDouble() < (double)f)) {
-            return state;
+        // CraftBukkit start
+        return ComposterBlock.addItem(state, world, pos, item, world.getRandom().nextDouble());
+    }
+
+    static BlockState addItem(BlockState iblockdata, LevelAccessor generatoraccess, BlockPos blockposition, ItemStack itemstack, double rand) {
+        // CraftBukkit end
+        int i = (Integer) iblockdata.getValue(ComposterBlock.LEVEL);
+        float f = ComposterBlock.COMPOSTABLES.getFloat(itemstack.getItem());
+
+        if ((i != 0 || f <= 0.0F) && rand >= (double) f) {
+            return iblockdata;
         } else {
             int j = i + 1;
-            BlockState blockState = state.setValue(LEVEL, Integer.valueOf(j));
-            world.setBlock(pos, blockState, 3);
+            BlockState iblockdata1 = (BlockState) iblockdata.setValue(ComposterBlock.LEVEL, j);
+
+            generatoraccess.setBlock(blockposition, iblockdata1, 3);
             if (j == 7) {
-                world.scheduleTick(pos, state.getBlock(), 20);
+                generatoraccess.scheduleTick(blockposition, iblockdata.getBlock(), 20);
             }
 
-            return blockState;
+            return iblockdata1;
         }
     }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, Random random) {
-        if (state.getValue(LEVEL) == 7) {
-            world.setBlock(pos, state.cycle(LEVEL), 3);
-            world.playSound((Player)null, pos, SoundEvents.COMPOSTER_READY, SoundSource.BLOCKS, 1.0F, 1.0F);
+        if ((Integer) state.getValue(ComposterBlock.LEVEL) == 7) {
+            world.setBlock(pos, (BlockState) state.cycle(ComposterBlock.LEVEL), 3);
+            world.playSound((Player) null, pos, SoundEvents.COMPOSTER_READY, SoundSource.BLOCKS, 1.0F, 1.0F);
         }
 
     }
@@ -291,12 +330,12 @@
 
     @Override
     public int getAnalogOutputSignal(BlockState state, Level world, BlockPos pos) {
-        return state.getValue(LEVEL);
+        return (Integer) state.getValue(ComposterBlock.LEVEL);
     }
 
     @Override
     protected void createBlockStateDefinition(StateDefinition.Builder<Block, BlockState> builder) {
-        builder.add(LEVEL);
+        builder.add(ComposterBlock.LEVEL);
     }
 
     @Override
@@ -306,22 +345,35 @@
 
     @Override
     public WorldlyContainer getContainer(BlockState state, LevelAccessor world, BlockPos pos) {
-        int i = state.getValue(LEVEL);
-        if (i == 8) {
-            return new ComposterBlock.OutputContainer(state, world, pos, new ItemStack(Items.BONE_MEAL));
-        } else {
-            return (WorldlyContainer)(i < 7 ? new ComposterBlock.InputContainer(state, world, pos) : new ComposterBlock.EmptyContainer());
-        }
+        int i = (Integer) state.getValue(ComposterBlock.LEVEL);
+
+        // CraftBukkit - empty generatoraccess, blockposition
+        return (WorldlyContainer) (i == 8 ? new ComposterBlock.OutputContainer(state, world, pos, new ItemStack(Items.BONE_MEAL)) : (i < 7 ? new ComposterBlock.InputContainer(state, world, pos) : new ComposterBlock.EmptyContainer(world, pos)));
     }
 
-    public static class EmptyContainer extends SimpleContainer implements WorldlyContainer {
-        public EmptyContainer() {
-            super(0);
+    public static class OutputContainer extends SimpleContainer implements WorldlyContainer {
+
+        private final BlockState state;
+        private final LevelAccessor level;
+        private final BlockPos pos;
+        private boolean changed;
+
+        public OutputContainer(BlockState state, LevelAccessor world, BlockPos pos, ItemStack outputItem) {
+            super(outputItem);
+            this.state = state;
+            this.level = world;
+            this.pos = pos;
+            this.bukkitOwner = new CraftBlockInventoryHolder(world, pos, this); // CraftBukkit
+        }
+
+        @Override
+        public int getMaxStackSize() {
+            return 1;
         }
 
         @Override
         public int[] getSlotsForFace(Direction side) {
-            return new int[0];
+            return side == Direction.DOWN ? new int[]{0} : new int[0];
         }
 
         @Override
@@ -331,11 +383,25 @@
 
         @Override
         public boolean canTakeItemThroughFace(int slot, ItemStack stack, Direction dir) {
-            return false;
+            return !this.changed && dir == Direction.DOWN && stack.is(Items.BONE_MEAL);
+        }
+
+        @Override
+        public void setChanged() {
+            // CraftBukkit start - allow putting items back (eg cancelled InventoryMoveItemEvent)
+            if (this.isEmpty()) {
+                ComposterBlock.empty(this.state, this.level, this.pos);
+                this.changed = true;
+            } else {
+                this.level.setBlock(this.pos, this.state, 3);
+                this.changed = false;
+            }
+            // CraftBukkit end
         }
     }
 
     public static class InputContainer extends SimpleContainer implements WorldlyContainer {
+
         private final BlockState state;
         private final LevelAccessor level;
         private final BlockPos pos;
@@ -343,6 +409,7 @@
 
         public InputContainer(BlockState state, LevelAccessor world, BlockPos pos) {
             super(1);
+            this.bukkitOwner = new CraftBlockInventoryHolder(world, pos, this); // CraftBukkit
             this.state = state;
             this.level = world;
             this.pos = pos;
@@ -370,38 +437,29 @@
 
         @Override
         public void setChanged() {
-            ItemStack itemStack = this.getItem(0);
-            if (!itemStack.isEmpty()) {
+            ItemStack itemstack = this.getItem(0);
+
+            if (!itemstack.isEmpty()) {
                 this.changed = true;
-                BlockState blockState = ComposterBlock.addItem(this.state, this.level, this.pos, itemStack);
-                this.level.levelEvent(1500, this.pos, blockState != this.state ? 1 : 0);
+                BlockState iblockdata = ComposterBlock.addItem(this.state, this.level, this.pos, itemstack);
+
+                this.level.levelEvent(1500, this.pos, iblockdata != this.state ? 1 : 0);
                 this.removeItemNoUpdate(0);
             }
 
         }
     }
 
-    public static class OutputContainer extends SimpleContainer implements WorldlyContainer {
-        private final BlockState state;
-        private final LevelAccessor level;
-        private final BlockPos pos;
-        private boolean changed;
-
-        public OutputContainer(BlockState state, LevelAccessor world, BlockPos pos, ItemStack outputItem) {
-            super(outputItem);
-            this.state = state;
-            this.level = world;
-            this.pos = pos;
-        }
+    public static class EmptyContainer extends SimpleContainer implements WorldlyContainer {
 
-        @Override
-        public int getMaxStackSize() {
-            return 1;
+        public EmptyContainer(LevelAccessor generatoraccess, BlockPos blockposition) { // CraftBukkit
+            super(0);
+            this.bukkitOwner = new CraftBlockInventoryHolder(generatoraccess, blockposition, this); // CraftBukkit
         }
 
         @Override
         public int[] getSlotsForFace(Direction side) {
-            return side == Direction.DOWN ? new int[]{0} : new int[0];
+            return new int[0];
         }
 
         @Override
@@ -411,13 +469,7 @@
 
         @Override
         public boolean canTakeItemThroughFace(int slot, ItemStack stack, Direction dir) {
-            return !this.changed && dir == Direction.DOWN && stack.is(Items.BONE_MEAL);
-        }
-
-        @Override
-        public void setChanged() {
-            ComposterBlock.empty(this.state, this.level, this.pos);
-            this.changed = true;
+            return false;
         }
     }
 }
