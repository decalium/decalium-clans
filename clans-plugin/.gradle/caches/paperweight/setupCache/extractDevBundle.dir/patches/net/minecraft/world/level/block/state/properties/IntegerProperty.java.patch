--- a/net/minecraft/world/level/block/state/properties/IntegerProperty.java
+++ b/net/minecraft/world/level/block/state/properties/IntegerProperty.java
@@ -7,10 +7,27 @@
 import java.util.Set;
 
 public class IntegerProperty extends Property<Integer> {
+
     private final ImmutableSet<Integer> values;
+    // CraftBukkit start
+    public final int min;
+    public final int max;
+
+    // Paper start - optimise iblockdata state lookup
+    @Override
+    public final int getIdFor(final Integer value) {
+        final int val = value.intValue();
+        final int ret = val - this.min;
+
+        return ret | ((this.max - ret) >> 31);
+    }
+    // Paper end - optimise iblockdata state lookup
 
     protected IntegerProperty(String name, int min, int max) {
         super(name, Integer.class);
+        this.min = min;
+        this.max = max;
+        // CraftBukkit end
         if (min < 0) {
             throw new IllegalArgumentException("Min value of " + name + " must be 0 or greater");
         } else if (max <= min) {
@@ -18,8 +35,8 @@
         } else {
             Set<Integer> set = Sets.newHashSet();
 
-            for(int i = min; i <= max; ++i) {
-                set.add(i);
+            for (int k = min; k <= max; ++k) {
+                set.add(k);
             }
 
             this.values = ImmutableSet.copyOf(set);
@@ -31,13 +48,13 @@
         return this.values;
     }
 
-    @Override
-    public boolean equals(Object object) {
+    public boolean equals_unused(Object object) { // Paper
         if (this == object) {
             return true;
         } else if (object instanceof IntegerProperty && super.equals(object)) {
-            IntegerProperty integerProperty = (IntegerProperty)object;
-            return this.values.equals(integerProperty.values);
+            IntegerProperty blockstateinteger = (IntegerProperty) object;
+
+            return this.values.equals(blockstateinteger.values);
         } else {
             return false;
         }
@@ -56,13 +73,13 @@
     public Optional<Integer> getValue(String name) {
         try {
             Integer integer = Integer.valueOf(name);
+
             return this.values.contains(integer) ? Optional.of(integer) : Optional.empty();
-        } catch (NumberFormatException var3) {
+        } catch (NumberFormatException numberformatexception) {
             return Optional.empty();
         }
     }
 
-    @Override
     public String getName(Integer value) {
         return value.toString();
     }
